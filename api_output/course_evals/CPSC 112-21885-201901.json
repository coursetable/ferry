{
    "crn_code": "21885",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            0,
            2,
            11,
            13,
            9
        ],
        [
            6,
            4,
            18,
            8,
            0
        ],
        [
            2,
            4,
            9,
            19,
            1
        ],
        [
            2,
            5,
            7,
            19,
            2
        ],
        [
            0,
            0,
            9,
            17,
            9
        ],
        [
            0,
            0,
            6,
            14,
            14
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0I learned a basic understanding of java and applications to real-world computer problems. ",
            "\u00a0I learned how to code in Java, especially with if statements, for loops, objects, recursion. ",
            "\u00a0Basic Java and OOP. ",
            "\u00a0I learned how to program for the first time, and learned the basics of the theory behind object oriented programming. ",
            "\u00a0Basic understanding of a variety of important topics in CS. ",
            "\u00a0Learned java ",
            "\u00a0We covered the basics of java, from types of values to linked list object-oriented implementation. The first half of the course spends a lot of time covering functions, and the second is basically all data structure stuff. ",
            "\u00a0Despite all the challenges of this class, I managed to salvage (the word \"learn\" might be a stretch) basic programming skills in Java, including programming with primitive types, conditionals and loops, recursion, object-oriented programming, and linked lists. It is fair for me to say now that I can make a very simple working program from scratch, which is pretty cool. I also learned a bit about CS terminology and culture, which is generally just helpful. ",
            "\u00a0Learned Java. The basics: Variables, functions, private vs public, static vs non-static. Also learned about graphics, recursion, and linked lists. ",
            "\u00a0I did not know anything about computer science and about programming prior to this course and I feel that I really learned a lot about those topics. ",
            "\u00a0I learned basic Java programming. ",
            "\u00a0Basic Java programming skills ",
            "\u00a0I learned about recursion, classes, and other basic coding concepts in Java. ",
            "\u00a0Overall this course taught me basic skills and ways of thinking in computer science. It's taught in Java of course, so we also developed competency in this particular coding language, but the coding concepts we learned are relatively universal to computer science and will thus be very helpful for future classes. I now have a much better understanding for what it means to write a program, and overall I feel like this course is helping me to better understand the digital world around me (although the knowledge that this course provides is still very shallow of course). Specifically, by the end of the course you develop a basic understanding for different data types, variables, conditionals, loops, arrays, functions, recursion, object oriented programming, and linked lists. All of these concepts are very important for future computer science classes. I would also say that the psets felt well designed for student learning overall, and that I particularly enjoyed the final project where we basically got free reign to design essentially any program we wanted. ",
            "\u00a0many, I learned how to code in Java which is an invaluable skill. ",
            "\u00a0Basics of programming in Java: functions, objects, recursion, linked lists. Applied through different projects that were actually quite interesting, such as cracking the Caesar cipher. You also get to implement an idea for a final project that has the potential to be pretty enjoyable depending on your project. ",
            "\u00a0I have learnt the fundamentals of object oriented programming, and how to code in java ",
            "\u00a0I learned basics in Java and how to think in terms of programming. ",
            "\u00a0I thought the material was super interesting. However the teaching was the poorest quality I have received in my entire life. I truly think this course needs restructuring both in leadership and in organization to make anyone want to pursue CS and to allow even a minorly positive first experience in programming. If it were not for the TAs I would probably have learned nothing, and I went to every lecture. This cannot continue to happen. ",
            "\u00a0I came in asa complete novice and now I feel confident enough to take more programming classes ",
            "\u00a0I learned a basic introduction to programming in Java. ",
            "\u00a0I definitely learned how to deal with challenges. This course was, by far, my hardest course at Yale so far. It seemed like as much as I tried, I could not grasp the content. Instead of just trying to deal with it myself, as I usually did in past situations, I utilized my resources (another thing I learned to do) and went to the TAs for help. They were always extremely patient and ready to help me understand the material, especially Ivana, Jared, and Musab (shoutout to yall for being great!!), though they were all very helpful. I also learned the basics of Java, of course, and hope that I can continue to develop those skills in another class in my next 3 years here. ",
            "\u00a0I received beyond a basic understanding of java and coding as a whole and what it can be used for. "
        ],
        [
            "\u00a0This class teaches you an extreme amount of information, which is a strong point, but I think lectures could be vastly improved. I was totally lost and would have remained so if not for section. ",
            "\u00a0I think the strength of the course was that it was truly starting from ground zero. You can not know how to code going into this and still do well. However, it does go quite fast and students who already know how to code make the curve a little unfair. ",
            "\u00a0I think the lectures were actually very well done. We went through examples, the in class surveys were engaging, and the pace was good for me.\r\nAlso, the new addition of sections felt good, and I pity the iteration before us who didn't have them.  They were amazing. \r\nI think the collaboration policy is stringent, and the tests are demoralizing. ",
            "\u00a0The final exam was a bit ridiculous. Otherwise, the course was quite good overall. Sections were helpful and lecture was fine. Psets followed very logically from the two. ",
            "\u00a0The topics aren't taught well by the professor, TA sessions saved my grade. ",
            "\u00a0I was actually very pleasantly surprised with this class. I had heard terrible things about it in the past, but they introduced mandatory sections this semester and it really changed the game (though Benedict might have changed other things that I don't know about). The class was also much smaller, so it was easier to get one-on-one attention with TAs and with Benedict. I thought the psets were challenging but doable and fun, and that I learned a lot overall. Plus, we don't have that many psets in general, so you don't really get too burned out (6 psets and 1 final project). \r\nThe main weakness of the class is how slow Benedict lectures--I feel like I don't really learn much in class, and then learn everything on my Friday sections. The final as well was very difficult due to time constraints, so if you don't work well under high pressure, keep that in mind. In general, though, you'll do fine if you work hard on the psets and really try to learn the concepts rather than just sloughing through the class. ",
            "\u00a0Strengths: The addition of section and TAs was extremely helpful. The TAs, being undergrads, understand our struggles, so they're pretty helpful in teaching concepts more simply than Benedict or providing coding help for the psets. Another strength is that the course is very well-organized, in that Benedict does do a good job in sticking with dates and covering the right stuff every lecture.\r\n\r\nWeaknesses: Lectures were hard to sit through because you would have no idea what was going on. Coding is more of a learn-as-you-do thing, but even still, I expected to come out of lecture knowing more than just the definition of the lecture title. Benedict's slides are often too long and contain a lot of fluff. Also, they are extremely complicated. I feel like class should be a lot simpler, because it's hard to start the pset when you don't know know fundamentally what is going on. Another weakness was the psets. Yes; you kinda learned as you did them. But they were so complicated. All the psets are basically real-world application problems, but the applications are so esoteric. Like no, I don't care about string vibrations or how planet's gravitationally rotate around the sun. These applications made even approaching the pset hard because you didn't understand what the heck you were even trying to achieve at the highest level. TA hours weren't too busy relative to the prior year from what I've heard, but especially for the last pset, everyone was freaking out because the hours were swamped. Way to many people. And that hits at the fundamental weakness of this class. The psets are impossible to do by yourself if you've never coded. THIS IS AN INTRO CLASS. OH is really people just trying to understand the psets. Honestly, just do your psets only in office hours to save time. There is no way to do it well on them without going. And Benedict's OH are so unhelpful because he hates correcting your code. BRO PLEASE JUST TELL ME WHERE I'M MISSING MY SEMICOLON FFS. Finally, the exams are insane. The final's MEDIAN score was a 38%. Are you kidding me... That test was so hard I stopped being nervous about it because no nervousness could salvage my grade at that point. Even the curved version of the final grade was ridiculous. This class needs so much help if we want to compete in CS with other top schools. ",
            "\u00a0Strengths: Engaging psets that are fun and cool to execute.\r\n\r\nWeaknesses: There are weekly psets that are an accumulation of the lessons. While this helps students to understand why we are learning some subjects, there is at the same time too much hand-holding as there is no guidance. What I mean by this is that the instructions guide you through the process of writing the code, getting you to focus on one function at a time. However, this means that it's harder to understand the bigger picture and to be able to implement things on your own, as you are simply following instructions from one step to another, and you feel accomplished by the end result. To improve on this, there should be more practice problems that aren't an entire project, perhaps small things like \"write a recursive function that calculates the Fibonacci sequence.\" \r\nAlthough Gradescope is useful in determining what you did wrong on the pset, this does not always mean you know what to do right for the pset, as no answer keys are provided after the homework is graded. Furthermore, grades are released much later on which means that you do not know what you did wrong on your last pset before you turn in the current one, so if you get points marked off for something small such as commenting, you don't know to fix it right away.\r\nThe grading system also uses a tool called Checkstyle. While formatting is important for readability, there are some checkstyle errors that are not important to readability. For example, having a % at the beginning of a line is marked off as a checkstyle error even though it conveys the same information as having a modulo at the end of a line.\r\nThe tests are also different from the psets. Students are expected to study concepts that were taught in class but not tested during the pset, such as what constitutes as a run time or a compiler error. Though these things can be picked up during the pset, it is also difficult if students are not asked to pay attention to such errors since the beginning of class. The weekly psets also means that students do not have a lot of time to practice a lot of code writing; rather, they spend the entire week working on a large project that only implements some concept only once (ex. linked lists were only used for the traveling salesman pset). Students were also not taught in-depth how to trace through an execution. It was eye-opening to realize that some students did not even realize that the main function was the first one called when it was nearing the end of the semester.\r\nAnother pitfall is that the IDE sometimes uses keywords that are not used outside of the class. Students should be taught keywords that are widely implemented rather than opting for something like \"PennDraw\" instead of \"StandardDraw\" or having a new variable named \"In\" instead of importing the Scanner class. Students should understand how to import different classes.\r\nI would have also expected for a college-level course to at least cover topics that were mentioned in high school, such as interfaces or sorting. ",
            "\u00a0The problem sets were really fun and engaging, I found them to be genuinely enjoyable to complete. I feel that the lectures could have possibly been a bit more engaging, but they were informative nonetheless. ",
            "\u00a0It was hard to translate class lectures to actual psetting, but I did like the section format. ",
            "\u00a0Strengths: TAs, office hours (where we learned everything), problem sets (only because of our TAs)\r\nWeaknesses: Professor Brown (specific weaknesses: teaching style, exams, not an approachable person, condescending, lack of timely feedback, not an engaging professor, complicates otherwise simple concepts for little reason), exams ",
            "\u00a0I thought the problem sets were all super interesting and provided a really fascinating way to look at CS concepts being developed over time. I think the lectures were at times redundant and more content could have been covered (such as inheritance), but as a whole everything was good. ",
            "\u00a0The strengths of this course were its psets, section, the peer tutors, and the office hours with Benedict. Personally I liked how all the problem sets were designed to give us room for creativity and fun while also developing coding skills and understanding. It always felt satisfying to complete a problem set and observe the functioning program you created. The main weakness of the course for me was that there seemed to be a large disconnect between what was taught in class and what was on the exams, not in terms of content but certainly in terms of complexity and difficulty. For me personally classes often felt slow paced, but on the midterm and the final you felt like you barely knew anything. Part of this was because the final exam was not very well calibrated (Benedict said this year's first half of the exam was the hardest he's ever written), but don't expect to walk out of the exam feeling like you've aced the material. Benedict likes to see a full curve in the scores, but at least this year with how the exams were structured it felt like this was at the expense of having the exams be a learning opportunity in and of themselves and having us feel like we'd learned a lot from the course (and thus excited to take more CS). I think the course could be improved by covering more specific examples in lecture (e.g. more problem solving as a class and working through the problems together) and by potentially swapping the order of the final project and the final exam during at the end of the semester so that the final project is due before or during reading week and the final exam is during the normal finals period so that we have more time to study for it. ",
            "\u00a0Definitely a good introduction to CS, and the sections were extremely helpful for people with a limited background in CS. Office hours were definitely helpful as well for the problem sets. With that said, the lectures were oftentimes not very helpful for learning the material, and the exam curves did not seem to be very intuitive (above-median score on an exam was curved to a D+.) ",
            "\u00a0The problem sets were interesting to do, and I learnt a lot from them. However, the exams were made too difficult purposefully, and so the grades did not reflect actual performance. ",
            "\u00a0There are very few strengths of this course. I took this course despite strong urgings from many friends, peers, and classmates saying not to take it under any circumstances since they had all had terrible experiences in CS112 in the past. I unwisely ignored them, thinking the course must improve from one year to the next; however, I was quite wrong. I found lectures to be very unengaging and very unhelpful as they didn't help me learn the material and gain knowledge to use on the PSets. If I was stuck on a pset and went to my lecture notes to try and help figure it out, they very, very rarely provided any help on the problem at hand. I guess one strength would be the fact that the course had sections, which did allow for direct access to TAs without slogging through massive queues at office hours. Further, some of the PSets, especially Harper's Bazaar, had excessive amounts of abstract applications and large amounts of background that were information completely unrelated to the programming. While this technically did not affect the code, it made understanding the problems you were trying to overcome far more difficult and took away from the material of the course. ",
            "\u00a0The only strength of this course was the abundance of TA office hour and section help. This was super useful for learning the material, because that was the only place to learn it. Everything else was alarmingly poor. The improvement that needs to happen is a restructuring of teaching and organization. I don't know if I would call a single lecture I went to a benefit to my education, try as I might. ",
            "\u00a0A lot of people left lecture semi confused and needed section to help fix that, I think More exercises in class would be helpful ",
            "\u00a0The strengths were definitely all the resources made available to help us succeed. The two hour sections and the constant availability of office hours, along with the passion and engagement from the TAs and Benedict, made it easier for me to grasp the material and ask for help when I needed it, and I needed it a lot. One thing that could be improved is the presentation of the lectures. At times, they weren't very engaging or the lecture would get off topic and it made it difficult to focus and later implement in the problem sets. "
        ],
        [
            "\u00a0If you want to learn java, yes. Be forewarned that if you're not excellent at computer science, you may be like me and spend 15 hours a week in office hours. If you have the time, then take it. ",
            "\u00a0It depends. I am happy I took this course because I couldn't have done the workload of CS50 in the fall. But CS50 teaches you more languages. ",
            "\u00a0I would recommend, although I haven't taken cs50 to compare. I would say that if spring semester works out better for your schedule, and you're looking to get into cs, don't be scared by how badly the class was reviewed previously, it has gotten a lot better.\r\nGranted this is coming from someone who was relatively successful in the class, but still I feel like it deserves more praise than it's often given. ",
            "\u00a0Yes I would. With sections, this previously super hard course is now quite accessible. ",
            "\u00a0Yes, but with caution. ",
            "\u00a0I would, but on a few criteria: 1) if you have decent quantitive skills (like if you thought Math 120 was manageable, and if you like logical thinking), and 2) if you have a friend who is also taking the class. I used to have a crippling fear of computer science (like, CRIPPLING) before this class, but my friend roped me into taking it because it could fulfill a credit in my major and he wanted to challenge himself. Of course, I wasn't about to say that I didn't want to challenge myself. However, the workload ended up being much less than I anticipated (maybe around 8 hours a week, and some weeks even less), and the psets much more doable. A lot of computer science just boils down to whether or not you have the patience to methodically think through logic problems, so even if you're bad with computers or don't have any technical experience, you should take this class if you have that quality. Also, if they offer two options for sections again, a one-hour one or a two-hour one, TAKE THE TWO-HOUR ONE. Then you force yourself to start the psets earlier and in section, getting maximal TA help. ",
            "\u00a0No. Don't do it. CS50 is a lot of work, but please trust me in saying to choose it instead of CS112. \r\n\r\nFirst, lectures. Benedict makes his lectures so complicated. He really needs to simplify them. From the things I heard the prior year, my expectations were already so low coming in. I really wanted Benedict to succeed and tried keeping an open mind. He really tried I think to make lecture fun. But it just wasn't at the end of the day.\r\n\r\nSecond, psets. Benedict makes his psets extremely complicated, and given his extremely strict collaboration policy, they were virtually impossible to do alone. You HAD to go to office hours to survive, because only there would you actually learn what the heck was going on. Office hours were just really the whole class super confused about everything and the TAs saving the day. This is why the class takes so much time.\r\n\r\nThird, exams. Benedict's exams were too much. I don't know what he is trying to prove. His central justification is that by making the exams extremely difficult, he can better see the spread of grades and curve accordingly to student performance. But I think a flawed underlying assumption here is that performance reflects his teaching. Being frank, it doesn't. So many kids take the class having prior CS experience, and they overcome the challenges in this class and in the exams simply because of experience. However, for people like me with 0 CS experience, it is so hard to do well. There is no way in hell that an intro class should be touting a median final grade of 38%. Like seriously, that is so discouraging and a deterrent for anyone to pursue CS. \r\n\r\nSave your sanity by taking CS50 instead, which I've heard is slightly more work, but has much higher payoffs, including a better teaching staff, better lectures (even if virtual), a huge infrastructure in place, and strong peer involvement. ",
            "\u00a0If you do not mind putting in a lot of work, yes. The psets are rewarding to finish, and the booksite offers a lot of resources for learning. However, this class does not serve well as an introductory Java course. The topics covered are introductory, yes, but when students are putting more work into learning the topic on their own than they are from learning it from the lectures, then there needs to be a change in the class structure. ",
            "\u00a0Yes, I think it does a really good job in teaching you how to code and to approach programming. ",
            "\u00a0It was a good introduction to Java. ",
            "\u00a0Absolutely not. Take CS50 with the same amazing TAs but with the virtual, Harvard professor. ",
            "\u00a0I would. I think CS112 is a useful course and that everything taught in the course would be of some use to students interested in CS. Although the problem sets can be difficult they definitely help you understand the concepts of the class. ",
            "\u00a0It's hard to say as I haven't taken CS50 and thus cannot speak to a fair comparison, but overall this course will provide you with foundational knowledge that is important for computer science, so if you put in the effort and you like thinking with the quantitative, problem solving part of the brain then you will probably learn a lot from it. That said, I don't see anyone in CS 112 with near the level of enthusiasm as CS50 kids have, so if you want that level of community and enthusiasm around the class then CS50 is probably the way to go. I mostly just took this because I wanted to take intro CS in the spring and CS 50 wasn't offered, but if you have the option you might want to learn more about the pros and cons of each. ",
            "\u00a0Yes, but hesitantly. The workload was high and difficult but there was a lot of pride and self-reward when assignments were completed. ",
            "\u00a0Yes, it is definitely not a bad intro CS class. The TA's are incredibly helpful/accessible during section/office hours, even for people with little experience. With that said, the exams are quite difficult, and it is a bit a of pain having a final exam and a final project on top of that during reading period. ",
            "\u00a0Yes. It is good for learning the basics of programming. ",
            "\u00a0No. Not unless sweeping changes are made to the curriculum and faculty. Or if they wanna have a straight up really bad time. ",
            "\u00a0Absolutely not, unless the student already knows the material, or the course gets a major facelift. This was my least enjoyable course at Yale. As someone with no prior CS experience, I found it unbelievable that I was floundering from the very beginning in an introductory class. I hoped to take this course to gain a foundation in programming concepts, and I felt wildly out of my depth and without assistance. ",
            "\u00a0Yes I would, I found the parts helpful in teaching many different skills in interesting ways ",
            "\u00a0I would only recommend this course Credit D to another student. It is a lot of work and sometimes you wonder why you took it. In the end I did learn a lot, but I don't always feel like I did, especially after the final exam (the average on Part 1 was a 39/105). ",
            "\u00a0I would, because as difficult as this class was for me, I think the material was very engaging and computer science has always been something I at least wanted to try, so if anyone also wanted to do that, I would definitely encourage them to. ",
            "\u00a0If the lectures improve, yes. "
        ]
    ]
}