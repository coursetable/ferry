{
    "crn_code": "10690",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            3,
            4,
            11,
            4,
            1
        ],
        [
            4,
            3,
            12,
            2,
            2
        ],
        [
            1,
            6,
            5,
            6,
            4
        ],
        [
            3,
            3,
            8,
            4,
            4
        ],
        [
            4,
            6,
            11,
            1,
            1
        ],
        [
            1,
            12,
            7,
            2,
            1
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0OOP, virtual class, inheritance ",
            "\u00a0I learned C++. I learned more about objects and polymorphism. ",
            "\u00a0I got pretty much nothing out of this class. It was laughably easy, and Prof. Fischer doesn't organize class time well. We often spent time going over problem sets; he clarifications were largely unhelpful. There were substantive concepts to discuss, but we rushed through them because of all of the other wasted time. We talked briefly about design patterns, templates and function pointers, but these were secondary to other, trivial topics. We spent a substantial amount of our time discussing largely intuitive features of C++ inheritance and dependencies. It was useful to learn the nuances of C++, but it felt like something I could do in a few weeks on HackerRank. ",
            "\u00a0This course does a good job of going over basic object-oriented programming principles. Professor Fischer's slides and code examples are very informative and do a good job of exemplifying his point. I would say this course is equally as much an overview of C++ as it is of OOP. C++ can be a very annoying language to work with, and a lot of the problem sets involved understanding C++ nuances. The OOP aspects were not difficult to grasp. ",
            "\u00a0You learn principles of object oriented programming that you hear so much about, but are never formally explained. You also learn C++. This class is basically just how-to C++. ",
            "\u00a0learned how to code in C++ ",
            "\u00a0Object-oriented programming framework and programming experience, C++ programming language ",
            "\u00a0C++ ",
            "\u00a0The course had a lot of good information on c++and object oriented programming. You really had to want to learn it to figure out things though as lecture wasn't enough. ",
            "\u00a0Learned how to program in C++ and how to use OO principles in everyday project design ",
            "\u00a0Not much. ",
            "\u00a0Object-oriented programming techniques and principles. Finally learned how to use C++. "
        ],
        [
            "\u00a0It's an OK class. Too much focus on syntax and C++ constructs and less on general OOP design principles. Exam grading is harsh. ",
            "\u00a0Lecture was so boring and I lost so many points on formatting ",
            "\u00a0I think the latter assignments were interesting and definitely improved my coding abilities. Lectures are a little dry sometimes. ",
            "\u00a0Our later problem sets were relatively thoughtful. ",
            "\u00a0This course does a good job of introducing students to topics incrementally. The problem sets build on one another, which is both helpful because you learn about refactoring code and also very annoying because it means that you have to fully finish a problem set in order to do the following one. This was only a slight issue for the last problem sets. The slides and available resources for this class are very clear and concise (Professor Fischer's wife's OOP textbook, which is the textbook we use for the course, is great). The problem set specs are also exceedingly clear and easy to follow, which is super refreshing after atrocious problem specs like you see in 323.\r\n\r\nOne weakness of this class is that Professor Fischer spends a lot of time harping on students to put their phones or electronic devices away. I think that it should be the responsibility of the student to pay attention in class, and that time should not be taken away from lecture purely to chastise those students. It was quite embarrassing to be honest. Lecture are also not that engaging, and for the second half of the course I found that my attendance dropped drastically. ",
            "\u00a0Strength: The psets were really intereting, reasonable office hours\r\nWeaknesses: Lectures are heinously boring, outdated approach to learning CS, unreasonably difficult exams with no practice exam offered. ",
            "\u00a0The actual material of this course was great and interesting, but the exams were pretty brutal.  The final exam counted for a whopping 40% of the final grade, which I feel like is unheard of in a CS class.  The exams also were graded fairly harshly, so the have so much weight on those was a bit concerning.  Other than the exams being way to weighted, I really enjoyed learning about C++ coming from a strong background in C. ",
            "\u00a0The problem sets are good for putting into practice the OOP principles that we learn in class. Lecture was very boring and slow, but the notes are good. I wish the lectures were more engaging but most CS lectures just tend to be kind of dry. ",
            "\u00a0no strengths, terrible clas ",
            "\u00a0Lecture slides are amazing, exams are fair though a little heavier on writing than the typical CS exam, Professor Fischer is knowledgeable and very approachable ",
            "\u00a0Fischer could move at a faster pace and make psets harder. ",
            "\u00a0Strengths: Low workload, fair grading, problem sets that correspond with the material taught in class\r\nWeaknesses: Almost optional lectures ",
            "\u00a0Take it with a different professor! ",
            "\u00a0Strengths: Fun problem sets and a good professor with cool and helpful/knowledgeable TAs. Weaknesses: The professor sometimes spoke quietly and slowly. Open-ended problem sets sometimes led to confusion over the problem set requirements. ",
            "\u00a0- We did not spend enough time covering OOP concepts that are applicable across different languages, and too much time focusing on C++ specific features. Design patterns (e.g Builder, Adapter, etc.) were only covered in passing in the last lecture, and I wish we had more time to learn and apply them in the class.\r\n- Psets were well thought out. Could be improved by making sure the spec is correct on first release, but in general I felt the psets did encourage me to learn and apply OOP concepts in a thoughtful manner, and the problems were generally pretty interesting. "
        ],
        [
            "\u00a0It's a gut ",
            "\u00a0If you don't know object oriented programming it is worth learning. ",
            "\u00a0No. The course was poorly organized, the pace of material was entirely inconsistent, and the focus seems to be on trivial style preferences which are easy to master without the class. A better OOP class would focus more on design patterns, have more problem sets, and discuss the nuances of C++. ",
            "\u00a0I would recommend this course to CS majors as an easy and informative elective. You learn quite a lot, the problem sets are not terrible, the TAs and Professor Fischer are helpful when you meet with them one-on-one, and C++ is a good language to know. The workload is very manageable and Professor Fischer will go over difficult aspects about the problem sets in class if you ask. It's a reasonable and pretty good elective, although lectures can feel like they move at snail's pace sometimes. ",
            "\u00a0The lectures are incredibly boring and the exams are egregiously difficult. C++ is really important to learn, but maybe just try to self study it. ",
            "\u00a0I'd say to take this class if you've had no exposure to C++ but a good exposure to C.  You'll see that there's a lot of overlap between the two, and I think that helps to make the class a lot easier.  The material of it is pretty interesting, so if you're looking for a relatively easy elective credit, take Object Oriented. ",
            "\u00a0I would recommend this course to CS majors. Object oriented programming principles are essential to know, especially if you plan on working in industry. It's a great way to think about code and organizing big projects, and honestly I think it should be required for CS majors. It's not the most thrilling class, but OOP is something you ought to learn about formally. ",
            "\u00a0absolutely not unless you want to learn C++ (which you don't) ",
            "\u00a0Yes, Object-Oriented Programming is a very important concept to learn, and the Professor is a great resource throughout the course ",
            "\u00a0I would recommend this course with Glenn. Fischer is pretty slow paced and gets angry at times. There wasn't too much help for the exams as there were no practice problems /exams. This was frustrating to be left in the dark. The lectures were about 20-50 slides, but Fischer would not cover all of them. Reading helped with material and psets but I was unsure how helpful they were for the exams and discerning what was useful. ",
            "\u00a0Not really. The class didn't teach me all that much, and we weren't given any study materials for the midterm or final exam. While the problem sets become increasingly interesting towards the end, I feel that there are better ways to learn C++ programming. ",
            "\u00a0No! This course was a waste of the time I spent on it (not that it was much). Lectures become effectively optional , homeworks are boring and not difficult, and exams are more or less 100% small, Minor details of c++ (a.k.a. everything is a \"gotcha,\" or something that in real life you'd just check stack overflow for). Do not take! ",
            "\u00a0100% yes, I recommend this course. Object-oriented programming- you're gonna learn C++, a hiiighly practical and very powerful language. You'll learn how to build programs that you can scale up without them becoming riddled with bugs or becoming hard to manage. So pretty much how to think like a software engineer. One midterm, one final. 6 problem sets. Professor Fischer is a great professor and a wonderful person- although his teaching style is kind of slow, it really gives you time to take it all in (and you have time to type up notes). Just a protip: make sure you're caffeinated or awake before you head into class. If you've taken CS 223 or 323, you'll do great in this course. I started and finished problem sets in the same day in this course. And Fischer actually taught me practical CS skills I can apply to my personal projects (apps and software) and to my professional career after college! Everyone interested in Software Engineering should know object-oriented programming. You'd be doing yourself a disservice as a CS major to not take this wonderful course! ",
            "\u00a0Solid psets, average-to-low difficulty, and not very exciting lectures. Your mileage may vary depending on your love/hatred of C++. "
        ]
    ]
}