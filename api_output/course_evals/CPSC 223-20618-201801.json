{
    "crn_code": "20618",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            5,
            14,
            29,
            58,
            36
        ],
        [
            12,
            25,
            57,
            32,
            17
        ],
        [
            10,
            27,
            45,
            45,
            15
        ],
        [
            25,
            42,
            40,
            30,
            5
        ],
        [
            2,
            8,
            29,
            79,
            25
        ],
        [
            2,
            8,
            32,
            66,
            36
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Using C, I learned how to create various data structures and algorithms, including hash tables, linked lists, queues, and stacks. ",
            "\u00a0broad knowledge of data structures, ability to code in C, more methodical and careful approach to programming ",
            "\u00a0I learned several data structures, programming techniques, sorting algorithms, and how to code in C ",
            "\u00a0Programming in C, data structures, algorithms. Syllabus online, what you would expect. ",
            "\u00a0I learned more about basic data structures (arrays, linked lists, hash tables, trees, graphs) and their use-cases. Also got a lot better at C programming, since the entire class is in C. ",
            "\u00a0learned about programming in c, memory allocation, and data structures ",
            "\u00a0This course was a good introduction to Data Structures as the name implies. The Programming Techniques side of the class felt rushed (Dynamic programming was touched on in a day). This class definitely improved my knowledge of the C programming language, and I feel quite comfortable going forward in C. ",
            "\u00a0Data Structures, C ",
            "\u00a0basic knowledge about various data structures ",
            "\u00a0i learned about data structures ",
            "\u00a0Great class. I had no working knowledge in C or Unix, and now I'm pretty good at programming at C and navigating Terminal\r\n\r\nYou should take this class if you plan on going into any sort of technical job. Teaches you all the core concepts needed in order to program in industry. ",
            "\u00a0I tried to learn some C, but I ended up taking the D. Now I am no longer a CS major. ",
            "\u00a0I learned about data structures and the C programming language ",
            "\u00a0I learned a tremendous amount from this course. I now have a very strong foundation in C programming and data structures. ",
            "\u00a0I developed a basic knowledge of how data structures work in C. I also developed C programming skills which can be very useful in the future. ",
            "\u00a0Good knowledge of C, as well as different data structures. ",
            "\u00a0None really except for a few tidbits on graphs and augmented binary trees. ",
            "\u00a0We gained proficiency in using the C programming language over the course of eight problem sets.  We also learned extensively about numerous data structures (e.g., stacks, queues, hash tables, trees, graphs), both on the conceptual level and their C implementations.  The concepts learned in this course are crucial for tech interviews. ",
            "\u00a0Great course for learning C and the basic critical thinking skills needed in really any programming environment ",
            "\u00a0I found data structures to be incredibly useful.  Out of all of the CS classes, this is the one you're going to want to nail down the material for best because this is what tech interviews focus on.  With that knowledge going in, I believe I was able to gain a lot form this course. ",
            "\u00a0C ",
            "\u00a0Basic understanding of data structures, introduction to C, some knowledge of pointers and computer architecture ",
            "\u00a0I guess i learnt about basic data structures but that was not really from taking this course and going to class but from spending hours at HH17 doing the problem sets that he did not equip us for. ",
            "\u00a0Knowledge of data structures and their implementations ",
            "\u00a0Programming in C and building different data structures ",
            "\u00a0I learned about basic data structures like linked lists, hash tables, trees (many varieties), and graphs. The main skill I gained was a lot of familiarity with programming in C. I also learned how to structure my programs more efficiently and clearly. ",
            "\u00a0I developed a better understanding of how data is stored in computers and can be more easily manipulated by programs to carry out efficient programs. ",
            "\u00a0I learned a lot about different data structures and programming techniques through the problem sets in the class. However, I didn't find lecture to be particularly helpful because Professor Aspnes spent the majority of the time debugging his code after quickly explaining concepts to the class on the chalkboard. ",
            "\u00a0I learned to code carefully and to plan ahead. I learned how to implement data structures. ",
            "\u00a0I learned basic data structures that are used to store information. I also learned more about how memory is stored in computers through using the programming language C. ",
            "\u00a0I learned how to program in C, and how to implement data structures and algorithms in C for a variety of purposes ",
            "\u00a0I learned a lot about data structures, the importance of speed in programming, and how to debug efficiently. ",
            "\u00a0This is a must take class for CS majors, period.  If you simply want to learn coding on the side, this is the last class in the CS track I recommend taking.  This will teach you all the basic, minimum criteria programming techniques to get jobs in CS. ",
            "\u00a0This class is very useful for the CS major. I learned a lot about how to implement data structures in a detailed manner. ",
            "\u00a0I learned that James Aspnes has no mercy, and a little bit of data structures ",
            "\u00a0How to program in C and how to use different data structures. ",
            "\u00a0Programming in C and basic data structures ",
            "\u00a0I learned to better manage my time ",
            "\u00a0Programming in C and data structures. ",
            "\u00a0I learned about data structures, and really had a chance to hone my C programming skills. ",
            "\u00a0I learned the fundamentals of C and how to manipulate bits and represent information at a very low level. ",
            "\u00a0Programming data structures ",
            "\u00a0I learned important foundations of data structures and programming techniques that will be valuable to future computer science & mathematics work ",
            "\u00a0Solid cs skills ",
            "\u00a0Learned about data structures! That's all I know about course evals. ",
            "\u00a0Vast insight into the basics of data structures and programming techniques. ",
            "\u00a0Knowledge of various data structures, some basic algorithms that pair well with these data structures, and how to program in C. Also had a great opportunity to refine programming skills and write clean code. ",
            "\u00a0Gives you a good command over C.\r\nFairly challenging psets\r\nThe exams are pointless ",
            "\u00a0I certainly deepened my knowledge of C and most useful data structures. ",
            "\u00a0I learned comprehensive C programming and all data structures that are important. ",
            "\u00a0Computer science concepts and programming techniques ",
            "\u00a0Learned about data structures. Heaps, trees, stacks, queues, hashmaps, searching methods (DFS, BFS). ",
            "\u00a0Data Structures. ",
            "\u00a0Different programming techniques, how to code in C, and data structures. ",
            "\u00a0I learned a lot about C and about all of the useful data structures. ",
            "\u00a0C, Data Structures ",
            "\u00a0I learned about different types of data structures that are essential in the study of computer science. ",
            "\u00a0C, programming skills, data structures ",
            "\u00a0I learned about common data structures. ",
            "\u00a0I learned programming skills and data structures and how to use them ",
            "\u00a0Data structures and C ",
            "\u00a0Data structures knowledge ",
            "\u00a0I learned how to code in c, the basics of the major data structures, but I did not learn as well how to debug in c using valgrind because I still have those problems. The TAs were really helpful and I learned a lot from them, but I still wish there was a more structured approach to debugging in c. ",
            "\u00a0Increased understanding of C programming language and common CS data structures. Also increased my programming proficiency. ",
            "\u00a0Learned a lot about careful and efficient C-programming, how to compile & debug in a command line editor, and learned more about how computers work ",
            "\u00a0I learned to write C code and also got a solid conceptual understanding of different types of data structures. ",
            "\u00a0I learned a lot of really useful info about basic data structures (helpful for any tech interview) as well as efficiency, memory allocation, and program design. I also learned about debugging techniques every week through the psets. ",
            "\u00a0I learned the basics of programming in C, such as syntax, loops, strings, memory allocation, file I/O, and pointers. I also learned about basic data structures, like linked lists, binary trees and their variants, and hash tables. ",
            "\u00a0I learned an incredible about about programming in C and about data structures from this course. ",
            "\u00a0I learned about how to implement various data structures in C, including: arrays, linked lists, hash tables, trees, and graphs. ",
            "\u00a0I learned how to program in C, which I had never done before, and I learned how to implement data structures such as hash tables, linked lists, binary trees, heaps, and a few others. ",
            "\u00a0This course primarily served to teach me how to program in C. While the data structures part of the course was helpful, I mostly got familiarity with C programming, along with low level constructs like pointers, memory management, and the like. ",
            "\u00a0I learned data structures, C, and a lot of the fundamentals of programming . ",
            "\u00a0Improved my knowledge of data structures and programming techniques, theoretically and in C. Improved my C programming skills ",
            "\u00a0I developed C programming skills in this course. ",
            "\u00a0I learned a ton about how to code in C, and how to use data structures to solve different problems.  I'm definitely a better coder and problem-solver after taking this course. ",
            "\u00a0I learned to program in C. ",
            "\u00a0We a rigorous introduction to the C programming language and covered a lot of fundamental data structures useful for both future CS courses and interviews. ",
            "\u00a0Got a pretty deep and thorough introduction to the C programming language ",
            "\u00a0Essential knowledge for any computer scientist/programmer - i.e. the basics of C including pointers and dynamic memory allocation, as well as linked lists, trees, graphs and a host of other data structures. You'll also learn when to use which data structure by taking into account memory and space requirements. ",
            "\u00a0Programming in C\r\nDebugging in C\r\nUsing the terminal\r\nUnderstanding and using data structures ",
            "\u00a0Understanding Data Structures and Runtime\r\nDebugging Skills ",
            "\u00a0Lot of fun! I became a better problem solver and became competent in C. ",
            "\u00a0Learned all about data structures (hash tables, linked lists, trees, etc.) ",
            "\u00a0I learned about implementing and using basic data structures in C and improved my overall programming skills along the way. Although implementing data structures isn't something I expect to do much in practical projects, it showed me the usefulness of each structure in a very memorable way and gave me the skills to extend them. Programming in C has made me better understand how other languages work, particularly as they handle abstraction and references to data. The programming assignments often involved a lot of debugging and I learned to use and appreciate command-line debugging tools. ",
            "\u00a0Learned C fairly comprehensively. Learned how to implement different data structures, though didn't quite learn how to decide the best data structure for a given problem ",
            "\u00a0Learned how to program a lot of data structures in C and learned C programming techniques and tools from the most basic level to relatively complex. ",
            "\u00a0I learned a lot about data structures and how to code in C. ",
            "\u00a0Learned how to code in C, debug C code and check for memory leaks, learned implementation and cost of operations of general data structures: trees, heaps, graphs, arrays, hash tables, etc., ",
            "\u00a0My coding skills improved significantly. ",
            "\u00a0Programming in C, Unix, Makefiles/compiling, arrays, stacks, heaps, trees, graphs, algorithms involved in using these data structures, debugging ",
            "\u00a0You learn all the basic data structures in C. I recommend this course for everybody who is pursuing STEM. However, for most people this shouldn't be your first programming class. I would recommend cs50 before this class if you've never programmed before. ",
            "\u00a0Data structure and coding knowledge "
        ],
        [
            "\u00a0The lecture itself was disorganized and hard to stay engaged with. However, the lecture notes and assignments are fantastic and well thought out. ",
            "\u00a0The psets themselves require less than five hours of work when done well, but often times you will get caught up with a single bug/error that takes you just as long, making them pretty time consuming at times. Otherwise, the class only has two pretty short exams that really don't cover too much material (though they are graded pretty strictly). ",
            "\u00a0A huge weakness of this course was office hours. This class was a lecture with an enormous amount of people, and it seems that the course faculty were unprepared for the number of students taking it. This class is extremely problem set heavy, so many students spend a significant amount of time working on psets with office hours. Due to the lack of ULA's and large amount of students attending office hours, during the first half of the course, we would have to wait at least 2-2.5 hours to get attention and help from a ULA. Similarly, a strength of the course is that it is problem set heavy. You should be prepared to put the time and effort into working on psets, but you will be rewarded if you do so. ",
            "\u00a0strengths:  good topics, sufficiently challenging, does make you a much more thorough programmer\r\nweaknesses:  lectures were at times boring and hard to follow especially when Aspnes did coding examples on the board, not enough availability of help from TAs, got minimal feedback ",
            "\u00a0Strengths: Interesting and challenging course material. Very rewarding content.\r\nWeaknesses: Exam grading is sometimes too all-or-nothing when it comes to code in my opinion. ",
            "\u00a0Notes online are comprehensive. Lectures may not be that useful. ",
            "\u00a0Online notes were comprehensive, and lecture was informative, though the readily available, high-quality online notes made going to lecture a bit redundant. But then again, that's a good thing.\r\n\r\nThe instructor this year was very responsive - emails usually got answered within the hour. The assignments were also quite good and useful for learning the various data structures covered.\r\n\r\nWith that said, I felt that the significant focus on C distracted a bit from the data structures aspect of the course; sometimes it felt like what was being evaluated was less our knowledge of data structures and more our knowledge of C idiosyncrasies and syntax, especially on the first exam. Maybe having the exams be in pseudocode would help resolve this issue somewhat, though I do understand that this is a data structures and programming techniques course, not just a data structures course. ",
            "\u00a0the problem sets were very useful in helping me understand data structures and key concepts in c. the tests focused too much on the nuances of c, rather than larger, more applicable concepts. ",
            "\u00a0I think that, since the course is not an introductory course in CS, some of the burden of teaching C should be lifted off the teacher. There are hundreds of videos online, and the university could even film their own. If C was picked up as HW videos in the first two weeks then the class would have been able to cover more material, and in turn would have been fulfilling (and challenging). ",
            "\u00a0The ULAs are superb, though at times it felt as though there were too few of them to deal with students in the queue, so they ended up resorting to just giving us answers for psets/tweaking our code for us. Additionally, the late policy for psets (no dropped psets, no \"late days\") caused unnecessary stress for students. Teaching was decent, though it could've been a bit better. ",
            "\u00a0Strengths: availability of ULA office hours\r\nWeakness: Professor goes through concepts too quickly, some ULAs don't know the material well enough to give meaningful advice on psets ",
            "\u00a0We needed way more teaching assistants at office hours ",
            "\u00a0Strengths- great lectures, engaging psets\r\n\r\nWeaknesses- stringent grading policy (no regrades --> e.g. submitted an assignment accidentally, got a 10/100 b/c it didn't compile despite having working code written, Aspnes wouldn't let me delete like 3 lines to get it working again), long waiting for office hours, psets can be super tough ",
            "\u00a0Professor Aspnes is a Vim wizard and C master, but his method of teaching is disorganized and at times rushed. His notes aren't the most illuminating, though his examples were sometimes helpful. ",
            "\u00a0The teaching is unclear because prof Aspnes spends more time debugging his own code than explaining it, plus office hours are inefficent ",
            "\u00a0Although the lectures were not always directly applicable to the problem sets, the problem sets were great for learning. I really enjoyed each one of them. With that said, specific sections of the course's syllabus should be revised. As the DUS, Professor Aspnes must reconsider the amount of collaboration that he wants to allow on problem sets, and the syllabus should be written accordingly to protect students in a way that the currently vague syllabus does not. ",
            "\u00a0The lectures can be a bit hard to follow because it sometimes seems as if Professor Aspnes is teaching whatever he likes whenever he likes. ",
            "\u00a0Lecture could be more clear, and delve deeper into the actual theory behind data structures as opposed to generally principles about their implementation. The latter is something that can be learned without actually going to class--instead class should add something and delve much deeper. Problem sets were good though. ",
            "\u00a0The problem sets in this course allow students to feel confident in C programming and understanding and implementing several data structures.  The course follows a very systematic approach, with very thorough online notes provided by Professor Aspnes, including C code implementations for many of the data structures.  In addition, there were nearly 20 ULAs to help with psets!  The only weakness might be in the pacing of the course.  It seemed that in the first month we went through C concepts at a great level of detail, but due to spending so much time on that, the last few data structures were slightly rushed.  However, this pacing was probably necessary to make sure students were able to understand C well enough to do the problem sets! ",
            "\u00a0I think the assignments can focus a bit more on some primitive data structures rather than creating these bizarre and useless structures that one would never see in real life.  I think there should be a greater emphasis on data structures applicable to real life situations.  Other than that, I wouldn't change the courseI feel it does a good job in lecture exploring many different types of useful structures. ",
            "\u00a0Yale has to improve their cs department - lecturers have been boring and less informative than online resources ",
            "\u00a0Professor Aspnes needs to be more prepared for class. Period. ",
            "\u00a0Strengths: the ULAs. Ian is the best thing God has created. Aspnes' notes are also pretty good but that is mostly because I didn't get anything from lecture and had to almost singularly rely on them.\r\nWeaknesses: Lecture - i didn't get much, if anything, out of going to class ",
            "\u00a0There was virtually no feedback throughout the course, which was problematic ",
            "\u00a0The lectures seemed pretty distanced and often the professor would be learning the lessons along with the students so it felt very hard to follow along. Also it seemed very unclear what would or wouldn't be on the two exams we had, all that was said is anything covered in lecture and no general guidelines were given ",
            "\u00a0Strengths: The problem sets are very interesting and make you think about the lectures on a deeper level. You get very good at programming in C after this class and become a champ at using pointers. Also, Aspnes' lecture notes are AMAZING. I definitely recommend taking the time to read through them carefully.\r\n\r\nWeakness: The first half of the class is a little too slow-paced in introducing the syntax of C. So, there were many interesting data structures that we did not have time to cover towards the end of the class. Also, the lectures could sometimes be hard to follow since there was usually very minimal pre-prepared code. So, a lot of the lecture ended up being about trying to debug code. ",
            "\u00a0The main suggestion I have for this course is to increase the available help. I attempted to get help a couple times at office hours, but it was an absolute mess. I didn't get any help the first time I went and the second time I had to wait for an hour. The problem sets are difficult enough that most of the students require a little help or advice to finish them, so it would probably be a good idea to hire more people who can assist students. ",
            "\u00a0The strengths of the course are the problem sets. The problem sets pose interesting questions and require the use of the data structures and programming techniques learned in the class. The weakness of this course was the lecture. Professor Aspnes chose to spend the majority of his time debugging code during lecture, which got tedious and didn't help me learn about the things that were truly important in the class. Additionally, the weakness of this course was the exams. The exams were incredibly hard and testing one's ability to code on paper with no mistakes, something that's very difficult to do and shouldn't be the goal of a computer science class. ",
            "\u00a0The lecture notes for this course are extremely comprehensive and helpful for problem sets. ",
            "\u00a0The programming assignments and lecture notes were fantastic. We were challenged with the problem sets with thoughtful applications of concepts from lecture. The notes provided careful nuanced explanations of the concepts involved in the class. Lectures, however, were boring and mostly uninformative. We a significant portion of class debugging or writing simple code that could be better presented by the instructor pre-writing the code before class. Watching Aspnes debug his own code was helpful at first when we were learning to debug ourselves, but quickly got tedious. Lectures could be improved by going into more theoretical details, nuances and examples rather than trying to implement the code on the spot. ",
            "\u00a0It was really difficult to remain engaged during lecture because we simply had to stare at the professor typing code that was projected into a larger screen. Furthermore, because the professor was making functions as he taught, we also had to spend time watching him debug the code. I wish that the lectures could have been more clear, perhaps through powerpoints or through writing things out just because parsing through code in small text was not very conducive to learning the concepts. \r\nFurthermore, I do wish that the fundamentals of the C programming language could have been more clearly explained. Because my experience with computer science was still quite limited, I had a lot of trouble learning about pointers and memory allocation despite the lectures and notes. As a result, I had a lot of trouble with the problem sets and figuring out what was acceptable in the C language. Perhaps more time and detailed explanations could help with this problem.\r\nAlso, I feel that the way the problem sets are graded do not reflect well one's understanding of the material. A number of students taking the course received failing marks on their problem sets because of submission issues. For example, one student had turned their problem set on time and received perfect scores using the test script, but had accidentally overwritten an old makefile therefore receiving a failing grade. Because the problem sets compose of 70% of our grade, one failing score would dramatically drop our grade. Not to mention, those sorts of mistakes do not reflect at all the level of understanding of the material. I do hope that there can be changes with the way our problem sets are evaluated so that students can receive a score that reflects the time and work put into their homework. ",
            "\u00a0Strengths- course notes were very comprehensive, which helped a lot on the p-sets\r\nWeaknesses- it may just be the nature of the material, but lectures were a little dry, and it was sometimes hard to follow. Aspnes went very fast through the material ",
            "\u00a0The psets are very interesting and test a lot of new topics, but the office hours could be redesigned to be more efficient. ",
            "\u00a0Strengths: A select few TA's were very helpful at office hours\r\nWeaknesses: Lectures were very not engaging and many people skipped lectures because they got nothing out of it. ",
            "\u00a0I think the course is good for the CS major. However, it is not so practical for anybody who is not a CS major looking to just gain a better understanding of CS in a practical way. ",
            "\u00a0The lecture is actually useless ",
            "\u00a0I feel like the lectures were NOT good at facilitating learning, and I had little motivation to actually go to class. So definitely the quality of lectures could be improved -- possibly through going slower and explaining concepts more. \r\n\r\nThat said, the problem sets were well designed to make you understand the material. So that was a highlight of the course. ",
            "\u00a0The grading in this class has to be more consistent and less harsh. I got a 0 on an assignment for an easily amendable issue which dropped me one whole letter grade. There are many other students who also had grading issues with Aspnes and his unfair policies. ",
            "\u00a0Thought it was great ",
            "\u00a0Strengths: fun problem sets that were pretty straightforward, fair exams\r\nWeaknesses: everything taught in theory, very little application, ULAs are hit or miss ",
            "\u00a0Strengths: Well-structured class with fair exams.\r\nWeaknesses: The problem sets were too easy and simple. ",
            "\u00a0The lecture notes are absolutely amazing, the lectures not so much. The problem sets are very fun, and teach the concepts very well. Tests only have 4 questions, which is kind of punishing, but they're graded fairly. ",
            "\u00a0The psets are very good and are fun applications of the data structures, programming concepts et. al. that we discuss in class.\r\n\r\nAn obvious weakness is that many students can easily exploit the ULA system such that they do not need to learn the material. ",
            "\u00a0I think that there could be more assessments rather than just the problem sets and exams ",
            "\u00a0good content\r\nknowledge too scattered ",
            "\u00a0The course was clearly taught, and Professor Aspnes notes are extremely usefully. Grading on the exams was frustrating, because a small error that would have been easily caught in writing actual code could lead to huge point deductions. I think it would be better to make the course more difficult and apply a curve, so that grading could better determine students understanding. ",
            "\u00a0What if the course wasn't graded by an evil robotic grading script? I know it would be much more difficult, but please. Give us a break here.\r\n\r\nThat's all I know about strengths and weaknesses. ",
            "\u00a0The lectures were very unstructured but the notes were phenomenal. ",
            "\u00a0The strengths of this course are that answers can be readily asked and answered on Piazza and the assignments are definitely great ways to learn. ",
            "\u00a0The PSETS are good, but the lectures are bad. ",
            "\u00a0The exams should be more closely based on concepts that students interacted with on the psets, or vice versa. ",
            "\u00a0Aspenes could be better prepared for lectures - I felt like lecture was spent mostly debugging code. ",
            "\u00a0Strength is that the course uses C and lecture notes are great. Weakness is that homework can take great amounts of time. ",
            "\u00a0I really enjoyed the content we were learning, but the lecture was very dry at times. ",
            "\u00a0Strength: great introduction to C language. Psets help understand concepts. \r\nWeakness: the second half of the course about specific data structures were taught in a very fast pace. There is not enough comparison between different data structures. Didn't talk about sorting that much. ",
            "\u00a0It could go a bit faster, if you already know C it can be pretty boring. ",
            "\u00a0Strengths: Well Organized\r\nWeaknesses: Big Lecture Hall Style Class ",
            "\u00a0I wish the exams tested more about the content of the course itself, data structures, rather than how to write functional code on paper. Also, for the first few weeks, we did not have a big enough classroom to accommodate everyone in the class, so I was unable to come to the first four or five lectures. I also could not come early in order to make sure that I get a seat, since the class right before is at least 20 minutes away even by walking fast. As a result, I felt that I was behind my classmates at least until the first or second assignment. ",
            "\u00a0Class was very large. It was hard to focus during lecture. ",
            "\u00a0I think the course is not as hard as it used to be, which is a trend in the CS major at Yale. Compared to previous years and especially with how Eisenstat taught it, this course was a breeze given that all the edge cases were in the public tests so 100% on the public tests basically meant 100% on that pset, so it's totally possible to get 100% on all psets by just going to office hours and psets are 60% of the final grade. ",
            "\u00a0The engagement in this course was very high ",
            "\u00a0Strengths: data structures and C are cool \r\nWeaknesses: exams are very unforgiving since theyre only 4 questions ",
            "\u00a0This course DOES NOT give fair grades to students that show their hard work and how much they learned. Aspnes' tests are horrible because if you get one of the four questions wrong, you are immediately receive a grade below average. My experience was horrible because I had the right answer to a question, but then the proctor gave a hint to the class which caused me to change my answer to something that was wrong. Proctors' notes during an exam should only serve to benefit students and that was not the case. However, the real flaw in this class is because of Aspnes and his policies on regrades. You can make a perfectly correct Makefile which works when you test it, but does not work when the test script tests it (with no way for you to detect this error), and you immediately get a 0 on the pset with no hope of a regrade, or of a fair grade for that matter. This might be because the organizers of this class are too lazy to go and actually look through your work. Hence, it became impossible for many students to get an A or A- in this class because of a mistake for which they should not be held accountable. ",
            "\u00a0The ULA's are not fully equipped to help students work through the concepts. There should be grad students or at least people with more than a few weeks of experience with the material helping students learn how to think about the ideas. ",
            "\u00a0the exams are half trick questions that can ruin your grade which is kind of annoying; maybe also add some conceptual review sessions from ULAs so they don't have to answer the same questions over and over ",
            "\u00a0I thought the assignments were good but the lectures were at times confusing. When we talked about the more complex structures it was very difficult to follow. ",
            "\u00a0I thought lecture was kind of dry, but that's probably because of the nature of the topic, not the professor. I didn't really pay attention to lecture, but I learned everything through Aspnes's comprehensive online class notes, which were super helpful. ",
            "\u00a0All of the course notes and programs were online, which made it easy to reference materials. The course could have been improved with a general overview of the content on the exams and more review before exams. ",
            "\u00a0Lectures were often dry. ",
            "\u00a0Strengths: A diverse curriculum and fairly doable problem sets. Great ULAs.\r\nWeaknesses: The exams are extremely difficult. Because they are only four problems each and each exam is worth 20% of your grade, each problem is essentially 5% of your grade, which places a ridiculous amount of pressure on the students taking it. Even if you very well on the problem sets, if you aren't a strong test taker, your grade won't be optimal. \r\n\r\nAlso, office hours were super helpful, but the wait time to get help was a little ridiculous. For certain psets, it would take 1.5-2 hours to get help, even if you arrived five minutes after office hours began. ",
            "\u00a0I dont think the lectures make great use of time. Its not very productive for me to sit there and watch someone write code for an hour, I would rather spend more time in lecture talking about concepts. ",
            "\u00a0Strengths: clear expectations on assignments, resources are plentiful. \r\n\r\nWeaknesses: I never went to office hours but I head that they were horrendous (crowded, unhelpful, etc) so those should be fixed. ",
            "\u00a0Great PSets, horrible office hours. ",
            "\u00a0I thought lectures were not too productive because much of the time was spent doing basic examples of code that was already available online. ",
            "\u00a0The problem sets were structured well to the course content. Lessons were important to have for a developing programmer. Even included guidance in practical aspects of coding (ie good coding habits if we ever go into industry were demonstrated/noted by Aspnes as he coded in lecture) ",
            "\u00a0The course did a good job of making us use the data structures for that week, and problem sets were generally clear. However, the class often made the implementations of the data structures unclear, as little time was devoted to demonstrating how to implement the data structures. As a result, most people opted to simply copy the sample files posted online, rather than make an attempt to understand the data structure. Some of the problem sets also felt contrived, and though it enforced the usage of the data structure, did so in a rather unsatisfying manner. ",
            "\u00a0This course teaches a lot, and I learned a lot.  However, lecture's weren't very engaging.  The notes online were definitely a strength because they were so comprehensive. ",
            "\u00a0The peer tutors were all incredible, but there were very long waiting times at peer tutoring hours close to assignment due dates. The lectures were usually good at the beginning but devolved into an on-the-fly debugging session of the example code which was often boring and disorganized. ",
            "\u00a0Strengths: \r\nDedicated professor and ULAs. They made this course a lot more manageable. They are very easily accessible by email and office hours and so so helpful.\r\nAssignments. Challenging but good ways to practice programming and understand the ins and outs of the data structures you learn, as well as when to use each one.\r\n\r\nWeaknesses:\r\nDeadlines. Professor Aspnes is very harsh with deadlines. You lose 2% for each hour late your assignment is - so after 2 days, it's pretty much a 0. I don't think this is very conducive to learning the material and just puts additional stress on the students and ULAs without much gain. ",
            "\u00a0Strengths all the office hours. Weaknesses are the many hours you have to put in each week for the problem sets, never getting a break from doing work for this class, and the difficulty of the tests ",
            "\u00a0Strengths -  The material of the course is highly relevant and important if you hope to build any non-trivial software application. Aspnes is engaging, occasionally funny, and clearly knows his stuff really well. The problem sets are relatively interesting and are neither too easy nor too difficult.\r\n\r\nWeaknesses - The course spends far too long teaching basic aspects of C, which means the meat of the course (various data structures) are compressed into a much shorter timespan. Aspnes also spends a lot of time in class implementing various data structures, but doesn't spend nearly enough time giving students a basic intuition for what the data structures look like, which means if you haven't encountered them before there's a high chance you'll be lost in most lectures. ",
            "\u00a0Strengths: Lectures mostly consisted of Professor Aspnes writing and debugging code on the fly. Since I wasn't familiar with C or terminal commands at the start of the course, I initially found this very confusing, though the lectures became easier to follow over time. I found that this helped me learn to understand code quickly. Professor Aspnes is also very friendly when answering questions in class, and he responds to questions posted on Piazza very quickly.\r\nWeaknesses: Since Professor Aspnes misread the calendar, we had one less PSET than we were supposed to. We also essentially did not have private test cases, and we did not cover as many data structures as the course had in previous semesters. As a result, many students who took this course previously said that our course was significantly easier. Since Professor Aspnes' office hours are all right after class, it was difficult for me to ask questions in person outside of class. ",
            "\u00a0The teacher was a big weakness. Additionally, I thought the grading of the tests were too harsh and because there were only 4 questions on the tests, you get punished a lot for making just one mistake. ",
            "\u00a0Overall, this course was pretty great. ULA office hours were extremely helpful, the professor was engaging in lecture, the lecture notes online were thorough, and exams were fair. ",
            "\u00a0I think it is very interesting. The grading of exams was often pedantic and unfair I believe however. Grades should be based on competency not semicolons. ",
            "\u00a0Problem Sets are hard but they are super good at teaching you the material. Lectures, however, were disengaging and messy--not very helpful. ",
            "\u00a0Great class. I wouldn't change anything other than making the grade distribution more transparent. ",
            "\u00a0The primary strength of this course is the programming assignments, which teach you how to extend ideas from lecture and program and debug effectively. While individual assignments could be improved, the overall model works very well for this course. Lectures could be more effective, and cover more material, if they focused more on theory -- while seeing Prof. Aspnes program in lecture is useful at first, I don't think it adds much that we couldn't get from the online notes to our understanding of later data structures. ",
            "\u00a0ULA's should discourage students from going to office hours without having given the problem set a college try. Crowds out people who have legitimately attempted to complete homework on their own and are stuck. ",
            "\u00a0Problem sets were generally good and exams were fair although graded without much partial credit. Aspnes' lecturing style leaves much to be desired (although it's clear he knows what he's doing) -- lectures were hard to follow and understand well. ",
            "\u00a0The lectures were very hard to follow. But the assignments were very good. ",
            "\u00a0course was overall too big, not enough staff in office hours, and lectures were for the most part not very helpful. The problem sets and the online notes were good, though ",
            "\u00a0There never seemed to be enough time to both learn what the problem sets were covering and do them completely. ",
            "\u00a0I think that this course is a decent intro into more complex classes. Some parts of it were not covered thoroughly and I felt like there was a lot of material that was just skimmed. Sometimes while I was in class I felt like I was in a review session for an exam, so for someone who didn't take a similar course in high school an is not familiar with data structures and their applications this course could be a great challenge. ",
            "\u00a0Strengths -- absolutely the ULAs. I learned so much from them! They are amazing-- super knowledgeable and super nice! Also the psets were quite good and fun.\r\n\r\nWeaknesses-- It was very difficult for me to learn in lecture. Aspnes is quite charismatic and it's easy to pay attention at first, but his lectures are disorganized, and in every lecture there was a point at which I fell off and couldn't get back on. Aspnes is pretty good when he's on the blackboard only. The best lecture was the day he couldn't get the projector to work. But once he starts coding, he goes way to fast and it's impossible to follow, especially with him debugging on the fly. ",
            "\u00a0Plain and simple, this course needs sections. The lectures are not taught well enough and students rely on office hours which shouldn't be necessary. ",
            "\u00a0Exams are difficult in that if you miss one question or don't get to it in time--you're down to a 75% right off the bat. I don't think 8 questions over 2 exams can possibly do justice in seeing what students have learned through the course of the semester. ",
            "\u00a0The late work policy for this course is terrible. Students lose 2% for every hour they are late. In an environment like Yale, where students are already stressed, overcommitted, and working themselves into the ground, this policy is mentally and physically destructive. Especially with computer science, sometimes with the academic demands of other classes as well as campus jobs (for those who are on financial aid), it is not feasible to complete CS problem sets on time. This was exacerbated by the fact that there was no good way to get help, because lines for getting face time with a ULA or TA were often an hour or more long, and were held during times that were preclusive of waiting 1-2 hours for help. Moreover, since the grading is based on whether or not the code passes certain tests, and each pset was exactly one problem, if you couldn't get your code to work, even if it was mostly right but with one or two small errors, you would get no credit.\r\nThese policies combined contributed to unhealthy behaviours like getting no sleep because people were pulling all-nighters trying to finish problem sets, because \"every minute spent sleeping was more points off\". This is not fair to students, and not healthy for a campus culture that is already struggling with students mental health. ",
            "\u00a0Large lecture is not conducive to attendance but office hours is good even though I didn't really utilize them. The problem sets are fun and challenging, though. "
        ],
        [
            "\u00a0Yes because it does teach you how to manipulate data structures in a variety of different ways. ",
            "\u00a0If you're a CS major you have to take it, and for non-CS majors, this is probably the last reasonable class that you should consider taking. You learn the basic of data structures that come up a lot in interviews. Its also a pretty thorough introduction to C if you're planning on taking 323 or 355/6. ",
            "\u00a0I would recommend this course to a computer science major, or other students who are required to take this course for their major. I don't think you will find it particularly interesting unless you are interested in computer science, and it's certainly not worth the heavy course load/level of difficulty if you don't have to/want to take it. ",
            "\u00a0I wouldn't particularly recommend it to anyone whose major doesn't require it. For people whose majors do require it, it's pretty okay, but you need to be ready to do a lot of learning on your own and invest a lot of time in the psets. Despite the often frustrating nature of the class, though, you will learn a lot and become a much better programmer. ",
            "\u00a0I'd recommend this to any CS major (well, it's a requirement) or anyone with experience in programming that wants to learn about C or different data structures. Definitely do not take this as a complete beginner. ",
            "\u00a0Yes as a good introduction to data structures and algorithms (and using C) ",
            "\u00a0The people who are likely to be taking this course probably need it for the computer science major, so yes, you should take this course (in fact, you have to for the major).\r\n\r\nIf you're not a prospective computer science major or interested in a tech career, it doesn't make much sense for you to take this. If you just want a tour of data structures as a non-CS major, there are faster and less annoying (read: C-heavy) ways of doing so. ",
            "\u00a0yes, because i learned a lot of important programming concepts and became vastly more comfortable in coding in c (and coding in general). ",
            "\u00a0If you are a CS major, you have to take this class. But don't expect to know data structures well after taking the class if it's taught by Professor Aspnes. ",
            "\u00a0No its required for CS ",
            "\u00a0Yes if you want to go into any technical field ",
            "\u00a0Yes! this course is great. A lot of people hate on Aspnes but I personally loved him. ",
            "\u00a0If you are an experienced programmer who is pretty familiar with data structures (stacks, queues, hash tables, trees, etc.) and C, take this course and get a free pass into 323. Otherwise, if you are fresh out of taking a beating from 201/202, maybe take a semester to explore some better major options. ",
            "\u00a0Yes, only if they want to be a CS major ",
            "\u00a0Yes, I absolutely would. I learned so many fundamentals of Computer Science in this course. ",
            "\u00a0I only recommend this course to a student who has to take it for the CS major. ",
            "\u00a0I recommend that if this isn't for your major to take it credit/D. You get a lot of great knowledge and are able to really improve coding; however, it is a class that will require a lot of your time. While lectures weren't the best for me to learn, the notes provided online are very detailed and very clear. ",
            "\u00a0Maybe. It's not that great and it's really only interesting if you're into CS. It is required though, so I guess so. ",
            "\u00a0If you are interested in urban design and want to do interesting design based assignments (think interventions) in a class that is not as intense as some others offered by the architecture school, go for it. ",
            "\u00a0I would certainly recommend this to another student.  If you are a CS major, it is obviously required, but it is an excellent survey course for any non-major interested in CS or the tech industry to learn about data structures and programming in C! ",
            "\u00a0I would recommend this to another student, but for a non-cs major I would suggest taking it Credit D.  The psets are a ton of work and take many hours, but you get a lot of them.  The stress of getting them completely done isn't worth it for someone just interested in learning a little bit about the language C, so that's why I recommend Credit D. ",
            "\u00a0only if they have to for the major ",
            "\u00a0I would not recommend this course unless you need to take it for the major as I did. It was very clear to me that this class was not Professor Aspnes' top priority. He was routinely unprepared for class (he once admitted in front of the entire class that he only prepares about 20 minutes worth of content for each 75 minute lecture). He would spend the other 55 minutes coding examples on his computer (the screen was projected for the whole class to see), but since he was coding on the spot, he often made significant errors. A ridiculous amount of time was spent debugging his code. I found his lectures completely disengaging and was extremely disappointed by the quality of this class. I had a very difficult time paying attention as a result. ",
            "\u00a0Only if you really want to do the CS major or have significant background in CS. I started coding all of one year ago and this class has first-years who have been coding since they were born. It's definitely not easy but you do learn things. Whether or not those things will be useful depends on what you want to do with your life. ",
            "\u00a0If the administration of the course changed, yes ",
            "\u00a0Only if they're a compsci major ",
            "\u00a0Yes, this course is very good at making you become good at programming in C, using pointers, and gaining familiarity with basic data structures. Definitely a must-take class for the CS major. If you are not a CS major, the concepts you learn in this class will also probably be useful in other CS-related applications as well. ",
            "\u00a0Yes, I would recommend this course. Even for students who aren't considering a computer science major, this course provides a good introductory look at how to actually code and design programs. ",
            "\u00a0I wouldn't recommend this course to anyone who wasn't studying computer science already, as it would make them find computer science tedious. ",
            "\u00a0If you are interested in the major, this is a great course to test your interest. The class can be challenging and frustrating, but is ultimately rewarding. ",
            "\u00a0I would not recommend this course to a student who does not have much experience in computer science. But, if the class is necessary, I would strongly recommend taking a summer to learn C or at least gain some experience in C before taking the class. ",
            "\u00a0Yes, if you want to be a CS major. This is fundamental knowledge that you're going to need. If you're taking it for fun, you might find it a little pointless. ",
            "\u00a0Yes, I learned a lot about Computer Science, and this course is definitely a necessity when it comes to CS. It was very interesting and I learned a lot of new topics and it was very valuable to learn C. ",
            "\u00a0As previously mentioned, for anyone who wants to learn the basics of CS, this is the last class in the CS track I recommend.  Although 95% is self-learning and TA help, psets do help facilitate learning and application of the subject matter. ",
            "\u00a0Not unless they have to take it. The whole Yale CS department is like this: only take the class if you need to, because otherwise you'll hate your life and abandon all your other pursuits just to try to get a decent grade in a CS class ",
            "\u00a0No, not with Aspnes. But you probably have to take it for the major anyway ",
            "\u00a0Yes ",
            "\u00a0Yeah, the class is pretty easy and full of useful information. ",
            "\u00a0Yes, if you're looking for an easy and fun 6th or 7th class. \r\n\r\nJust kidding, the class wasn't that easy, but it was a lot of fun with Aspnes. He's very responsive to emails, and there are a ton of ULAs to help you out (although I found it much more satisfying to work through psets by myself or with a small group of friends). ",
            "\u00a0Yes. This is an essential course in the computer science major, and does a good job at teaching the fundamentals. ",
            "\u00a0Yes. I would. It is a great course for student's wishing to dive further into CS. ",
            "\u00a0Its just something you need to take if you plan on using computer science later. ",
            "\u00a0Should take it, good prep for tech interviews ",
            "\u00a0Yes! Programming is fun! Data structures are cool! ",
            "\u00a0Yes even if you're just considering the CS major, this course is an excellent introduction to real programming and a great time. ",
            "\u00a0Yes, I did feel like I learned a lot ",
            "\u00a0I would certainly recommend this course to CS majors and other engineering majors looking to go truly useful CS knowledge. ",
            "\u00a0still fun class to take ",
            "\u00a0Yes. It is a fundamental CS course that must be taken. ",
            "\u00a0Yes, if at all interested in CS. Great relatively intro course ",
            "\u00a0Yes, it's a very important core class in the CS major, and has good content even if you're not one. ",
            "\u00a0Yes. Great class for people who are interested in computer science, especially data structures. ",
            "\u00a0Yes, was interesting to learn. ",
            "\u00a0Yes, Aspnes is a great lecturer and really knows his stuff. It's required for CS, but is also a really great course. ",
            "\u00a0Yes ",
            "\u00a0Not unless they are interested in pursuing computer science. I think the topic would be uninteresting to non-majors. ",
            "\u00a0Yeah. Learn data structures. ",
            "\u00a0Yes it really is a useful course to take if you want to be proficient in computer science ",
            "\u00a0Its useful to learn data structures and C is interesting so if youre a CS person then yes otherwise maybe not ",
            "\u00a0Yes, it's great for basic theoretical understanding for data structures. ",
            "\u00a0If you are a CS major, you have to take it, but try to take it with a professor other than Aspnes. Also, don't make the Makefile error. Ask your TAs about that. ",
            "\u00a0Yes, it is full of essential concepts at the foundation of CS. ",
            "\u00a0yes, good course for learning about data structures/programming in general and not too hard or time intensive. Debugging is super annoying but that's just CS in general ",
            "\u00a0I would, but with the caveat that they should try their best to research data structures outside of class a little bit. ",
            "\u00a0I would recommend this course to another student. The material is kind of dry, but definitely necessary if you're interested in CS or want to go into a tech field. Data structures are very fundamental for learning CS and you'll feel well equipped with useful knowledge once you come out of this class. ",
            "\u00a0If you want to major in Computer Science, this class is important to take. It goes over C programming, which you might not know, and gives a small introduction to data structures. It is important to go over course notes if you miss a lecture, and you should make sure you understand the material. I think whether or not you should take this class depends on what you plan on majoring in. ",
            "\u00a0If you have a serious interest in computer science or programming, I recommend you take this course as you'll learn a lot. \r\nJust be prepared for its very high workload. ",
            "\u00a0It's a requirement for the CS major, so it can't really be avoided. Would recommend as a CR/D/Fail for non-majors so that they can learn the material but not feel the intense stress of the coursework. ",
            "\u00a0Id recommend it to someone interested in the CS major, but its a pretty hard class (and not super fun) so I wouldnt recommend it to someone who just wanted to take one or two CS classes ",
            "\u00a0Meh. Its kind of required, and its not very much work. Glad I took it, wish it was better. ",
            "\u00a0Yes - it was a very important course to my understanding of computer science. ",
            "\u00a0I would, but not with Professor Aspnes. It is integral to learning CS (even if people feel like they know C), but the teaching quality was unideal ",
            "\u00a0I would not recommend the class for non computer science majors. The class introduces a broad variety of data structures, but does not explain them thoroughly, and would doubtlessly be confusing for a non-major. Of course, students in the computer science major are required to take the course, so there is little to be said in that case. ",
            "\u00a0If you have a good background in CS and are prepared to put in work, this is a great class that will teach you a lot. ",
            "\u00a0I would recommend this course if you like programming and if you either take the course with friends or are willing to put in the effort to join a pset group. The weekly assignments are exponentially easier if you work with your classmates and/or the peer tutors to figure out the best data structure(s) to use. If you're on your own you will likely spend ~10 hours using a less than optimal data structure and then trying to debug it frantically while the peer tutors work their way through an endless list of people before never getting to you. Even with a group, there will be some assignments that take a long time to complete (while others only take a couple of hours, especially if you figure out the right data structure quickly or someone gives you a hint). It shoudl also be noted that there is a steep learning curve at the beginning while you learn C-- Aspnes does take time to teach some of the basics in lectures but you should still expect the first few psets to be difficult if you do not already know C. Assignments aside, Aspnes' lectures are a bit disorganized-- generally it's useful to be there when he's introducing a new concept or data structure, and in the beginning of most lectures when he talks and writes on the board. I found his example programs less useful because he is writing code very quickly (so it's hard to follow all the time) and on the fly (so there are a lot of bugs that he spends ~half the time trying to fix). His online lecture notes are very strong and a great resource for studying/reviewing/assignments/if you miss class, but they do not exactly correspond to the current version of the course as they are from a few years ago. The two exams (midterm and last week of class, during class time) were pretty reasonable and kind of fun. I recommend doing all the practice exams. I did take CPSC 201 before this and that helped at many points during the course because I had a really solid understanding of how memory works and also recursion. ",
            "\u00a0Strengths: \r\nDedicated professor and ULAs. They made this course a lot more manageable. They are very easily accessible by email and office hours and so so helpful.\r\nAssignments. Challenging but good ways to practice programming and understand the ins and outs of the data structures you learn, as well as when to use each one.\r\n\r\nWeaknesses:\r\nDeadlines. Professor Aspnes is very harsh with deadlines. You lose 2% for each hour late your assignment is - so after 2 days, it's pretty much a 0. I don't think this is very conducive to learning the material and just puts additional stress on the students and ULAs without much gain. That being said, if this policy doesn't change, get started as early as possible!! If you've gotten something done by Sunday night, you can usually go to office hours and get some feedback and direction for next steps. ",
            "\u00a0Only take if you are planning on being a CS major (because it is required). If you aren't planning on being one, this class will unnecessarily consume your life. ",
            "\u00a0How much you get out of this course largely depends on the effort you choose to put in. The various assignments are a great training ground to implement the various data structures yourself and learn how to use Git/GDB/Valgrind/Callgrind really well. Try to become adept at debugging yourself and avoid going to office hours unless you are really desperate. ",
            "\u00a0Good introduction to C programming and data structures, but did not cover as much material as included in online lecture notes. ",
            "\u00a0Not unless you have to take it to be a computer science major ",
            "\u00a0Yes. If you like programming take this course. ",
            "\u00a0Yes--this is the first nontrivial cs class at yale. You learn so many essentials ",
            "\u00a0Yes, at least try it out and drop it if you don't like it. It's definitely worth a try to see if you enjoy the material. ",
            "\u00a0Yes. Besides being required for the major, it's a great chance to learn a bit about the theoretical side of CS while maintaining a very practical focus. The programming assignments are definitely the most important (and most fun) parts of this course, since they force you to extend what you've learned in lecture while building general programming skills. ",
            "\u00a0Necessary for the CS major. Not the most fascinating CS course I have ever taken, but Aspnes was a fairly clear lecturer. ",
            "\u00a0If you're a CS major it's required. If not, don't take it-- the psets are a good deal of work but essentially the only way to learn the material well, and the curve makes it hard to do well. ",
            "\u00a0Yes I would. It is required in the CompSci major as well. ",
            "\u00a0This class is a great intro to Yale CS; taking this course, you'll learn a lot if you stay on top of the reading and do the problems sets. On the other hand, lecture can sometimes be a waste of time. However, I learned a lot from doing the psets and spending lots of time doing them with friends.\r\n\r\nOverall, would recommend this course, as it's not only a requirement for the CS major, but an overall informative course, although the lectures could be improved a lot, and there could be a more staff and overall more organized office hours. ",
            "\u00a0I wouldn't recommend this course to anyone who doesn't have to take it. ",
            "\u00a0Yes, if you are ready to put in a lot of work it is completely worth it. It's like learning a language, and by the end I felt really proficient in C. I know that all the skills I learned in this class will be extremely useful going forward. Also, the ULAs are suuuuper clutch. ",
            "\u00a0If you have to take it for a computer science major, it's not the worst possible course. It's interesting and you definitely learn some skills from the psets. But it's not for everybody ",
            "\u00a0It should be a useful course, it probably won't be that fun. I recommend trying to make friends and study groups in the class. ",
            "\u00a0No, I would not, not the way that it was taught this semester at least. The material was not presented well, making it difficult to understand and forcing students to self-teach, and the instructor left much to be desired. ",
            "\u00a0Yes. Good introduction to C programming language and data structures. "
        ]
    ]
}