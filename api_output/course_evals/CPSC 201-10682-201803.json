{
    "crn_code": "10682",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            5,
            15,
            35,
            41,
            28
        ],
        [
            8,
            22,
            50,
            32,
            12
        ],
        [
            6,
            21,
            30,
            55,
            13
        ],
        [
            7,
            22,
            40,
            44,
            11
        ],
        [
            0,
            8,
            35,
            58,
            24
        ],
        [
            0,
            5,
            33,
            56,
            31
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0CS skills. Recursion. ",
            "\u00a0Barely any. Racket is a useless language and I still don't know why we're taught it. ",
            "\u00a0Learned A LOT about recursion, computer logic, recursion, circuits, turing machines, recursion, and TC201 programs. ",
            "\u00a0intro to computer science ",
            "\u00a0I learned how to program in Racket, and I learned fundamental CS concepts like computer architecture, assembly language, and gates & circuits. ",
            "\u00a0You get a good overview of many diverse topics on Computer Science, though racket is not the most popular language to me learning right now. As someone without a lot of  CS experience, I definitely learned a lot and would recommend if you are interested in majoring in CS and want to test the waters. ",
            "\u00a0I learned a lot. I learned Racket, and I think it's good to get a feel for some functional languages (especially since there are software jobs that require such knowledge). Beyond that, I learned a lot of really interesting computer science concepts like Turing machines or how logic gates work together to create computer memory. I just really thought it was interesting. ",
            "\u00a0I learned how to use the coding language Racket, how to do intense problem solving with the problem sets, and how to use recursion and other CS concepts that I was unfamiliar with. ",
            "\u00a0Course is really helpful to understand and be able to apply recursion. Also it gives a broad perspective of what paths one can follow as a CS major (focus on linguistics, math, electrical engineering). ",
            "\u00a0Really learned recursion, and once we learned that, really learned about the inner workings of computers on the lower levels, specifically the 1s and 0s. ",
            "\u00a0Racket, unix, computer architecture ",
            "\u00a0Understanding of basic CS theory. ",
            "\u00a0basic cs skills ",
            "\u00a0Recursion, coding in Racket, debugging, and in general, just a more solid grasp of computer science. ",
            "\u00a0I learned some of the foundational concepts in computer science including Turing Machines, circuits, computer architecture, regular expressions, and UNIX and how to implement/simulate their behavior in Racket. I did not learn much in creating good code or figuring out ways to think through the problem sets. ",
            "\u00a0You're gonna end up teaching yourself computer science, but it really does help with better understanding of functional programming. Racket is terrible but it teaches you patience. ",
            "\u00a0I learned how to struggle through problem sets that I couldn't just look up. I learned recursion, and I learned it well. I learned how computers work on a deep level. I learned serious theory, not just practice, and I think that's something invaluable. ",
            "\u00a0Functional Programming, recursion, fundamentals of computer science. ",
            "\u00a0I learned a great deal about computer architecture, how many algorithms work under the hood, and how to write programs more efficiently to name a few things. ",
            "\u00a0The course was good practice in programming logic through learning a new language and using Unix. It was also a good introduction to various fields of computer science like automata theory and algorithms that will be useful in later courses. ",
            "\u00a0Very interesting and thought exercise class. Teaches different way of thinking ",
            "\u00a0We learned the computer language Racket, recursion, deep recursion, Turing machines, computer assembly language, processing speeds, rules of languages, and various other computer-related functions. Essentially, we learned the basics of computer programming. ",
            "\u00a0I learned a lot about a breadth of computer science topics, such as turing machines, recursion, and the functioning of computers ",
            "\u00a0Fundamental concepts of recursion, boolean logic, TC-201/machine architecture, etc ",
            "\u00a0I learned how a computer is built from Logic Gates all the way up to ALUs and Assembly Language. It was a natural way to go about learning Computer Science, and a much better intro to the field than CS50. Honestly I'd skip CS50 unless your goal is to have programming as a tool and you wanna focus your undergrad in something else. If you wanna go serious and deep in Computer Science, CS201 is great. ",
            "\u00a0This course taught me to be very comfortable with recursion, something that software developers often find daunting. ",
            "\u00a0We got a pretty thorough introduction to Racket, and we talked about a lot of basic concepts in computer science like recursion, Turing machines, von Neumann computer architecture and assembly, and representation of numbers in different forms of binary. ",
            "\u00a0I was relatively new to computer science having never taken a structured course in this field of study before. The course gave me a lot of skills. It taught me how to visualise a problem and interpret a solution using logic and mathematical concepts. It taught me the basics of functional programming and gave me a love for coding. ",
            "\u00a0I learned some about computer architecture and unix, but overall not much as I had prior knowledge on the subject of this class. ",
            "\u00a0Recursion and how computers work! ",
            "\u00a0Gained foundational skills in how to think more clearly and systematically. ",
            "\u00a0I learned a lot about many aspects of computer science, including recursion, boolean logic, circuitry, architecture, and assembly language grammar. ",
            "\u00a0I learned a lot about recursion and more theoretical aspects of computer science. It makes a lot of sense how structures are set up now. It was all like solving puzzles, and was pretty interesting. ",
            "\u00a0During this course I was able to really test my Computer Science abilities. Through practice with UNIX, functionality, computer architecture, strings and languages, and boolean expressions/circuits, I was able to understand the basics of computers and implementing some of that functionality. ",
            "\u00a0Recursion, functional programming, basic Unix, computer science topics, how to break up problem sets over multiple days. ",
            "\u00a0Some basic elements of computer science ",
            "\u00a0I learned the theory behind coding and logic. This helped me have a better insight about computing. ",
            "\u00a0I learned racket. ",
            "\u00a0I learnt how computers are programmed to work and the fundamentals of programming and solving problems. ",
            "\u00a0I learned the fundamental principles of computer science, including logic gates, booleans, and computer architecture. ",
            "\u00a0Recusion, functional programming, assembly, grammar, regex, turring machines and more ",
            "\u00a0In this course, I became familiar with racket, recursion, and the basics of machine architecture. ",
            "\u00a0This class will teach you a very in depth introduction to the basics of computer science. It moves very quickly and covers a lot of material. ",
            "\u00a0I improved my skills with recursion and gained an understanding of how computers work. ",
            "\u00a0I gained a thorough understanding of functional programming principals, learned quite a bit about how computers work at the bit by bit level, and got a working knowledge of Unix. I believe all three of these topics have provided me with a solid foundation for pursuing the computer science curriculum at Yale. ",
            "\u00a0I learned functional programming ",
            "\u00a0A solid foundation in recursion and the basic principles behind making software function. ",
            "\u00a0I learned about lower level computer architecture and language, like assembly language, gates and circuits, compilers, machine architecture. There was also a large emphasis on recursion. ",
            "\u00a0You learn a great deal about the intermediate functioning of computers: how the computer works between the hardware and the higher level code. You learn this through coding computer-like simulators. ",
            "\u00a0When I started this class, I was vaguely scared by computers and coding. Though most of the concepts taught in class were rather theoretical, I actually feel comfortable thinking about problems in CS now. ",
            "\u00a0Got a lot of practice in recursive/functional programming, learnt basic fundamentals of concepts such as circuits, logic, languages, computer storage. ",
            "\u00a0This course is a lot about self-teaching. The lectures were extremely unhelpful for the problem sets so I spent a lot of tome learning either through reading the lecture notes online or through trying the problems. Having said that, I learned a lot about how computers are structured and really enjoyed the problem sets and concepts covered in the course. ",
            "\u00a0Recursion ",
            "\u00a0I learned the basics of computer science theories like boolean logic and architecture. I learned how to shift my thinking in a new way to adapt to problems. I also got much better at using recursion. ",
            "\u00a0Racket ",
            "\u00a0Computer architecture, the logic of recursion ",
            "\u00a0I learned so many interesting topics such as Turing machines, gates and circuits, regular expressions, context free grammars, in addition to getting a much desperate understanding of recursion. ",
            "\u00a0Improved my confidence coding, learned Racket, recursion, and turing machines among other skills. ",
            "\u00a0A lot about problem solving and recursive algorithm writing ",
            "\u00a0I gained a deeper conceptual understanding of CPUs and algorithms. ",
            "\u00a0I learned about interesting computer science topics such as Turing Machines, Boolean Circuits, and Computer Architecture. I was also able to develop my programming skills and learn how to create more efficient code. ",
            "\u00a0I aquired a lot of knowledge pertaining to the theory of computer science. ",
            "\u00a0I learned a lot about recursion, UNIX, assembly language, and Racket language in general. ",
            "\u00a0I had already learnt most of the material in this class. ",
            "\u00a0I became much more accustomed to functional programming and recursion and got a fun overview of different concepts behind programming-- Turing machines, gates and circuits, assembly, strings and languages, for instance. ",
            "\u00a0I learned about the fundamentals of computer science. I believe this course set up a great foundation for further exploration into the field. ",
            "\u00a0Recursion, computer architecture, thinking theoretically about computer science ",
            "\u00a0A lot of recursion, as well as how computers/programming languages work on a fundamental level. ",
            "\u00a0I learned how to program in racket, and I learned about the fundamentals of computer machinery, language, and architecture. I also learned skills and theory that went through the basics of giving a computer instructions. ",
            "\u00a0Learn racket, Turing machine, computer architecture, even something related to linguistic. We also learn about circuit and how computer work in the most fundamental level ",
            "\u00a0By taking 201 you develop a decent amount of skills in the functional programming language Racket and understanding of how to use recursion to solve computational problems. You also gain some knowledge in Turing machine, boolean functions and computer principles. ",
            "\u00a0Learned about recursion and how to program in racket ",
            "\u00a0I became familiarized with a number of fundamental computer science concepts. Learned a new language, Racket, learned UNIX as well. ",
            "\u00a0Racket, Unix, and a basic understanding of computer science in general. ",
            "\u00a0A fundamental knowledge of computer science. ",
            "\u00a0A stronger appreciation for how a computer works. ",
            "\u00a0I learned a lot about computer architecture and how computers work on a fundamental level. ",
            "\u00a0I learned a lot about recursion, Turing machines, and computer architecture. This was helpful because know I feel that I have a better understanding of computers as a whole, rather than just how to write code. ",
            "\u00a0Racket. Recession thinking. ",
            "\u00a0This course gave me a very thorough understanding of the fundamentals of computer science, specifically theory. I was really happy to learn about recursion, hardware basics (circuit types and logic gates). ",
            "\u00a0I learned how computers work from circuit-level logic to high-level languages. ",
            "\u00a0I learned basic theory of computer science and racket. ",
            "\u00a0This course really helped in understanding recursion and functional programming.\r\nIt also teaches a pretty good introduction into the way that programming works from the ground up (i.e. Boolean logic, memory, assembly etc.) ",
            "\u00a0It's a basic CS course for anyone who's already programmed (and, for those brave enough, some who haven't.) It's not a very industry-applicable course, but expect to learn about basic CS theory - boolean logic, Turing machines and computability, formal languages, and that kind of thing. ",
            "\u00a0I learned how a computer works really well as well as recursion. Many basic concepts were taught that can be used as a foundation for future courses. ",
            "\u00a0The programing languages Racket and Unix are both learned in this course. The concept of recursion is thoroughly taught in this course. "
        ],
        [
            "\u00a0Not best teacher but good class ",
            "\u00a0This class is so boring and all we learn is a dead programming language that we will never use again ",
            "\u00a0The lectures were not very interesting and there were several topics that were self-taught. I was one of the few people who came to lecture because most people figured they would not be engaged and would fail to learn much of anything. ",
            "\u00a0The classes are super boring ",
            "\u00a0Some strengths are that it's really interesting, and the professor posts thorough lecture notes online. ULA office hours are also so frequent and so helpful, and I felt like I learned a lot from the homework. UNIX material could be improved by providing more ways to practice with UNIX commands, and lectures could definitely be more engaging. ",
            "\u00a0The lecture time could be better used in that the beginning 10-20minutes were always used for brain teasers or random things unrelated to the course. Though it was interesting, for a 50 minute class, those could have been saved to go further in depth in the concepts or problem sets. ",
            "\u00a0This course does a really good job of making you think about problems and challenging your mind. The problem sets are really tough but are so rewarding when you finish. A weakness is that the lectures aren't super engaging, since many of the students aren't paying attention which is contagious. Also, some of the material we learned isn't going to be relevant when we reach the real tech world. ",
            "\u00a0Office hours were incredibly helpful. Sometimes though, they were incredibly crowded, so more ULAs would be needed. ",
            "\u00a0Strengths: Slade really makes this a great class, he keeps it interesting with his word of the day and his logical problem of the day. Grading was clear, there was very little ambiguity in any part of the course, communication with students was extremely clear, and I was very rarely frustrated with the course. ",
            "\u00a0A good intro into general computer science topics. Taught in Racket which is annoying at times. ",
            "\u00a0It would be nice if it had a section. Also needs more ULAs during peak hours. Sometimes there was a queue that could be an hour or two long, and I'd have to get to office hours 20 minutes early just to get help in a timely manner. ",
            "\u00a0organized well for learning. having great lecture notes was amazing. Not many improvements. ",
            "\u00a0Will help you become a better programmer, but lectures are a DRAG. After the first week or so, a large portion of the class never shows up to lectures since they're not engaging and thorough lecture notes are posted on the course website. If you want, you could never show up to lecture and do just as well in the course as others who did. ",
            "\u00a0Lectures were not interesting, and I felt like most of them didn't really help with my learning. ",
            "\u00a0The strengths of the course were the sets of notes and the problem sets, which were engaging, clear, and relatively concise. I think that the problem sets were fun to complete (except for the last one) simply because they had a very clear problem-based, logical progression where each question built on the previous one. I also liked how problem sets were released two weeks early so that students could get ahead on a problem set, how Piazza was a forum where students could post questions and see what other students were having problems with, and how the peer tutor hours were plentiful and more tailored to one-on-one student learning. I also really liked the release of practice exams that tested concrete skills like evaluating regular expressions  I would like to even see more of them.\r\n\r\nThe weaknesses of the course came down to two things, the first of which was the lectures. The lectures were uninspiring, tepid sessions where, despite going everyday, taught virtually nothing. Interaction with the professor was minimal as a lecture course to the point where it felt that a lot of the content was self-taught through the notes and problem sets and by going to help hours. Secondly, I saw no point in using Racket as a computer language for the entire course when a more relevant language like Java or C++ could have sufficed in teaching the concepts AND being applicable after college. ",
            "\u00a0I thought the problem sets were the best part of this course. They were really fun and really useful for cementing what I had learned across the course of the year. I don't have much to say about weaknesses. ",
            "\u00a0The content is generally pretty interesting and well presented. The problem sets do add up though because they are weekly and usually take 10+ hours to do. Most other CS classes have biweekly problem sets. ",
            "\u00a0The course covers good material and has very accessible TAs who hold help hours every day for a few hours. The lectures can be rather low energy and this means much fewer people come to lecture after the first couple weeks. More engagement with the class, or some kind of interactive element, could help fix this aspect of the class. ",
            "\u00a0Great lecture notes with which you can do the homework. The response time on Piazza was great and made it a useful tool for homework and studying. Homework was very time consuming but rewarding. If you get stuck, its pretty difficult to get through it though. ",
            "\u00a0The course was probably strongest in its breadth of topics and introducing students to various topics in computer science, but it didn't feel very deep and meaningful. It didn't feel quite engaging all the time, since some classes felt entirely useless, like only going over half of the homework problems which we could figure out ourselves anyways. ",
            "\u00a0Boring lectures but great class content/assignments. I wanted/excited to do the psets ",
            "\u00a0This course has an exciting structure -- first learning the basics of Racket programming, and then working our way up from Boolean functions to gates and circuits to assembly language code to strings to runtimes of programs. However, the teaching in this course lacked excitement or any real dynamic engagement. The professor focused more on reading us the lecture notes than on actually teaching. The notes themselves were helpful, but the course was basically self taught. ",
            "\u00a0The course may have had a bit too much work with the homeworks, especially the week before exams. Other than that, great professor and extremely helpful ULAs. My only other CS class i've taken at yale was cs112, and 201 was a far better, more rewarding course. ",
            "\u00a0Lectures were not as helpful as office hours. Could be improved by making lectures more interactive. Lectures could also be more structured ",
            "\u00a0Slade is not a great lecturer, but the psets are amazing and very instructional! ",
            "\u00a0The material covered in the lectures is not always very closely related to what is expected of you on the problem sets. Without attending office hours often, it feels very hard for you to do well in the course. ",
            "\u00a0I felt like this was a pretty solid introductory computer science course. Some of the problem sets were kind of cool and it was almost always clear what the problems were teaching you. I think that Prof. Slade designed the course so that we used Racket to learn about different computer science topics, rather than just learning to code in Racket, and that was really nice because it made it more interesting. The course website was also really helpful because Prof. Slade put up class notes that detailed the topics we were learning about (definitely read those as you do your problem sets, it'll make it a lot easier). The ULA system is definitely another strength of this course--being able to go talk to other students during office hours to get help on particular problems or concepts that I was stuck on really helped me out a lot, and I appreciated how frequent the office hours were. \r\n\r\nIn terms of improvements, there was one problem set for TC-201 assembly and the simulator (hw6) that was just abnormally and unreasonably long. It took me twice as long as some of the earlier problem sets in the course, and while I know that the problem sets should get harder as the semester progresses, this was just really too much to put on one assignment. I think that in future semesters it should be split up into two problem sets over more than two weeks or perhaps shortened, if the problems can't be separated. Overall, though, this was a pretty good class and I don't have too much to critique. ",
            "\u00a0The course is structured in such a way that the psets are really interesting and abstract on the concepts of computer science in a very clever way. Turing Machines to circuits to machine language to syntax. It is a really good introduction to computer science. It is however very challenging for students who are new to coding. But all the hours spent in office hours and on psets are worth it in the end. ",
            "\u00a0There are very few strengths, in my opinion, teaching was inefficient and the language we used is very outdated. When students have to spend hours upon hours at office hours, there is clearly something wrong happening. ",
            "\u00a0Very reasonable and kind professor, although he lectures a bit sporadically. Great material, amazing psets, fair exams. ",
            "\u00a0Lecture classes are not very engaging; office hours were very helpful; problem sets were very enjoyable; tests straightforward. ",
            "\u00a0Lecture was a little dull, which is why many students chose simply never to attend. ",
            "\u00a0Office hours are set up a little inefficiently, but they improved over time. I also feel like I did not gain that much from attending lecture, it was just not very memorable to me. I learned a lot from office hours, though. I think lecture is more about the theory behind the problem sets, but it is hard to grasp if you haven't looked at the problem set yet. ",
            "\u00a0This course was very strong in the sense that it combined all the covered topics by the end of the course and demonstrated how they all work together. The course could be improved, however, by including more time dedicated to teaching the coding aspect of the class rather than the top-level concepts. ",
            "\u00a0Lectures can be boring.\r\nStrength is in the problem sets, they make you think. ",
            "\u00a0Strengths are that some material allowed for greater rational thinking development. Weaknesses were that information was really hard to understand and not explained well enough for students who did not have a lot of prior knowledge ",
            "\u00a0The strengths of this course are that it gave you a lot of freedom to learn on your own and learn through the exercises.\r\nA weakness might be that some p-sets were time consuming and difficult to do in a week. ",
            "\u00a0Lectures weren't very useful. ",
            "\u00a0The TA office hours were pourly upheld and there were often 60 people lines waiting to talk to 2 TAs. Also, many of the topics were explained in a single sentence and were not saved in any way for future review. ",
            "\u00a0Lecture notes were very clear and helpful. ",
            "\u00a0The lectures arnt very helpful as the content can be learned online really effectively. ",
            "\u00a0The course has a lot of weaknesses. For the first few weeks of class, lectures had little to do with what we were learning through the psets. Also, this course is taught in racket, which is nearly useless beyond this course. I felt that I learned more through help hours with teaching assistants than I did from lecture, and I would have preferred there be a seminar-like discussion section to reinforce what was taught in lecture instead of having a third lecture on Friday. ",
            "\u00a0This class was awesome because it taught me that I really love computer science, and I really enjoyed the challenges that I faced throughout the semester. That said, there was a  lot of \"independent learning\".. Despite going to lecture every day, I usually had to do a lot of research or go to office hours before I had a clue what was being asked of me on the homework. Certain skills were just not explained in class. ",
            "\u00a0The professor is not engaging and does not teach. He is basically not relevant to the course. Most people I know skipped class and just did the psets. Also, racket. ",
            "\u00a0Most of the psets were very well designed to cover the materials taught in class. I especially liked how the sections on computer architecture were presented. That said, I feel like there could have been more said in class regarding computational complexity than mostly letting students figure it out on their own. I found the homework walkthroughs and review sessions very helpful. I have heard from some other students that private help hours could get very busy at some times (although I never experienced this myself). ",
            "\u00a0it was good ",
            "\u00a0The course provides an excellent breadth of information and utilizes technology to provide prompt feedback and support. At points on the psets I found the public tests insufficent fully test my code, although that might have been intentional. ",
            "\u00a0The language used, Racket, is quite rarely used outside of this course. The office hours are inefficiently run, and several of the psets seem unnecessarily long. The notes posted online are much better than the lectures. ",
            "\u00a0Lecture was super unhelpful. That being said, this is my first CS class so not entirely sure how that can be improved upon. Perhaps this is just an inevitability with CS classes. I thought the psets were really engaging. I loved that we had late days. The tests seemed fair for the most part -- I would either drop UNIX from the test or add it to psets somehow, though. ",
            "\u00a0Overall, the selections of topics covered in this course are good. However, I felt that we could have maybe covered a little bit more theory and gone further in-depth into the things we were learning. I also felt that sometimes the homeworks were too long and time-consuming, for instance the homework regarding the TC-201 computers. The course might have been more effective if homeworks were of a more reliable level of length and challenge, and if lectures were used somewhat more productively to teach somewhat more content. ",
            "\u00a0Strengths are psets, interesting concepts, and help hours. Weaknesses are boring and unhelpful lectures. ",
            "\u00a0I did poorly on my first midterm, but then improved on the second by changing my study strategy ",
            "\u00a0The format of the lecture did not seem very helpful. Throughout the semester fewer and fewer people stopped coming. It was difficult to engage with the lecture in the way that it was except for the ones that used student volunteers for demonstrations. I feel like this class should have a section (not necessarily help hours the way they were) that is specifically to go over that week's content not just individual homework questions for each student. I think if I understood the concepts better I would be more successful in this class. ",
            "\u00a0It is so, so hard to stay awake during lecture or follow along during lecture, not because the material is confusing but because he jumps around from topic to topic so much. Its also very difficult to do all the p sets in drRacket and then have to take the test pencil and paper. Also, I know this is falling on deaf ears, but I really wish we had learned python instead of a dead language. ",
            "\u00a0Hire more ULAs so we dont have a queue of 40 people needing assistance from 2 working ULAs during help hours. ",
            "\u00a0This course was all in all pretty great. I think that perhaps the tests could be a little shorter for the given test time, otherwise no complaints. ",
            "\u00a0Lecture is pretty boring but the ULAs are incredible and make this course what it is. Slade isn't a bad teacher but it's just really difficult to make a computer science lecture engaging. I learned just about everything in this course from the ULAs. There was a steep learning curve but you have to learn to start the psets early and work on them throughout the week. ",
            "\u00a0I think this course covers very interesting topics and I really enjoyed doing the problems set; however, the lectures tended to be very theoretical. at times it was hard to understand the concepts as we would not go over very many examples. ",
            "\u00a0Strength:\r\n- Topics were very interesting\r\n- Problem sets were challenging but never felt like too much\r\n\r\nWeakness:\r\n- lecture was usually pretty worthless\r\n- not a fan of the read of the screen style ",
            "\u00a0Help hours given by the ULAs were extremely helpful throughout the year and I think it was the biggest strength of this class that made it significantly less painful and easier to manage. ",
            "\u00a0Students should be able to test out for this class without needing to make up requirements for the major. ",
            "\u00a0I believe the course taught the material. However, it was not super engaging as it's hard to be when it's a lecture of over a hundred students. Therefore, I don't see a clear way of improving the course. ",
            "\u00a0Weakness: Lectures are not directed at learning the syllabus \r\nStrengths: Great ULAs and support ",
            "\u00a0This course has some interesting topics that explain a lot about the fundamentals of computer machines and how they function. It also teaches a lot about recursive programming and communicating to a machine the basic steps of what you want it to do. That being said, the subject matter can be difficult to get a grasp of with the pace of the course, and a lot of times, it felt like each week's material was a course in itself. While the professor is pretty understanding if you reach out, it can still be frustrating trying to work out the problems in office hours especially during the more difficult psets where it becomes a lot more time-consuming and help hours get more crowded meaning sometimes you only get a couple minutes of help. A lot of times, I felt like working on the psets also interfered with my ability to prepare thoroughly for the exams, since the review sessions were sometimes held around the same time and there were additional topics outside the psets such as the UNIX commands we had to go through and learn. This cycle can become incredibly stressful and discouraging especially if you begin to fall behind and have to come to more office hours to try and catch up. Overall, I feel like this course would be better structured if there was less material being jammed into each week and if more time was given for each topic to be understood before just jumping into the next thing. Also, there needs to be a better system of receiving help and possibly one-on-one support. ",
            "\u00a0Big lectures. Great ULA, complete lecture notes. ",
            "\u00a0I really like the weekly problem sets in the course because we were always asked to create some cool theoretical concepts like different Turing machines or an assembly language computer. Although we generally spoke about the interesting topics, the lectures were often boring and the engagement of the students was low. ",
            "\u00a0Strengths: I definitely became better at programming and learned a lot about racket and how a computer functions\r\nWeaknesses: lecture was one of the most boring I have ever attended and was very hard to pay attention to. Luckily there were good class notes uploaded online, but most of my learning was done on my own by reading class notes, google, etc. ",
            "\u00a0The course was well-structured. It was very clear what concepts we covered and we were given the resources to understand those concepts. We also had a lot of help from ULAs. However lectures weren't all that helpful; it often felt like we were just learning bits of information without connection when in fact the problem sets were complicated, cohesive projects. ",
            "\u00a0Lecture isnt helpful, peer tutoring is. ",
            "\u00a0The lectures are not very engaging. ",
            "\u00a0The lectures tend to go over the homework more often than needed - I would rather learn more about the skills and knowledge required to complete the homework. ",
            "\u00a0The problem sets are challenging, but they are very helpful in learning the material. I did not find the lectures to be helpful in doing the problem sets. ",
            "\u00a0Make lectures useful! I did not learn during lecture, so I had to learn everything on my own. ",
            "\u00a0I think that the PSETs were very well written - they were constructed in a way where I believed they gave a thorough understanding of the week's topic and also prepared me for examinations sufficiently. A weakness would probably be the office hours. I went to two of them and honestly didn't find them that helpful. ",
            "\u00a0Strengths: Good introduction to computer science; Homework assignments were educational, especially TC-201, which simulated assembling and running simple programs; Not hard to make up missed lectures, since all the material is posted online; Manageable workload; A few late passes; Help hours were plentiful and indeed helpful; UNIX introduction was useful; UNIX tutorial was helpful, despite many typos; Racket was good for learning concepts.\r\nWeaknesses: Lectures were practically the same as the online notes; While the exam questions on UNIX incentivized studying it, memorizing output format was annoying. ",
            "\u00a0Strengths: Balances interest/rigor with manageability\r\nWeaknesses: The class got off topic at times... ",
            "\u00a0It seemed a little theoretical in not the best way for a student who is already acquainted with programming. Some of the topics were helpful, but many were simply observed on a level that wouldn't necessarily be helpful again without further study. All this even though it is a required course for the Computer Science major. ",
            "\u00a0It's not a terribly engaging class, but it's not horrible either. The problem sets were fairly well written and the right level of challenging, but lectures were unfocused and less than useful. ",
            "\u00a0The psets were really well made and helped me learn a lot of the course material and solidify my knowledge. Lecture needs to be more interesting though. ",
            "\u00a0Racket is a language that can be not intuitive and frustrating to use. It has almost no real world uses and feels almost pointless to use when so many other programing languages exist. Other than that the course as a whole is enjoyable. "
        ],
        [
            "\u00a0Only if like computer science. ",
            "\u00a0No. Skip 201 and take Cs50 instead ",
            "\u00a0I took this course as a pre req for a Comp Sci major. Unless you need that, I would not recommend this course. I have yet to explore other CS courses but I would like to think they'd be better. ",
            "\u00a0No ",
            "\u00a0Yes, it definitely takes time management skills to pace out the homework, but otherwise it's rewarding work. ",
            "\u00a0For anyone who is interested in becoming a CS major, I recommend it as it does give a good overview of many topics in the major. However, it is in racket which is not the most applicable if you are looking to add to your practical skillset. For those who just want to try CS, I would still say it is a good course for that, though CS 50 may be a better choice. ",
            "\u00a0Absolutely. It was a lot of fun and very interesting. It is a very doable course, and it's really interesting. ",
            "\u00a0I would recommend this course to a CS major student, but not students outside of the CS department. Racket is a very good language to learn so you understand what happens with a computer and within functions, but this wouldn't be relevant to someone who just wants to learn how to code for fun or for a resume. ",
            "\u00a0Yes the material is very interesting ",
            "\u00a0I loved this class, but if you aren't a CS major, then racket really isn't useful. Its interesting, but not interesting enough itself to make a non major want to spend so much time on it. If you aren't a cs major, I'd still recommend if you like coding just to code. ",
            "\u00a0Yes, provides a great base on which to build if you want to take more CS classes in the future. ",
            "\u00a0This is for you're between this class and CS50. CS50 is a lot more work but probably more engaging. I wouldn't say you need to have a lot of programming experience (if any) to take 201, the learning curve is really steep for everyone. If you take 201, the first 2 weeks of term will be hell, but you'll get through it. Expect many visits to ULAs of varying quality for weekly problem sets in 201. ",
            "\u00a0Yes! ",
            "\u00a0If you want to take only one CS class so that you can have some programming experience, do NOT only take 201 (take CS50 instead). You only work with one language (Racket), which is close to completely useless in the real world (nobody uses it). However, if you plan on taking more CS courses, 201 can be pretty helpful. I feel like learning how to use a functional programming language really helped me develop my skills, and the material covers a good range of (useful) topics. ",
            "\u00a0only if you are comfortable learning material almost entirely on your own. lectures were not helpful ",
            "\u00a0Only if you're interested in computer science and are considering the major. It's too much work for something \"just for fun\", unless you actually enjoy this type of work. ",
            "\u00a0I would only recommend this course to a student if they were trying to complete the computer science major. I think that a lot of the content is very specialized to the computer science field. While I do think it is a good introductory course to get acclimated to the rigor of computer science at Yale, I don't think it is quite as good as CS50 in exploring what the field has to offer. That being said, the grade inflation in the course that helps students love computer science is a nice perk. ",
            "\u00a0Take it if you're going into the CS major and aren't already a functional programming genius or something. Do not take this class for fun, because that's not what you'll get out of it. ",
            "\u00a0I absolutely would. This course gets a bad rep for being theoretical, but you come out of it with such a deep understanding of how computers work, which I think is actually extremely important. I also just found this course to be extremely fun. The problem sets were very satisfying to finish, because each one you learned a new concept. ",
            "\u00a0To a non-CS major, no because it's fairly esoteric and is less about teaching programming and more about teaching CS fundamentals. For CS majors, I would not skip this class and move straight to 223 as it does provide valuable insight into a lot of lower level CS topics you would otherwise miss. ",
            "\u00a0I would recommend this class to people who really want to learn more about CS but have some background in it. The class really is interesting in how it teaches you how things like compilers work and how computers work. ",
            "\u00a0If you're looking for an intro CS class, take 201. This class will not teach you anything useful (the language, Racket, is not used for anything), but you will get very comfortable with recursion, Touring Machines, Boolean logic and everything else outlined in the syllabus. The homework is usually quite challenging but very rewarding once everything works. It was actually really fun. ",
            "\u00a0I would introduce it to students with minimal background in computer science, perhaps if they've only taken AP Computer Science in high school, since the class is good exposure to the actual science of computers and not just mindless programming. It would definitely not be suitable as an intro course for any student with no background in computer science whatsoever. ",
            "\u00a0Really thought provoking/will make you think differently. Definitely worth it to change the way you think about coding ",
            "\u00a0I would recommend this course only to a student really interested in learning about the theory of computer science, not the languages or strategies that make it up. The structure of the course was really engaging but the teaching was weak, the feedback not particularly helpful, and the only saving grace was the online lecture notes and the ULAs. If you put in the work, you can have a lot of fun with this course, but if you're expecting quality teaching, look elsewhere. I'm sure Slade is a great guy, but his teaching is really monotonous and he doesn't really explain any of the concepts. ",
            "\u00a0Yes i would. It has probably been the most time-consuming class ive taken here, but all assignments had a purpose and I learned a lot about computers and feel much more comfortable with coding now. ",
            "\u00a0Yes because it is important to understand concepts before coding ",
            "\u00a0Totally! It gives you the backbone of what a computer is and some basic programming techniques. ",
            "\u00a0I learned a lot in this course, but it was difficult. I would recommend it to anyone who wants to challenge themselves greatly in the field of computer science and become comfortable with recursion. ",
            "\u00a0Yes, if you're looking for a good introductory compsci course. This was my first compsci course at Yale and at first I was a little concerned that I'd be behind if I skipped 112 and just started with this one, but it turned out to be totally fine (I learned some HTML, CSS and Javascript in high school, but I really didn't feel like I had very much coding experience coming in). I know that Racket isn't really a very useful language in and of itself, but I've heard from other students that the way learning to code in Racket makes you learn recursion very thoroughly is helpful down the line, and I've also heard that once you learn one language it's a lot easier to learn others. I felt like this course had a lot of resources to support students and that's something that really makes a difference. ",
            "\u00a0Yes, you learn so much. ",
            "\u00a0Most likely not, there is little structure and it without prior knowledge, the class is almost impossible to follow. ",
            "\u00a0Yes! It is a wildly interesting course. ",
            "\u00a0Not a good class for anyone that has never done computer science before -- it's difficult to jump rights into Dr. Racket and recursion, especially in lecture style courses. ",
            "\u00a0I would and have already.  Its a great course for developing programming skills and getting more comfortable with how a computer works. ",
            "\u00a0Even if you don't need to take this class as a requirement, it would probably be interesting to take after CS50 IF you are interested in learning ABOUT computer science without really learning a computer language. In theory you would be able to teach yourself another language pretty quickly after taking this class. ",
            "\u00a0I would definitely recommend this course. Despite the rigor and hard word that is required, the course is really great at developing your computer science understanding and at learning how to implement some of this functionality into actual programs. You leave the class having learned A LOT. ",
            "\u00a0Yes, but reluctantly. The topics are interesting. If you already know what's being lectured, you can start homework in class. This is Computer Science more than Computer Programming, so you'll learn about historically significant computer science concepts, and \"simulating\" them in code. Not all lectures are necessary, but try to only skip when you really can't do it.\r\n\r\nIf you're thinking about skipping and starting with CS223, I would say only if you know a bit about C and Unix already.... 223 is a tough class and you want to soften the blow. ",
            "\u00a0No, as a student who was told that I had enough prior knowledge and experience in coding from high school I struggled greatly with the course, spent hours and hours a week on homework, and by the end still felt like I barely understood anything. It needs to be clearer that this course is intended for people with a decent amount of prior knowledge and experience. ",
            "\u00a0Yes, it is a good introductory class to computer science and you learn a lot about the concepts behind coding. ",
            "\u00a0It is a prerequisite for the CS major so they should take it if they want to major in CS. ",
            "\u00a0It is necessary to do the ca major but was not an overall well taught class. ",
            "\u00a0Yes, because students get to learn the basics of how computers really work, and understanding that helps them become a better programmer. ",
            "\u00a0Yes, it gives you a solid foundation in recursion which is very valuable for any student in CS ",
            "\u00a0If you are going to be a CS major, you will need to take this course. Otherwise, if you have experience with CS and want to learn more, I would not recommend this course. ",
            "\u00a0If the student is interested in CS, I would recommend this course. However, they should be prepared for long homework assignments. If the person just wanted to try CS for the first time, they are better off taking an intro programming course first. Prof. Slade is not a great teacher for those who have never seen code before because he is not very clear in explaining certain things. But, he is really nice and smart, and will help you if you seek it in office hours! ",
            "\u00a0I would not. I would probably lose their friendship for subjecting them to professor Slade. ",
            "\u00a0I feel that this course is a good preparation for the Yale Cs Curriculum. I would recommend this course for students who, like me, have learned a computer language or two, but do not yet completely understand CS principles. For those with more experience, I've heard it is fairly easy to jump into a more advanced course from the start. ",
            "\u00a0yes, good intro and equalizes student cs knowledge at the end ",
            "\u00a0Yes, if you want to seriously study CS, the familiarity with recursion and computational theory taught by this course is essential. ",
            "\u00a0The course is a great introduction to a lot of computer science concepts, so I would recommend it to anyone who is looking for that, but it doesn't help in advancing programming skills, especially considering that it uses Racket. Students definitely need prior experience programming. ",
            "\u00a0I would recommend this course to someone interested in learning a theoretical foundation for computer science. It isnt very applicalable, and it is not a light workload course. If you just want to learn certain coding skills, this is not the course to take. ",
            "\u00a0I am an upperclassman in STEM who voluntarily took this class (it was not required for my major). So if that sounds like you, here are my thoughts about whether you should take this class.\r\n\r\nI genuinely enjoyed CS201! The lecture notes were far more helpful than actually attending class, so I hardly showed up. But I nevertheless felt like I got a lot out of the class simply by working through the psets. I will say, the psets were surprisingly time intensive. I expected to spend like 5 hours a week on them, but in reality it was often around 10. Given, I have no background in CS whatsoever. The class is more or less graded on a curve, and if you're in my position you'll definitely have an edge on the freshmen in the class simply because you likely have better test-taking/time-management/knowing-when-to-ask-for-help skills. I found it very difficult to motivate myself to study for the exams, but was able to score consistently around median. For me, that's plenty good enough. If you want higher, I'm sure that would be achievable with a couple more hours studying than I put in. This class was definitely not amazing, and I would not recommend taking it instead of a class that you're passionate about. But if you're looking for a class you won't need to physically attend that's pretty fun, I would recommend CS201. ",
            "\u00a0Yes, I would recommend this course to a student interested in learning some of the basics of computer science. The selection of topics in the syllabus is both important and interesting. However, I feel it is a little bit patchy and leaves some holes in knowledge and could go a bit more in-depth. Although I walked away having done very well in exams, I still didn't quite know exactly what I had learnt and how it all tied together. ",
            "\u00a0I definitely would be I enjoyed the concepts covered very much. It is a very theoretical course and that is one of my favorite parts of CS. If you are more of a practical applications person you might not love this course. For example, the course is taught in racket which bothered a lot of people but I actually liked. ",
            "\u00a0I would recommend this course to another student who has to take it for the computer science major or is interested in computer science and willing to put in the work to be successful in this class. ",
            "\u00a0No. ",
            "\u00a0I would not recommend this course to a non CS major. To a CS major however, you should take this, as it is a major requirement. ",
            "\u00a0Yes! Lecture was pretty interesting, you learn a lot of really great topics and I have a greater love for computer science after. ",
            "\u00a0If you're interested in computer science, this class is a must-take. It teaches you a lot about theory and computer architecture and while the language isn't useful, you will come away with valuable skills. ",
            "\u00a0Yes great class if you love comp sci, otherwise dont take. ",
            "\u00a0Yes, as long as they have an interest in the subject matter. ",
            "\u00a0I would recommend this course to a student if they were a computer science major or if they wanted to get a general sense of computer science. ",
            "\u00a0Yeah. I enjoyed this course. Be warned though, the lectures are useless 50% of the time but entertaining/interesting 50% of the time. Also expect to have 0 TA support options. The queue was 3 hours long at times. ",
            "\u00a0This class is necessary for the computer science major, but Racket is not a very useful language. ",
            "\u00a0Not if a student only seeks to gain something they can put on their resume-- nobody programs in racket except for cs201 students. ",
            "\u00a0I would recommend the course because I believe it sets up a good foundation in computer science. ",
            "\u00a0Yes ",
            "\u00a0Don't take this class if you just want to learn a useful programming language, because it focuses a lot on theoretical computer science and uses Racket (a programming language that is not used at all in industry). That said, if you are interested in learning how computers work at a fundamental level or if you are a CS major, you probably should take this class. You may spend more time reading the online lecture notes than actually paying attention in lecture, but recursion will become second hand, and you'll feel a lot more familiar with some of the big ideas in CS ",
            "\u00a0If you have to take it as a requirement take it, but if possible take it after another CS course or with some type of backup plan for support. The ULA's work really hard, but the material is difficult, and it's very possible office hours and lectures may not get you all the help you need for psets and exams if the stuff doesn't come to you as naturally. Racket is also structured different from other programming languages, so it's more of a deeper dive into theory and computer architecture, and each week has a lot to cover. If you can take it with friends and form a study group of some kind do so, otherwise this class may be a lot to handle. ",
            "\u00a0Yes, a great intro to theoretical computer science. However, Definitely not for programming purpose. ",
            "\u00a0Yes, despite the non-practicability of Racket, 201 is an excellent introduction class for all students who have some interest in computer science. ",
            "\u00a0Its required for the major, and you will learn a lot about computer programming and how a computer functions, but most of it will be self taught since the lectures are not helpful at all. ",
            "\u00a0I would recommend this course to anyone who is interested in the fundamentals of computer science, the very basics of how computers work. Don't expect to be coding the whole time: the course is as much about conceptual understanding of computer science ideas as it is about learning to program.  Start the psets early so that when you run into problems you can get help from the ULAs in time. ",
            "\u00a0No. ",
            "\u00a0Yes if you want to major in CS because you have to take it ",
            "\u00a0Yes. It's required for CS majors, but if you want to know how computers work, it's also an amazing course for that. ",
            "\u00a0Yes, it is a good intro to CS for people who have already done some programming. Working in Racket is challenging unless you have experience with recursive languages, but everyone is on the same page. ",
            "\u00a0Yes. This is the introductory class. Caution, dont take it without prior CS knowledge! ",
            "\u00a0I would definitely recommend this course to any prospective Computer Science major. It gives a pretty comprehensive introduction to theory, though it is worth noting that I have had coding experience before. For students without prior coding experience, this course might seem slightly difficult. ",
            "\u00a0I would recommend this course to another student. It introduced computer science concepts well. ",
            "\u00a0I think so. I really considered skipping 201 and taking 223 instead, but I really did enjoy the info in 201. Learning about computer architecture etc. might not be necessary for 223, but it is valuable by itself. ",
            "\u00a0If you already have some CS, or are looking to major in CS, then take it and be done with it so you can access more classes. If you're just generally interested in CS, or just need a QR credit, you may want to look elsewhere. ",
            "\u00a0Definitely in order to learn basic CS concepts and how a computer works. ",
            "\u00a0Yes, if you enjoy computer science chances are you are going to like this course. The instructor is great. While Racket can be frustrating at first, once you get used to it, it is no more than a minor inconvenience. "
        ]
    ]
}