{
    "crn_code": "23388",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            0,
            1,
            18,
            25,
            11
        ],
        [
            2,
            4,
            16,
            19,
            14
        ],
        [
            1,
            2,
            5,
            29,
            18
        ],
        [
            0,
            2,
            11,
            23,
            19
        ],
        [
            0,
            8,
            18,
            23,
            6
        ],
        [
            0,
            2,
            21,
            23,
            9
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Learned about good coding practices and how to code in C, C++, and Matlab! ",
            "\u00a0Learned A TON about how to use C, C++, and Matlab. Dr. Bennett is such a clear lecturer, and she is so diligent in posting clear lectures and sample codes, that I learned just about as much as I possibly could have about these things given the time that we had. I learned about how the computer understands what we tell it via code, and I learned how to code efficiently to make the computer have to do as little work as possible. A tremendous introduction to coding, and I can easily say that I've learned more than one would have in either CS 50 or 112. Take it! ",
            "\u00a0-C, C++, Matlab\r\n-Object-oriented programming \r\n-Problem-solving with computers ",
            "\u00a0Coding and problem solving. ",
            "\u00a0Ability to code and problem solve. Learned the basics of three languages: C,C++, and MatLab. ",
            "\u00a0The basics of C and C++ programming languages. The patience to debug a problem that would take a minute to solve for someone experienced with coding, but a week for me. ",
            "\u00a0Learned object-oriented programming for engineering computation, graphing, file I/O, plotting, and other tasks. Skills include loops, if statements, functions, structures, and classes in C & C++, with 2 weeks spent on Matlab graphing. ",
            "\u00a0In this course, I learned the programming languages C, C++, and Matlab. ",
            "\u00a0I learned how to program in c and c++ and Matlab. ",
            "\u00a0I learned the basics of C++, C, and Matlab ",
            "\u00a0C, Matlab, C++ ",
            "\u00a0I developed my basic computing skills relating to C, Matlab, and C++. I learned a lot about logic and engineering principles through the psets. The psets also challenged my patience and developed my attention to detail and revision skills. ",
            "\u00a0I learned how to code in C, Matlab, and C++. ",
            "\u00a0Fundamental concepts of programming in C, Matlab, and C++. ",
            "\u00a0I did not have previous coding experience, so everything in the course was a new for me. We go through C, C++ and short unit on Matlab, with cool application questions on the homework. This class teaches you how to think and problem solve logically. ",
            "\u00a0I gained proficiency in writing code in three different languages, and learned how to better solve problems with a computer ",
            "\u00a0Basic knowledge of C, C++, Matlab ",
            "\u00a0I learned how to code in C, Matlab, and C++. ",
            "\u00a0Learnt some coding ",
            "\u00a0Programming with an engineering focus ",
            "\u00a0Learned a good bit through the problem sets, and feel confident with the languages learned. ",
            "\u00a0Programming in C, C++ and MATLAB, ability to approach problems from a computational perspective. ",
            "\u00a0This course taught computing skills, obviously, but also critical thinking and problem-solving skills through determining what code to write and debugging that code. ",
            "\u00a0I gained practical skills with C/C++ and Matlab, as well as better problem solving ability and patience for debugging. ",
            "\u00a0problem solving, coding in c and c++,  methods of debugging and general approaches to computational problem solving ",
            "\u00a0I learned the basics of coding. I went in with no knowledge about computer science, and I left feeling comfortable with the fundamentals. I learned the syntax and logic behind basic codes. ",
            "\u00a0I learned how to code in C, C++, and Matlab ",
            "\u00a0I learned how to code, from scratch. ",
            "\u00a0generous dose of C/C++, some MATLAB;\r\nbasic style and concepts applicable to all (or most) programming languages ",
            "\u00a0A fundamental understanding of coding and how computers process information ",
            "\u00a0Learnt more C/C++ as well as very little bit of Matlab ",
            "\u00a0Programming in C, MATLAB, and C++ ",
            "\u00a0Learned how to code for the first time ",
            "\u00a0I learned C, C++, MATLAB, and the basics of programming/how to think like a programmer. ",
            "\u00a0This was my first coding class, so I learned a lot about computers in general, how to code, and what opportunities there are in coding for engineers. ",
            "\u00a0I developed a knowledge of the of the hardest computer languages, in the process learning the basics of how computers work. ",
            "\u00a0I learned how to code in C, Matlab and C++. ",
            "\u00a0This class teaches logical problem solving, organization, and of course coding ability in C, Matlab, and C++. I learned how to write code, how to think about writing code, and how to debug "
        ],
        [
            "\u00a0Since mid-semester, the topics learned in class, and the following assignments are remotely related ",
            "\u00a0The course was a really good intro to coding, and the p-sets were really good practice and interesting to do. Going through code during lecture was a little dry at times, but overall it did help with understanding. The sample codes and lecture slides were also really well put together and thorough. ",
            "\u00a0Dr. Bennett is the best STEM teacher I've ever had, and it wasn't close. She is the biggest strength because she lectures so clearly and is so thorough with everything she does. When she corrects a small typo in the notes or homework, she'll send out an announcement just to make sure that nobody is accidentally using an old copy of the assignment. She's that diligent. I really can't say how it could be improved. If Dr. Bennett teaches this, take it, regardless of your major! I'm AMTH, and I would strongly recommend this course over CS50 or 112. You learn so much useful stuff. ",
            "\u00a0Strengths - Great Peer Tutors; Professor Bennett is helpful and accessible; sample codes\r\nWeaknesses - not really a great way to learn how to program if you know nothing ",
            "\u00a0This course starts up rather quickly, but all the information students need to complete assignments can be found somewhere in the course materials. ",
            "\u00a0The lectures were very boring and consisted of going through sample code, but the problem sets really reinforced the material we learned. The peer-tutor/TA help sessions were very helpful for debugging and working with others. The problem sets were very clear, and the lecture slides were very organized. I felt like I learned a lot of fundamental coding skills. ",
            "\u00a0The course is okay for an intro-level. There was a disconnect because the professor did not make much of her own material. In class every day, she just read the lecture slides that Professor Long wrote long ago. There was not much of an incentive to go to class, as Professor Bennett did not \"teach\" much, in the sense that she mostly just read slides, and what she read wasn't as intensive or as applicable as the problem sets or exams.  The class could be improved by classes having more learning. Classes should have more examples, and students should be taught things that they are expected to learn, instead of having to teach themselves how to code outside of class. ",
            "\u00a0The course was good although sometimes the classes dragged on and got boring towards the end. I don't like the tests because I like to take my time with coding and check for errors and debug and such but with only an hour and half or so to do a full code during a test was difficult. I would run out of time and my grade would suffer. ",
            "\u00a0The professor has good notes and provides a lot of office hours for help. Weaknesses: The psets and exams are too difficult for the \"beginner\" level and take a ton of time. ",
            "\u00a0This course was definitely structured such that people with prior coding experience had a rather significant advantage. Things moved at a pretty fast pace. ",
            "\u00a0One strength of this class is its natural progression through topics, slowly introducing greater and greater challenges to test the student. \r\nOne major weakness is the short, unproductive clip of Matlab that we do. With only 2 weeks of material and psets on the environment, it is difficult for students to really adapt to and learn about Matlab sufficiently. It would be more productive to allot more time to this topic, especially because of Matlab's importance in the engineering world. ",
            "\u00a0The course is definitely challenging at the beginning for first time coders, so be prepared to put in more time and effort than your classmates. Beth's teaching a powerpoints are very helpful and so are the TAs and peer tutors in office hours. This course is also extremely well organized. ",
            "\u00a0The course is very well taught, but sometimes the homework assignments were extremely complicated, and it was unclear what exactly we had to do in certain parts. In particular, the final two assignments were difficult because we did not write the main class, so the purpose of each function was sometimes hard to determine. I also think that the grading on the homework assignments was unnecessarily harsh at times. ",
            "\u00a0I liked the fact there was a help session every day of the week, which gives you more flexibility in your schedule and all the time you need to get your questions answered. If you are new to coding like me, you will appreciate it. ",
            "\u00a0Amazing course!!!! ",
            "\u00a0Strengths - really caters to students' interests, covers appropriate content\r\nI can't think of much to change about this class to improve it. ",
            "\u00a0Strengths-Structure of office hours/willingness to help of ULAs/TFs\r\nWeaknesses-I didn't feel like I learned much of the \"intuition\" behind programming. Perhaps working in some short quiz-based exercises during class would help ",
            "\u00a0It was really well taught and really well structured!! Professor Bennett was so helpful and really cared about her students. She was really well organized and it made the class really rewarding. ",
            "\u00a0Problem sets are fun, but class is super boring. Slow, dry, and do not get much out of it. ",
            "\u00a0Strengths: The problem sets are amazingly interesting and actually fun to do, regardless of their difficulty. Introduction to different kinds of programming languages helps you get oriented with computing\r\nWeaknesses: Lectures are sometimes not very beneficial beyond the slides, even though Prof. Bennett is absolutely amazing ",
            "\u00a0This course's heavy weight on problem sets was very nice because many of the students in the class were new to computing, so it allowed us to take the time we needed on the course material to actually learn it before we had to write code. The lectures were always very helpful and the explanations of most topics were very thorough. Overall, it was just a really well-organized and well-taught course.\r\n\r\nI think the MATLAB section could be improved quite a bit. Much of the material was confined to script examples, so looking back at the lecture slides wasn't much help and the sample codes were somewhat difficult to understand. The CBPTs were able to help with this a lot, but it would improve the course to give more time to the topic (aka not sandwich it between the last C lecture and the exam over C). I also think some of the problem set instructions could be improved. It got frustrating when there was a simpler or easier way to write a section of code, but we weren't able to use that method due to the assignment details and for seemingly no reason. ",
            "\u00a0The strengths of this course were that all of the material was presented in a clear and understandable way and the canvas site had so many great resources (like lecture slides and sample code). The main weakness of this course were that lectures were rather slow paced. ",
            "\u00a0Strengths: good order of topics, interesting problem sets, very organized. Weaknesses: lectures were not extremely engaging ",
            "\u00a0I think that the topics are interesting and the projects are cool. However, the lectures, given the nature of the material, are very dry and hard to stay engaged with. I also think that in the grading of the problem sets the emphasis should be more in the functionality of the code rather than small programming style things. ",
            "\u00a0This course should designate whether it is an intro CS course or not and cater to that specific audience. ",
            "\u00a0Its really good for teaching to basics of coding through some fun psets. ",
            "\u00a0Strength:  Prof. Bennett really cares about the quality of the course and well-being of students.  You also get your feet wet in multiple fundamental programming languages, which can also become a weakness (see below).\r\nWeakness:  Since the course covers 3 languages (C, C++, and MATLAB) in one semester, the level of engagement with each was arguably limited.  I think that the course could be improved by just getting rid of C++ altogether and focusing on just C (with the current 2-week MATLAB segment in the middle). ",
            "\u00a0I had never taken a computer science class before, and this class was a difficult transition. Though it was possible for me to succeed on problem sets, I found it took me much longer to complete them than my friends who had previous coding experience. I was also unable to truly understand what the computer was doing with each command. I could understand what each command did, but I really struggled to find resources that could explain what exactly the computer was doing. Dr. Bennett was always apt to answer questions, but I couldn't very well ask her about every command. ",
            "\u00a0Good course overall ",
            "\u00a0Not a great class for someone with no previous coding experience ",
            "\u00a0It was hard to learn the material solely from lecture slides, so more sample codes/more in-depth review of how they worked in class would have made lectures more helpful. ",
            "\u00a0Strengths: thorough\r\nWeakness: not much community in the class, all the lectures are a bit sterile too. It would be nice to build out from the lecture slides more with more analogies. ",
            "\u00a0It's hard to assess this, because I feel like I learned most everything by doing psets and that was just fine. The lectures were thorough and very good but just not that useful for me. ",
            "\u00a0The course was taught well.  The biggest point of improvement would be explicitly outlining good coding style, as well as being more specific with expectations.  For example, I have created perfectly working code multiple times, but I lost points on things that were not explicitly stated in instructions or class notes. ",
            "\u00a0There are many resources to help with the class. The Canvas page is very well organized and filled with useful files. Sometimes, the lectures covered things that we never used and I don't know if it was helpful to include them without practice. For instance, maybe add a recursion problem to homework. "
        ],
        [
            "\u00a0Would recommend! It was a lot of fun and also helped me become better at coding and picking up new languages. ",
            "\u00a0Yes yes yes! Dr. Bennett is THE BEST. She cares so much, always responds to emails right away, has lots of office hours, keeps everyone in the loop about what's going on in the course, and is just such a clear lecturer. Regardless of your major, if you want to learn useful coding stuff to apply to any sort of STEM field, this is your class and prof! Don't go through Yale without a Dr. Bennett class. ",
            "\u00a0Yes. I learned a lot, and I do feel prepared to approach engineering problems from a programming standpoint. ",
            "\u00a0I would recommend this course to another student who is familiar with coding because it the increase in difficulty in the first few problem sets are rather sharp. ",
            "\u00a0Yes, the fundamental programming skills learned will be useful for engineering and research tasks! ",
            "\u00a0I would recommend this course to a student that wants to learn how to code in C or C++. If you're taking it for Matlab, take another course. If you're taking the class for credit, you're fine, but if you want to take it to really learn, try to take it with a different professor. ",
            "\u00a0Maybe (depending on the person). This course isn't for everyone but I'm sure there are some students very passionate about CS who would enjoy this class. ",
            "\u00a0If you have to take this class for your major,  I recommend learning a bit of C and/or C++ before the semester because you will have a very tough time if you don't. ",
            "\u00a0I think overall this was a reasonable intro to computer science for engineers but would recommend getting a little coding practice in on your own if you have none before taking this class. ",
            "\u00a0I would recommend this course to a student because it's a really good and structured way to learn C, C++, and a little Matlab. ",
            "\u00a0Yes, this is a great way to get started on learning C, Matlab, and C++. Definitely take it if Bennett is teaching! ",
            "\u00a0If you're an engineering major, this is likely a prerequisite course. If you are not an engineering major, I would shop both this and the CS equivalent. I was told this course is more practical and application based. ",
            "\u00a0Yes - you learn how to code in a multitude of languages, specifically solving problems that involve a lot of mathematics.  The skills you gain here are useful to have at a job. ",
            "\u00a0Yes! Especially with Beth Ann Bennett ",
            "\u00a0Yes. ",
            "\u00a0Yeah I would, its a great intro for a language that is actually useful today, and great to see if you are into CS or not. ",
            "\u00a0Yes.\r\nProf. Bennett is a really amazing teacher and she wrote individual problem sets herself for the course. The problem sets are all geared toward real life computational problems that may be faced by engineers and scientists. The course is a great choice whether you've had some programming experience or none. Be aware though, that the goal of the course is NOT Matlab. Don't take this course if your aim is only to learn Matlab. ",
            "\u00a0I would recommend this course to another student because it encourages critical thinking and problem-solving. The professor, TAs, and CBPTs are all incredibly helpful and want us to succeed in the course. The topics covered in the course are relevant to science and engineering (as they are advertised to be) and just good skills to have in general. ",
            "\u00a0If this class is being taught by Dr. Bennett, then I would recommend taking it since she is committed to helping students. ",
            "\u00a0I would recomend this to a student that wants to learn C, but not to a student that wants to understand CS on a higher level. ",
            "\u00a0I would recommend this. Professor Bennett is a great instructor and most of the TAs and peer tutors were great. A lot of work at times but good structure and useful knowledge. ",
            "\u00a0Yes I would. I think that it is a good introduction to programming--especially for engineering students. ",
            "\u00a0As someone that took this course with some prior CS experience, I would recommend this course to a student that already has a decent amount of computer science experience and wants to learn C and C++. If you don't know any CS, I would recommend taking a true intro class like CS50. ",
            "\u00a0Yes, especially if they've never coded before as its a very good intro course. ",
            "\u00a0This course is difficult for someone without previous coding experience. It is doable, but it takes a great deal longer to complete the problem sets without prior knowledge. ",
            "\u00a0Yes, but only with previous experience ",
            "\u00a0Yes, it is a great introduction to programming. ",
            "\u00a0Only if they needed to take it. ",
            "\u00a0Yes absolutely! Especially with Professor Bennett. I never thought I would like a computer science course but this one was great and I learned tons. ",
            "\u00a0Yes I would recommend because this is a great introduction to coding. ",
            "\u00a0This course is a great start to coding if you have no experience and also don't want to be a programmer "
        ]
    ]
}