{
    "crn_code": "21888",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            1,
            4,
            5,
            4
        ],
        [
            1,
            0,
            6,
            6,
            1
        ],
        [
            1,
            3,
            1,
            9,
            1
        ],
        [
            1,
            2,
            7,
            5,
            0
        ],
        [
            0,
            0,
            6,
            7,
            1
        ],
        [
            0,
            1,
            6,
            6,
            1
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Foundations of Python, Unix, SQL ",
            "\u00a0You learn the nuts and bolts that are essential to coding--recursion, object oriented programming, virtual machinery, cryptography, and basic problem solving skills. ",
            "\u00a0This was my first computer science class, so learned a lot about python, data structures, and data security. I don't know how other CS classes at Yale are though so not sure I can say much. ",
            "\u00a0How to use Python, SQL, machine architecture, UNIX ",
            "\u00a0I developed a working proficiency in Python and UNIX for Linux. We also learned about SQL search queries and Bash-Script Programming. We paid attention to recursion, Object-Oriented Programming, some Abstract Data Structures (Stacks and Queues in depth, some Heaps and Hash-Tables), the Python interpreter, simple crypto and more advanced topics like Decorators. ",
            "\u00a0In this course, I learned how to code n python. This is a tremendously useful skill, and I'm very fortunate that I was able to learn this skill. I found the material in this class interesting, and can say that I genuinely learned the material  therefore I'm very glad to have taken the course. \r\n\r\nIn this course, I also learned a bit about machine structure. We also dabbled in other CS languages like UNIX, SQL and shell script. ",
            "\u00a0The class touched on a number of different topics in Python, although honestly I didn't find them very well connected nor important. ",
            "\u00a0Python, Unix... exactly as syllabus describes "
        ],
        [
            "\u00a0Don't have lecture in the morning far from campus. Almost nobody would come on Fridays. ",
            "\u00a0The course does not flow cohesively from one topic to the next, and the instruction is not always clear. ",
            "\u00a0The class was very well organized. I always felt it went at a good pace. The fact that Slade reviews a lot of material from class to class and there's also a lot of overlap with CS50, etc, which may frustrate some people but I liked it. The class website is organized in such an elaborate system that it is sometimes hard to find files and track stuff down when reviewing. I liked that practice tests were provided - they were very helpful.\r\n\r\nAmple TA office hours was super helpful! ",
            "\u00a0The course was designed to be taught in depth with Python and UNIX and lighter on secondary material such as SQL and shell-script programming. In this regard, the course met this goal. I feel that a have a working proficiency in Python and UNIX and I was glad that I was exposed to other languages too, albeit quite lightly. The ULA Office Hours were well staffed and very helpful, never crowded due to the smaller size of the class. Material is available online, and exams were fair.\r\nOne thing that could improve student learning in this course was if some more introduction was given to the problem sets. Frequently, I would have to come to Office Hours to understand the assignment. This was a minor inconvenience, but also not a big deal since seeking help made be better, and I also spent so much less time on assignments done in Office Hours than I would have spent on them alone. ",
            "\u00a0Strengths: The homeworks (especially those in the beginning of the course) test the material that we have learned in class. The ULA's were also fantastic. \r\n\r\nWeakness: I think it was ridiculous that we took the time to learn shell-script. It's incredibly unclear why this was necessary. ",
            "\u00a01. Entering the course, I didn't have a clear grasp of Python, and I think the course rushed through a lot of the language.\r\n2. There was no clear structure to the course, and we jumped back and forth from UNIX to recursion to regular expressions in one lecture.\r\n3. There were no clear notes or lecture guides, Slade sort of rambles about different topics from here to there, codes them along the way, then uploads the code after - which isn't very helpful for reading or understanding anything. ",
            "\u00a0Some things like the python virtual machine/unix, I dont really see how its useful to know.  Would love to have examples of cases in practice where this stuff is used by professionals. "
        ],
        [
            "\u00a0I would recommend this course as an intro to coding if someone wants to learn Python. It doesn't do as much data analysis as it could, but it's CS not S&DS. ",
            "\u00a0This is a great course to take if you have some/minimal experience in CS. It is a very good introduction to Python and coding in general and you will be able to use Python to create and solve problems by the end of the course. ",
            "\u00a0Yes! ",
            "\u00a0Yes! I hadn't taken CS in a while, and this class provided very practical skills such as how to use UNIX and python. ",
            "\u00a0I recommend this course to students who want a useful alternative to 201. Many complain about 201 in racket, but 200 offers Python, UNIX, Object-Oriented Programming and a good introduction to abstract data structures, SQL, and shell-scripts. I enjoyed the course also because it was smaller, meaning the Office Hours were never crowded and very useful, and most problem sets can be finished in a reasonable time (for the CS-dept.). Prof. Slade does a good job showing important tips for the problem sets and making lecture material available online. ",
            "\u00a0I would recommend this course to a student looking to take a CS course after CS 112 or CS 50. I think it goes a step further in discussing some concepts, like data structures. I would not recommend this course as a first CS course. ",
            "\u00a0Honestly I wouldn't, there are other ways to learn Python - and I think I came out with a bunch of random topics learned that I won't really use. "
        ]
    ]
}