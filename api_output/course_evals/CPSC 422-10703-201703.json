{
    "crn_code": "10703",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            0,
            1,
            4,
            6,
            7
        ],
        [
            1,
            1,
            4,
            6,
            6
        ],
        [
            1,
            4,
            0,
            11,
            2
        ],
        [
            0,
            4,
            5,
            8,
            1
        ],
        [
            0,
            0,
            2,
            8,
            8
        ],
        [
            0,
            0,
            1,
            7,
            10
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Concurrency, how hardware relates to software, cpu scheduling, virtual memory, processes - how these are all implemented. Where and how information is actually stored on your computer, what your compiled code is actually doing. You will walk away with a solid understanding of how computers work. ",
            "\u00a0Knowledge of how operating systems are implemented. ",
            "\u00a0How an operating system works, the layer approach, and how to write OS code ",
            "\u00a0You learn how to write good, clean, pure, succinct, self-documenting, esoteric, lean, mean, fighting-machine code. It's not code the Jedi would teach you. This is some next-level stuff that, if you survive, your newfound enlightenment will guide you through even the darkest, densest text-based guides written 30 years ago. I can't promise anything, and you didn't hear it from me, but you may acquire superpowers upon finishing the file system pset. Remember that insane function you had to use in 323 called fork? Remember how mind-bending it was that your program suddenly split into two copies of itself? And the function returned two values at the same time? Buckle up kiddo, 'cause you're about to go for a wild ride as you *implement it*. From scratch. That's right. Ever see Captain America? Yeah. Taking this class is like going from skinny Chris Evans getting bullied in an alley to shredded, star-spangled Chris Evans flexing his traps while he blows up Nazis with his shield of glory. Professor Shao will hand you that shield of glory. At first you'll drop it on your foot and scream in pain as he chuckles at your struggle. But he won't just sit there. No. He will give you the best, most intuitive explanation there is on how to use that shield. Wanna know why? Because he made it. You are going to be sitting in class listening to the beautiful voice of the man who choreographed the CREATION of that behemoth you will be trying to wrap your pretty little head around. And you will. And you will come out of this class a truly better programmer. In closing, let me put it this way: \"You don't take OS, the story ends. You wake up in your bed and believe whatever you want to believe. You take OS, you stay in Wonderland, and you get to see how deep the rabbit hole goes.\" ",
            "\u00a0Learned a lot about building an operating system from the ground up. Also an experience of learning to program when severely handicapped in terms of resources available (e.g: debugger is different and often less powerful, errors are much harder to track). "
        ],
        [
            "\u00a0Strengths - there is a lot of material you will cover. Weaknesses - lectures were sometimes confusing, psets are very difficult. It would have been nice to have a lecture on x86 assembly. ",
            "\u00a0A very good basis of how OSs are implemented. Great hands on experience on building one. However, some very low level details are omitted, and those detail might be important for linking the many components of the OS together. ",
            "\u00a0Strengths - the labs, for the most part, are really great. I think I learned a LOT from the labs in general. The midterm is also mostly fair, although I wish there was more review. Overall, the course is tricky but definitely manageable and I felt like it was fair, and I learned a lot.\r\nWeaknesses - more office hours would be really helpful. Sometimes, Professor Shao's lectures were not that related to the labs, so it was a little confusing. Some of the wording on the labs was also unclear. I also wish there was no lab due the day after Thanksgiving break. The midterm also had questions that were related to the labs, but the correct answers weren't released for the labs, so if you received points off on the lab you would also get points off on the midterm without any feedback as to what was wrong. ",
            "\u00a0The biggest weakness of the course is that the material we learned in class was not very applicable and relevant to the labs. Professor Shao expects students to learn how to implement the lab exercises by themselves, which is especially difficult in such a low-level class with few online resources to help. I feel like we should have received some amount of instruction before the labs to give us some insight into the labs. ",
            "\u00a0The lectures are very lifeless and often do not cover the material to the depth that is required by the assignments. The assignments, however, were very well written. ",
            "\u00a0Sometimes the homework specs were somewhat unclear. I also wish we had more practice with the info presented in lecture, which seemed separate from much of the homework (but not all). "
        ],
        [
            "\u00a0If you are really interested in low level systems, take it. Otherwise, if you are considering taking it because people say it's a core CS class, I would not recommend it considering how much work it is. A lot of what you do is what you learned in CS323, only now you have to implement it. Implementing it is hard because you work on a small part of a very large code base, and it can be very difficult navigating that and figuring out what to even do. There aren't actually that many lines of code you need to write, but it's hard to know where to start. ",
            "\u00a0Yes, please know that this class is super hardcore. ",
            "\u00a0You'll learn a lot about OS, and feel really great when you solve that bug at 4am. That said, it is a decent workload (although, in my opinion not as bad as 323). At times, the course is definitely tailored to the \"hacker-boy\" stereotype which may be a turnoff, but I thought I learned a lot and generally enjoyed it. A word of caution: make sure you pick a project partner that is equal matched to you in ability. I had an awesome partner and we both were equally smart (or dumb...) so I felt like I always did about half of the labs and learned a lot. Other people had different experiences because that wasn't the case. \r\nAlso, the midterm is sorta hard - make sure to study. Start the labs early, and feel free to use the late hours throughout the semester. ",
            "\u00a0I don't think CPSC422 was a well-taught course, but I would still recommend any CS student to learn OS because of how critical it is to computer science. ",
            "\u00a0Great CS elective. Lectures are meh, but problem sets are well structured, interesting and intellectually challenging. Take it if you want to take a good CS elective, want to understand how operating systems work, or learn good large scale systems design ",
            "\u00a0If you're a CS major, you'd be better off taking the course. You come out with a much better understanding of how the basic components of an OS function, and this is an important skill. However, be prepared to spend long hours hunting down really subtle bugs, especially if you start the assignments a week before they are due (instead of the full 2 weeks). Use your late hours wisely. Zhong Shao is also a very mediocre instructor, and won't be of much help when it comes to assignments. ",
            "\u00a0Yes! Good, rigorous elective in the CS department. ",
            "\u00a0Teaches you the guts of how operating systems really work.  The psets in this class have less \"hand-holding\", meaning that they lack the detailed specifications of 223/323.  This doesn't mean that the psets are necessarily harder to implement - it just takes some time to figure out what the labs are actually asking for and how it relates to the concepts in class.  Would recommend if you're interested in more systems classes and are willing to spend long hours on the psets. "
        ]
    ]
}