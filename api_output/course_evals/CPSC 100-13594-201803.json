{
    "crn_code": "13594",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            0,
            5,
            29,
            39,
            61
        ],
        [
            4,
            6,
            23,
            52,
            50
        ],
        [
            1,
            6,
            15,
            59,
            53
        ],
        [
            0,
            14,
            19,
            70,
            32
        ],
        [
            0,
            5,
            25,
            62,
            43
        ],
        [
            0,
            1,
            12,
            49,
            73
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Understanding of computer science concepts and their practical application in our society. Coding. ",
            "\u00a0Learned how to code using Python, C, Javascript, HTML, CSS, SQL ",
            "\u00a0I definitely learned how to better think analytically and to break down my thoughts in a way that a computer could then understand. It really changed the way that I approached problems and helped with my problem-solving skills (oh and teammwork too - could NOT have gotten through this class without teamwork). ",
            "\u00a01. Basic understanding of how different programming languages work;\r\n2. Basic coding skills using C, python, JS, etc.; ",
            "\u00a0Understanding of computer science and the way computers work and process information.\r\nProgramming in C, Python, using SQL, HTML and CSS.\r\nDesigning and building web applications.\r\nData processing.\r\nProblem solving. ",
            "\u00a0You learn C, Python, HTML, some CSS and Javascript, and SQL. I had taken ENAS 130, and this class is 100x better. I actually understood concepts in this class, and we learned valuable skills that can be used later in life. ",
            "\u00a0I learned a ton of programming and some computer science. You start with a tiny bit of Scratch, then jump into a lot of C. During the second half of the semester did more Python, HTML, and JavaScript. I even learned how to make an app in my own time by using the info I learned in this class and I had never programmed before. ",
            "\u00a0C, SQL, Python, HTML ",
            "\u00a0I got a nice introduction to coding in C, Python, HTML, and JavaScript. ",
            "\u00a0Problem solving skills, attention to details, patience. ",
            "\u00a0I came into the class with basically no experience in coding. I'm now pretty confident in the basics of C, Python, SQL, and HTML; we've dabbled with JavaScript as well. ",
            "\u00a0As I want to transition to a product management career, it was important to me to complement my understanding of the world of computer science through those lessons. While I already had some experience managing IT projects (hardware mainly), I felt like I needed to get some deep understanding of the tools software developers use (C++, Python, Javascript, HTML, CSS, SQL, Model View Controller, etc...), why they choose one over another, how a web page works, how to build one, etc...and while I was taking MGT 660, I wanted to have some more hands-on experience to feel more comfortable around software developers. I am therefore very thankful that I could learn all this stuff and highly recommend the class to whoever is interested in switching to that industry. ",
            "\u00a0I learned some of how code works, such as how written code is changed to binary, and how memory storage works. I also gained some experience coding using C and Python especially, and learned some of how web design is handled. I learned several of the variables used in programming, and especially gained a greater understanding of arrays. ",
            "\u00a0I learned different programming languages and how to better teach myself CS. ",
            "\u00a0I learnt a more comprehensive understanding of the underlying concepts behind coding - and learnt to code in Python and deal with databases in SQL. In addition, the class also goes through C. ",
            "\u00a0Better general understanding of how websites (like this one) work. ",
            "\u00a0I was able to become a better programer after taking this course, and will be using python to code for internship interviews for the upcoming summer. ",
            "\u00a0learnt a lot of intro CS ",
            "\u00a0In this course, you learn the basics of programming and the foundations of a bunch of different languages, including C, Python, and Javascript to name a few. You learn about critical thinking and how to break a problem into logical steps. ",
            "\u00a0I had never coded before this class. I learned how to figure things out using the internet/trial and error, how to approach learning a new coding language, and the basics of several coding languages. I honed a mindset of problem solving. ",
            "\u00a0Python and C Programming ",
            "\u00a0How to teach yourself and control your emotions ",
            "\u00a0I was able to learn sooooo much about computers and programming and how effective learning through doing or seeing others do was. This course taught me how to code and also how to use the new information I learned to continue learning through other resources in order to feel more confident in the material outside of the course's scope. ",
            "\u00a0Basic programming skills which are necessary in the world we live in today. A brief understanding of the CS paradigm. ",
            "\u00a0C, Python, Web development (javascript, html, css, Flask, Jquery), foundational understanding of computing, abstractions, security. ",
            "\u00a0I learned the basics of so many languages. This course gave me insight into what computer science problems look like. ",
            "\u00a0You learn a variety of languages including C, Python, JavaScript, SQL, etc. but does not go into super depth for each one. You also learn a little bit of computer science basics, like memory, recursion, and a little bit of data structures, etc. ",
            "\u00a0How to code the basics of different languages ",
            "\u00a0Survey of important programming languages. ",
            "\u00a0I learned to program in C, Python, JavaScript, SQL, HTML and CSS and have a strong foundation for learning new languages. ",
            "\u00a0Got a good understanding of various topics of computer science and a feeling for what it is and can do. ",
            "\u00a0I learned some depth in C and a lot of depth in the rest of computer science. I learned how to learn about CS (where to search, how to google, how to deal with errors). I got a really good sense of lots of different things I can do with CS which expanded my idea of what I can do with this subject. ",
            "\u00a0Computational thinking, C, Python, HTML, CSS, Flask, Swift, JavaScript, SQL ",
            "\u00a0I have learned to program in many different languages and have also learned more about the conceptual ideas about how code works and ways to make code more efficient. ",
            "\u00a0I had extremely little computer programming experience prior to taking this course, and the course definitely provided me with a strong introductory foundation to programming and \"thinking like a computer scientist.\" I think that I am better equipped to work on programming projects on my own or take more advanced computer science classes having taken this course. ",
            "\u00a0computer languages and web application ",
            "\u00a0The basics of programming and an exposure to a number of languages ",
            "\u00a0I learned a lot from this course. I gained a solid basic understanding of computer programming but also was exposed to a number of new programming languages. One of the biggest things I've gained is the ability to problem solve my way through programming issues on my own; I have .a new confidence in my ablities to solve issues that require programming. ",
            "\u00a0I learned basic competency in Python, C, HTML, and Javascript. More importantly, I learned how to google things really really well ",
            "\u00a0Coding and problem solving in C, Python, HTML, CSS, and JavaScript. ",
            "\u00a0Broad overview of programming, focus in C, python, and html. ",
            "\u00a0I learned several programming languages: C, Python, HTML, CSS, Javascript, and SQL. At the start of the semester I learned how to approach problems from a programming mindset. I learned about data structures, web development, and several other skills. Perhaps most importantly I learned how to learn new languages and skills on my own. ",
            "\u00a0Learned how to code in C, Python, HTML, and Javascript ",
            "\u00a0One of the best experiences I have ever had here at Yale. The course is such an experience: you will not find this type of learning anywhere else. I think that I learned a lot more than computer science, but rather about how the community of computer science functions. ",
            "\u00a0I learned concepts of coding and how to program in various languages such as C, Python, and HTML ",
            "\u00a0This course taught a lot of basic skills for computer science but felt more like independent learning and many things were assumed and not taught especially things like style were never gone over  but carried as much weight as  functionality of the code. ",
            "\u00a0In CPSC 100 (or CS50 as it is informally known), I learned about how computers work. I also gained valuable information about how to think like a computer scientist to solve problems algorithmically. I also gained practical coding skills in several programming languages, including C, Python, Javascript, HTML, CSS, and SQL. Combining all the skills I learned throughout the semester enabled me to create my own fully functioning web application. ",
            "\u00a0I learned the basics of several languages - C, Python, HTML, CSS, JavaScript - and became comfortable with computer programming in general. ",
            "\u00a0Significantly improved my basic coding skills from high school, learning about how computers function, added several languages to my toolbox, and improved as a coder overall. ",
            "\u00a0Lots of stuff about programming in C and Python, and some about HTML and javascript. ",
            "\u00a0Learned about the basics of computing and programming from foundational skills to applications ",
            "\u00a0This was a great introduction to computer science as  a whole. \r\nThe class has a bad rep for being too much work, but if you go to office hours and work collaboratively, you really do figure it out. I could not have asked for a better introduction to many new languages. I wanted a class that would just familiarize me with the mechanics of CS and that really did this. ",
            "\u00a0My coding ability has increased significantly. The class makes a good job teaching us to break assignments up into parts and look at things as a smaller picture. ",
            "\u00a0C, Python, HTML, CSS, Javascript, SQL -- everything you need for command-line programming, web design, and more. CS50 packs an immense amount of applicable, transferrable programming knowledge into one exciting semester. David Malan often prefaces programming demos with their underlying computer science concepts (how memory works, storage, data structures, etc.) and occasionally sprinkles in interesting tidbits about the broader world of computer science (cool applications of concepts to Facebook, Twitter, video games, current events, and more), but CS50 primarily teaches programming and throws students right into the act of doing so. You learn a lot by doing, and the course also equips you with the tools and experience to teach yourself in the future -- how to troubleshoot/debug, how to teach yourself a new coding language, and sometimes just how to search Google effectively for help, which is natural in computer science. The best part about CS50 is that you don't need any programming background to succeed. The course has a great support structure, and I felt I could turn to several places for help, which is definitely something future students should expect to do. Office hours are a must, especially for beginners, but I felt supported by the course and its vast staff throughout, even as we fired through concepts and p-sets. P-sets were extremely practical and the most applicable homework I have completed in any class. Practice on the problem sets significantly improves your knowledge of programming and computer science. ",
            "\u00a0Great basic understanding of programming in different languages and the basic thinking computer science entails. ",
            "\u00a0I learned programming skills, and applied them to create interesting algorithms, a functional website, and more! ",
            "\u00a0Learned the basics of CS. Material covered a wide variety of topics. ",
            "\u00a0Learned a lot about coding. Also gave a very good conceptual background in computer science. ",
            "\u00a0A plethora of coding languages (C, Python, HTML/CSS, SQL, Jinja, JavaScript) and foundational ways of thinking about computer science ",
            "\u00a0I learned about the overarching themes that permeate the field of computer science. I got a crash course of a variety of programming languages but none in too much depth. ",
            "\u00a0C Python SQL ",
            "\u00a0I learned SO MUCH in this course, especially as a Humanities major. It's true that CS50 gives a bird's eye view of the world of comp sci. I am SO glad I took it. ",
            "\u00a0Got an overview of the main programming languages and theoretical processes. ",
            "\u00a0Learned the basics of programming ",
            "\u00a0I learned about a variety of languages and their applications, including C python HTML CSS SQL and JavaScript ",
            "\u00a0I gained a solid foundation in computer science principles; coming into the course with no prior CS knowledge, I feel more confident going into future CS classes. ",
            "\u00a0Time management! Start psets early, do a little everyday, and they won't be so daunting. ",
            "\u00a0I learned a lot about how computers work and programming languages. As I entered this class with no prior experience in computer science, I learned a ton just about how to code and use HTML and CSS to design websites. It was a great class if you want to learn more about how to code and how computers work, especially if you dont have previous experience. ",
            "\u00a0I gained knowledge in the languages C, Python, HTML, CSS, JavaScript and more about databases and using SQL. ",
            "\u00a0This course is the perfect introduction to coding. You will come out of it knowing C, Python, HTML, CSS, JavaScript, SQL, JQuery, and more. You'll be able to make algorithms, create websites, build games, and maybe even design an app. You'll also gain an overall understanding of coding that will help you learn new languages on your own. If you want to enter the world of coding, CS50 is the perfect gateway. ",
            "\u00a0HTML, CSS, Javascript, Python, C, etc. ",
            "\u00a0This was a GREAT intro to programming, touching on C, python, JavaScript, HTML, CSS, and just learning the basic logic needed to grasp the fundamentals of programming. ",
            "\u00a0I learned a lot about the basics of coding, and learned a lot of problem solving techniques. ",
            "\u00a0I actually learned how to program! Having absolutely no prior experience, I got exposure to C, Python, HTML/CSS/SQL and JavaScript. ",
            "\u00a0I learned how to code and think creatively and break down problems. ",
            "\u00a0How computers work and how to program. ",
            "\u00a0Taking this course helped with learning how to think in a way programmers do and was a great introduction to the theory, concepts, and applications of Computer Science ",
            "\u00a0Basic web programming. ",
            "\u00a0CS50 is a great introduction to computer science. The class covers a few languages, breaking down some more abstract concepts to make computer science interesting, relevant, and accessible to both those considering the major and those exploring other subjects. Students gain exposure to Scratch, C, Python, SQL, etc. ",
            "\u00a0I learned how to ask people for help and to Google answers. I also learned a lot of the logic behind coding, but can't say that I'm fully comfortable in any one language. ",
            "\u00a0I got an introduction to programming languages ",
            "\u00a0I learned how to code in several different languages, i learned about the nature of how computers process data (how they think, the general syntax and problem solving methods of most languages), and I learned a bit about computers in the context of society/current events ",
            "\u00a0I developed methods in self-directed problem solving, as much of the coursework required using resources outside of the lectures. ",
            "\u00a0This course teaches you so much in such little time. I learned how to ask for help at office hours(which were super helpful). It is a great introduction to computer science. ",
            "\u00a0An introduction to coding in a variety of languages, with a particular focus on C for the first month or so before building upon that knowledge and learning more modern languages like python. I learn to develop interactive websites that use APIs, write algorithms, basic cryptography, and image manipulation. ",
            "\u00a0Basic understanding of how computers work, practice with programming languages (C, JavaScript, Python, SQL), framework for approaching programming problems. ",
            "\u00a0Coding in various languages, debugging ",
            "\u00a0A crap ton. Learned everything in the syllabus and then some. ",
            "\u00a0Passion for computer science ",
            "\u00a0Programming skills in C, Python, and the ability to work with JS, CSS, and HTML. ",
            "\u00a0Big idea and understanding about computer science and programming. "
        ],
        [
            "\u00a0Strengths - intuitive teaching, lots of support offered, very entertaining and high quality presentations. Very approachable TAs and instructors that were opening and encouraging to students from all different backgrounds and levels of comfort with computer science. I was especially impressed by how encouraging they were of people without any computer science background to take the course. \r\n\r\nWeaknesses - it seemed that a lot of the problem sets were reliant upon knowing concepts not from the lecture, but ones that we had to either spend significant time googling or spend enough time in office hours slowing getting hints from the TAs, and in fact, ended up being that a large portion of us were highly reliant on getting hints from TAs. This strikes as somewhat flawed or perhaps not ideal. Wouldn't it make more sense to place greater emphasis on learning coding concepts and applying those? Not saying we should leave out googling, as this is important for coding, but perhaps be relatively less reliant, since in practice it seems that we just end up relying on over-leveraged TAs and office hours. ",
            "\u00a0Strengths: office hours and the TAs\r\nWeaknesses: lectures were quite long and not always helpful ",
            "\u00a0Strengths - David Malan is a great lecturer, most of the TAs at office hours were very good and helpful, creates a community \r\nWeakness - not enough TAs at office hours because there was such a high demand ",
            "\u00a0Personally, I would like to focus more on Python instead of C, which is not commonly used in either web or app development nowadays. I would also suggest allocate more weight to the final project, which takes a lot of time but only contributes to 10% of the final grade. ",
            "\u00a0Strengths:\r\n- Community and student engagement\r\n- Learning experience - a way to efficiently build understanding of computer science - from scratch to building web applications in just a semester\r\n- The \"cool\" factor\r\n- Support for students - TAs, professors, office hours, online discussion forum\r\n- Course design - applications and learning aids used, online lectures, ready lecture notes with pieces of code available\r\n\r\nWeaknesses:\r\n- Some problem sets too challenging compared to the information provided in the lecture - at times it felt we weren't given sufficient knowledge to be able tackle the assignments\r\n- Some aspects of programming were not covered yet we were expected to use them when solving problem sets - especially JavaScript ",
            "\u00a0One of its biggest strengths (but also weaknesses) is office hours. Due to the large number of staff members, there are many opportunities for you to get help. That being said, drop-in hours are not always too efficient, as with 15+ students for 2 staff members (and individual questions that can sometimes take 15+ minutes), you could be waiting 30 minutes to an hour just waiting for help. So, although there were many times of day to receive help, for all the drop-in hours, you'd be waiting quite awhile. \r\n\r\nAdditionally, certain staff members are much more helpful than others--especially during the final project. Choose a project using a language people will know, otherwise you may not be able to get much help at office hours. ",
            "\u00a0Some PSETS were very difficult, and sometimes I could not even complete them because I did not have the time to go to office hours. The course should have more support for students who cannot physically go to Tf's and office hours. I also felt like the topics discussed in class and at section hardly related to the PSET of that week and it sometimes even felt like they taught the necessary information the week after the relevant PSET. \r\nThe class was fun though, in a cult-y kind of way. You get lots of free stuff, and the fair at the end of the year is fun too, but I did not enjoy the fact that it was mandatory since I had to miss class. It would have been more enjoyable if they just let students submit their final projects without having to attend the fair. ",
            "\u00a0The course requires a huge time commitment and there are no office hours on Fridays, which is when the problem sets are due, so if you have other Psets due on Fridays, you need to make sure CS50 is not one of the ones you do last. ",
            "\u00a0This course is great! One thing that can be improved is the support from the TA. I struggled with my homework for 15+ hrs and went to the TA session, but the TA was not attentive. I was ignored and felt inferior. After that session I finally chose to audit the course. ",
            "\u00a0I heard many (very scary) things about heavy workload before starting this class, but if you are reasonable about your time management (do not start a pset the day it's due) then everything is very, very manageable. CS50 provides a lot of resources to make the class more accessible for those who lack experience with the subject (to the point where I felt my hand was being held very firmly for the first few weeks' introductory assignments). I've only been to office hours on one occasion, but from that experience and those of my classmates the teaching staff are helpful, quick to respond, and knowledgeable in what they're doing.\r\n\r\nI also underestimated how nice this would be going in, but not having to physically get up and go to lecture did wonders for my schedule. The first few weeks I would watch lectures at 1.5x speed, then do the problem sets while the material was still fresh in my head. I'm pretty sure I wasn't supposed to do this, but after the third or fourth week I stopped watching the lectures altogether, because CS50 provides really amazing notes on their website after each lecture which pretty much cover everything discussed anyway.\r\n\r\nI found my section (\"less comfortable\") to be rather unhelpful in general; we would sometimes take over an hour to review points which could be understood in less than half the time reading the lecture notes. I think CS50 sections would benefit from more practical exercises and interactive problems (suppose we had to code something on the spot given the most recent lecture); it's a lot easier to learn this course by actually coding, and doing this during section would provide a practice environment with a TA to support students should they have any more specific questions. ",
            "\u00a0The online classes by David J. Malan are very entertaining and help to explain the concepts very easily. However the psets are sometimes too difficult or too long. I would say it is important that students be aware of Office Hours very early, so that they get help from TA instead of spending too many hours on their own trying to crack the code. I think also that some psets were too long for one week; for weeks with very complicated or long psets, more TAs should have been available. I would suggest hiring some more next year. ",
            "\u00a0The course does force students to learn how to code very quickly. My biggest struggle was when we started web design, since there was far less instruction and structure involved, so I was unsure on how to implement what was required, or even having an idea of what to implement at all in some cases. ",
            "\u00a0Strengths - lots of interesting and fun content\r\nWeakness - problem sets were difficult and made it hard to estimate how much time it would take ",
            "\u00a0Strengths - great lecture sessions which are very well taught and comprehensive. Loved having a final project that was a pick your own adventure situation. Would like to have more of the sessions that were run at the hackathon where different interesting topics were taught. \r\n\r\nWeaknesses - Change how office hours are run/remove the TA discussion sections and increase office hours - there is a high demand for office hours and the TAs don't always get to all students so time would be better spent offering more hours than rehashing lecture materials in the TA discussion sections. ",
            "\u00a0Lots of work, so much material covered. ",
            "\u00a0I think that the course was a good overall introduction to a variety of programming languages, and the online nature of it was supplemented very well by section and other events held at Yale. ",
            "\u00a0One strength of the course is its ability to tie CS into other things. You can really tell that the instructors thought about the design of every problem set to ensure that students are able to see the relevance of CS. I personally thought that the problem sets were really fun and not once did I question their applicability. \r\nTAs are both a strength and weakness. Some TAs, when asked to help, will just tell you to \"talk yourself through the code again\" and move on (especially when there are a lot of students) after you've waited for over an hour. Some TAs offer the ideal amount of advice so you never feel like they're holding your hands. As long as you stick to office hours with lots of TAs, the former shouldn't be a problem. Don't go to small office hours unless you can show up early or your time will be wasted.\r\nAnother weakness is the amount of time we spent on CSS/HTML. Even though it was fun to design my own website, I felt like I would rather learn something more satisfying in C or Python. I would prefer if CSS/HTML was a smaller portion of a PSET. ",
            "\u00a0it was great! Really enjoyed the course! But office hours can be a chaos and not knowing what to do... ",
            "\u00a0Strengths= office hours!!! They are so helpful and the TA/CA's are so important. Also, lectures are well organized and make a lot of sense\r\nWeaknesses= it seems like the problem sets are always a really big jump from the concepts discussed in lectures. I'm not sure if that's the design of the course but it can be really disorienting/frustrating to someone who has never coded before ",
            "\u00a0This course packs a lot of content and experience into a very short time. I came out of it being at least comfortable with the idea of reading and trying to code programs that can actually function. It is A LOT of content, so it can be hard to retain everything and fully understand what's going on. ",
            "\u00a0Every project is very useful. ",
            "\u00a0Strengths: Lots of online resources and help\r\nWeakness: The curriculum covers way too much in too little time, and students don't have a strong conceptual understanding of things in the course. ",
            "\u00a0I enjoyed everything I learned in this class and the way it was taught from the beginning, adding excitement to something that seemed so daunting and scary. I enjoyed the p-sets (even if some were really difficult), the help during section, the final project as an embodiment of what I learned in the course and the overall path of learning, especially since I came in with no prior knowledge. I think it also worked well that the lectures were online and could be rewatched, sped up or notes from the teachings were used.\r\nPerhaps explaining how overall grading of the course worked a little more would have helped since it mentioned we each would be reviewed from how much we improved, but there was no clear analysis of it. ",
            "\u00a0Tons of work, \r\nPowerful skill development, fantastic instructor, lots of TA support ",
            "\u00a0This course is very well organized because it's such a phenomenon... it even has its own course merch. The lectures were amazing and so helpful, and I never felt like I didn't have the resources to complete a pset. There was one week where they miscalculated and so had to combine two psets into 1 week... that was rough. And the quiz was graded pretty harshly, I think. Otherwise, this course was very fair. ",
            "\u00a0Strengths: The content is really interesting and I really liked the psets.\r\nWeaknesses: There are a LOT of weaknesses. The publicity focus of this class is simply too distracting sometimes. The pace is not really comfortable sometimes and it feels like they are forcing stuff down your throat. The lectures aren't even helpful, do not watch them; just read the lecture notes instead. The TA's are really just a mixed hodgepodge of good and bad ones, and you should submit yourself to Fortune's mercy for a good TA. I was also really bothered by the fact that the Quiz (an euphemism for a final exam) was graded by undergrad TA's, who make appalling grading mistakes. I also don't like the fact that the class seems to have a mysterious grading system and they never made a decent attempt at explaining how our grades are determined. The grading rubric of problem sets is ridiculous (automatically checking your style with style50?? excuse me?? not to mention the ludicrous \"design\" part of the grading rubric) ",
            "\u00a0It is way too time consuming. I took 4 classes this semester, and the other three combined took me about 10 hours total while this class might have consumed 15-20 hours by itself through it's 2.5 hour lecture, 1.5 hour section, as well as 10 hours of office hours every week that I had to go to or else I would not be able to complete the problem sets. ",
            "\u00a0Fun lectures. Times are flexible. ",
            "\u00a0Lots of resources which was fantastic. I dont know how to improve it. ",
            "\u00a0Could be better if it was taught in person instead of using recorded lectures, but is also well planned out and the various activities associated with it are fun. ",
            "\u00a0It's very good in that the lectures are very interesting and worthwhile, the psets are challenging but interesting, and  you just learn so, so much. It gives you a really good idea of what you can do with CS, and it's generally pretty fun as long as you keep yourself on pace.\r\n\r\nThere is a big jump in difficulty around week 4 of the course, because the lectures start having material that isn't on the psets. Therefore, the psets are very difficult because we simply haven't been taught how to deal with certain things (e.g. resize/recover pset). If the curriculum was better aligned with the psets, the class would be better. ",
            "\u00a0Strength: high energy, amount of events, numerous office hours\r\nWeaknesses: recorded lectures only for Yale students ",
            "\u00a0I enjoyed that the course was online so I could fit it into my schedule however I wanted. Additionally, I felt the course has given me a solid foundation for programming. However, throughout the semester the TA office hours always seemed rather unorganized and moved at a slow pace so sometimes I would not receive help until 45 minutes after I arrived. Additionally, I did not find the discussion sessions helpful to my learning, and it seemed like most students were just doing their pset while the instructor talked instead of trying to understand the concepts we were supposed to learn that week. ",
            "\u00a0strengths: very engaging, many TAs, great support, practical applications, many resources\r\n(maybe) weaknesses: lab sections can be a little bit repetitive if you have done a good review of the week's topic ",
            "\u00a0Strengths: TAs and support\r\nWeakness: inconvenient deadlines ",
            "\u00a0Strengths are how much attention is paid to students, weaknesses are that the course is very fast paced (understandably so) but at points it felt like I had a poor foundation of certain aspects and languages because we would go so fast and I didn't completely understand what I was doing and then we moved on to a new topic (aka JSON). ",
            "\u00a0It was tough.  I felt like there was not enough time to get familiar with each language before moving on. Would have loved for the coding walkthroughs in lecture to have been a little more sophisticated ",
            "\u00a0It's a very good course, with a lot to offer in terms of introduction to programming, and it has lots of support. It requires a lot of time input and effort. ",
            "\u00a0Very fast - difficult to retain the information from one pset to the next. ",
            "\u00a0The strengths of the course are the wide variety of topics it is able to cover and the skills it teaches students. I also enjoyed the teaching style (online lectures combined w/ in person discussion sections). ",
            "\u00a0The course is good, but the first few weeks are too easy and some weeks had so much material that it was impossible to succeed. ",
            "\u00a0I think that the course covered too many different languages, which prevented us from gaining an in depth understanding of any of them. More importantly, we didn't get a chance to cover concepts like memory or pointers in detail. While I understand that this course was designed to be an introduction to concepts in computer science, this lack of focus prevented me from feeling like I gained much from the course. \r\n\r\nAnother problem with the course was the shortage of teaching assistants during office hours. It would take over an hour at times to get a simple question answered because the teaching assistants were so busy; combined with the course's strict no-collaboration policy, this made it difficult to get assignments done in an efficient manner.\r\n\r\nMy favorite part of the course was the final project. I loved how open-ended it was, and how the course encouraged us to use what we had learned to solve a problem or explore a topic that was of personal interest to us. Because of this, I was more engaged with the final project than I had been with the previous course assignments. ",
            "\u00a0I think that the style of the course was great, and the sections were very informative and helpful to the Harvard CS50 lectures. However, I wish that their office hours had more staff at times when the demand was high. ",
            "\u00a0This course moves way too quickly and just jumps between languages without providing a firm foundation in a language. It is never a good idea when teaching students to just jump between a bunch of various things when someone is first trying to learn something. The office hours times were also inconvenient and the TAs refused to help you unless you went to office hours. If you needed help on a day in which office hours weren't held and you asked a TA for guidance they would not provide it. This course was strong in that by the end you could say you had achieved a lot and learned a lot of material. ",
            "\u00a0The grading for this course is ridiculous,  minor errors  in code that do not affect performance and are purely stylistic choices like whether brackets start on new lines or not can drop the grade as low as 87%. Having such a small number of total points on each assignment forces the grader take off huge chunks of points for small errors. ",
            "\u00a0This course is great at teaching anyone, from experienced programmers to total beginners, how to code and think like a computer scientist. This is something the course does well at. CS50 is also good at make its material available to students; Its course website is well designed and contains a lot of reference materials. For students here at Yale that watched the live or recorded lectures that are at Harvard, the timely uploads of these edited lectures and their video quality were excellent. There were also numerous opportunities for office hours, which made getting help on the problem sets easy. Our group discussion sections were also helpful with this. And the fact that no mandatory textbooks were required (because most anything related to what we were discussing in class or on problem sets could be found online) made this course very accessible. Overall CS50 is a challenging but great course that shouldn't change. ",
            "\u00a0I think the course is good as is. ",
            "\u00a0Really well-organized course with great resources that was truly well-facilitated for learning. I wish my semester hadn't been as packed as it was so that I could have dedicated more time to the assignments which were the true learning grounds of the course. Weaknesses are that there are no late days and all of the psets, regardless their difficulty, were expected to be completed in a week which was sometimes not possible for me on given weeks with a ton of other work. Drop-in hours could have been more flexible and not always at the same times which were oftentimes impossible to make for me. Also, not all of the sections were the same (even within the same level of \"comfortable\") and that should have been more standardized as I felt that mine weren't super useful, but other students' sections were used to go over previous psets, etc. ",
            "\u00a0The problem sets are undeniably hard. If you do not have previous computer science background, you will need to attend office hours regularly each week. At times, the problem sets were hard beyond expectation, but this was scaled back as the CS50 administrators realized the toil students were going through. On the other hand, the peer support CS50 provides its students is unparalleled. The number of CAs and TAs CS50 has is unique and an asset to the program overall. ",
            "\u00a0The lectures by David Malan are great. The mandatory sections seemed like a waste of time to me. ",
            "\u00a0Engaging problem sets\r\nFun events\r\nGrades very difficult to see ",
            "\u00a0It is a lot of work! But the TA's and community are incredibly. Make it totally worth it. \r\nI would say we cover a bit too much material and don't go enough in depth. That would be the one weakness. ",
            "\u00a0It was touted as an intro class where you did not have to have any experience with coding to succeed but it felt sink or swim at times. ",
            "\u00a0The lectures and sections work well hand-in-hand to further improve my skills. However, the video lecture can be less engaging than in person, which I understand would be something difficult to change. ",
            "\u00a0Strengths: The CS50 experience (events like puzzle day, hackathon, fair, free weekly lunches at Sitar and the brand/online presence of the course); David Malan -- he is an amazing lecturer and was personable, kind, and very helpful during occasional visits to New Haven. He is the soul of CS50 as it continues to grow with 1 mil+ online learners and a vast online presence, but even given all the important things he has to do/people to meet, I've seen him at Yale office hours alongside undergraduate CAs and TAs stooping down to student's computers to help  debug code and help them figure out the week's pset. I think that says a lot about him as a leader and the value he places on teaching; extremely relevant, interesting p-sets; vast support network of professors, course coordinators, CS50 staff, TAs, and CAs with lots of office hours; weekly lectures (which Yale students often livestream or watch in the few days after a lecture, which are filmed at Harvard, when they have time) are interesting, exciting, helpful. Weaknesses: Workload is really something (I guess it makes CS50 CS50), but it shouldn't deter you from taking the class. CS50 probably required the most hours I've spent on one single-semester class, but as long as you expect that and plan for it, you'll both do well and enjoy the course. Class has one 2-2.25 hour lecture which you can split up and watch online in chunks, one 90 minute section, and then a pset each week; office hours are very helpful, but sometimes I wish the staff was staggered so that on quieter weeks with easier psets, there aren't excess staff sitting around and during busier, more stressful weeks with difficult psets there were extra staff to administer help. ",
            "\u00a0Stengths: multiple office hours, online videos, cs50 website\r\nWeaknesses: wait time at office hours, the grading (especially in beginning psets) is ridiculous. Its wrong to take many points off on one line of code that check50 doesnt pick up despite the fact that the program works without it. ",
            "\u00a0There is a strong community of support surrounding this course (TAs, CAs, office hours), which helped immensely with the high learning curve. ",
            "\u00a0Strengths: Lot of help provided, lots of free food/stuff, most problem sets are manageable and interesting\r\n\r\nWeaknesses: Some psets were incredibly time consuming and hard, too much material, covers too many different languages ",
            "\u00a0This course teaches you a lot about coding very fast. It could be improved by making more office hours. These are the key. The online resources were useful but not as much. Overall, class is very rigorous and helpful though! ",
            "\u00a0Strengths: You learn a lot of languages and get a comprehensive introduction to computer science. Since the lectures are all recorded online, you never have to attend a physical class (besides one section per week), which is pretty convenient. \r\nWeaknesses: The later psets are EXTREMELY hard and go several levels beyond what the lecture goes over. When you go to office hours, there are often shortages of TA's for the more difficult psets. ",
            "\u00a0CS100 was great at providing students a 'bigger picture' view of CS and the problem sets were backed by a lot of technical support (good UI/UX!). Office hours were also sufficiently staffed. However, even the most staffed office hours could not fully help students tackling the hardest problem sets of the semester. There were many times that I felt the homework problems failed to accurately gauge the students' knowledge and skill sets. ",
            "\u00a0Strengths: comprehensivehelpful for programming ",
            "\u00a0Strengths: office hours, SO much feedback, David Malan's lectures are a joy to watch, make new friends (at office hours), learn cool new material. Take the class Credit/D if you're nervous about the grade--then you just get to enjoy it!\r\n\r\nWeaknesses: it's true that there is more work that the average Yale class, but don't let that dissuade you. The workload is a strength, not a weakness. I learned how to problem solve on my own (by googling things, watching Youtube videos, etc.), which I had never done in reading/writing classes before. ",
            "\u00a0The weakeness lies in the fact that the lectures sometimes didnt correspond to the p-set. However, the section leaders were super helpful! ",
            "\u00a0Strengths: well organized, great lectures, fun and applicable problem sets, moves at a good pace\r\n\r\nWeaknesses: sometimes the problem sets can be a bit overwhelming at first, especially if the lecture doesnt really cover them ",
            "\u00a0The lectures were very long many times. And discussion sections were not always super helpful. I think section could have been more useful if it focused on the P-Sets instead of reiterating the lecture content. ",
            "\u00a0Office hours often became too busy, and queues would become so long to receive help that it was difficult to see someone for questions. ",
            "\u00a0The strengths are the course's resources, which will allow one to get help and support as needed  especially valuable for someone like me who had 0 background in programming. Because the lecture is streamed, there is quite a bit of flexibility with how you handle your time spent for the course. Weaknesses include its tough learning curve  definitely doable, but best to avoid taking this with multiple high workload classes  and the sections which may not be as helpful as office hours. ",
            "\u00a0Overall, I really enjoyed the course; the psets were interesting, and I felt that I learned a lot.  However, I was disappointed by office hours.  I heard that office hours/drop in hours were supposed to be really helpful, but I didn't find that to be the case.  Often, TAs weren't familiar with the psets (\"let me just take a look at my code from last year...\", \"I haven't seen this for two years, so it'll take me a minute to remember what the problem set was asking...\"), which felt like a big time sink when there were lots of students waiting.  It seems like asking the TAs to just glance at the pset (not even to do the pset, which would probably be even better!), or even just the small portion of the pset that they were talking to students about, would not be asking too much.  Also, I think things would be streamlined if TAs learned to ask questions like \"can you walk me through your code?\" or \"what have you tried so far?\" instead of jumping in silently and trying to identify problems/solve them on their own.  Asking questions like these would not only streamline office hours (I found TAs trying all of the debugging methods I had tried and not listening to me when I tried to tell them strategies I had already attempted), but it probably would be more helpful pedagogically (i.e. training the student as to what questions to ask themselves while coding independently, challenging people to think critically about their problems instead of having an expectation that the TA will just fix everything). ",
            "\u00a0The strengths of the course is how much you learn, and how jam-packed each week is with new information on how to code. The obvious drawback of this, however, are the p-sets, which tended to be pretty time-consuming and sometimes really frustrating. However, I found l the workload to be very manageable if you took advantage of the resources offered in class (i.e., office hours, Discord) ",
            "\u00a0The office hours and drop in office hours are very helpful. The CA's are very helpful. Sometimes the psets are very long and challenging. ",
            "\u00a0I honestly found very little that CS50 could improve upon. The lectures are super convenient since most of them are recorded at Harvard and posted online for you to watch at your convenience. They even come with written out lecture notes, which are super helpful for psets. The psets provide good challenge, but also have instructions that basically guide you through step-by-step so it never really feels like you're lost. Sections are very useful and fun, and there are so many office hours that you'll never find yourself at a loss for help. One of the coolest things about this course is just the amazing organization around it. The schedules and plans for CS50 are so nice to follow compared to some courses which feel like a random assortment of topics and tasks one day and a completely different set another day. Also, THE CS50 HYPE IS REAL. You'll enjoy this course purely from the amount of energy in it alone. The Hackathon and CS50 Fair are just the delicious icing on the beautiful cake that is CS50. ",
            "\u00a0Some of the problem sets were way too challenging and required over 20 hours of work to complete. Also, a lot of the times the TAs and CAs weren't very helpful during office hours because they would say things like, \"You're so close to figuring it out, I can't tell you what you're missing!\" when the only issue with the code was a misplaced comma or line indentation. It was really frustrating because these kind of answers wasted my time immensely and I don't think they really contributed to me learning or understanding the code better. ",
            "\u00a0Strengths: TAs, lunches, hackathon, marketing, engaging problem sets. \r\n\r\nWeaknesses: Condescending staff, nonessential lectures. ",
            "\u00a0I loved the flexibility of online lectures. The quality of the lectures was also very high. The sections were helpful too. A couple of the assignments were a bit too challenging in my opinion but overall they werent bad. ",
            "\u00a0I didn't like how it was an online course, but there is nothing that can be done about this. ",
            "\u00a0Strengths: Great online lectures that were really engaging (David Malan has truly mastered his teaching of the course). Also the TA's and office hours were fantastically helpful - most of the time I did feel accomplished while also receiving a lot of help, which can often be a difficult balance to strike in office hour-heavy classes. Generally speaking, the psets, despite being gruelling and long, were genuinely interesting. None of the problems felt contrived or done 'for the sake of it' - they all had some sort of real world application, which I really enjoyed. I also really enjoyed the Final Project - I literally just made a mini-video game and had a lot of fun doing it, so much so I actually found it addicting. Most of all, the 'brand' of CS50 is the biggest strength the course offers - everything from the quality of lectures/online resources ('shorts'), swag, hack-athons and the 'community and social spirit' were top-notch and made the class one of the best experiences I've had in my three years at Yale.  \r\n\r\nWeaknesses: Each year, CS50 adds 'new' psets or parts of psets to the curriculum. These definitely felt different to the other psets and we weren't given any real guidance with these compared to the other psets (as the video tutorials were made years ago and they didn't make new ones). The staff also were aware of this (and will be fixed for next year) - but the Resize/Recover problem set was gruellingly difficult this year, which made that week some of the most stressful times I've had here. The course also heavily relies on undergrad TA's. As such, if you're stuck with a bad TA or if they are harsh at grading the design of your code, you could be flat out of luck. ",
            "\u00a0This course has a lot of support and breaks down the content well, but there is still a gap between what people learn and what they're expected to do for their problem sets. ",
            "\u00a0It was fun but required too many hours. ",
            "\u00a0I kind of disliked how the problem sets for this course suddenly spiked in difficulty from one week to the next, but besides that, I have no complaints. A key strength of this course is the immense amount of support and resources it provides to ensure that no one is left behind and the lectures and walkthrough material is always very detailed and helpful ",
            "\u00a0Great course! ",
            "\u00a0The psets force students to appropriately apply the knowledge from the lecture. I found them helpful and relevant. There is also a lot of support for students taking this course. Between the numerous TAs and CAs, students can get individualized help and feedback. The streamed lectures do not work well with all students' learning styles. It would be nice if there could be more live lectures at Yale, but I understand that the Professor is a Harvard Professor and that the online videos are probably the best option for everyone. It is good that section is required because otherwise, I'm afraid students might have no incentive to watch the lectures or actually learn the material before attempting the psets. There are also a lot of events that build a bit of a community for the people taking the class. I really liked this, especially in a class that is mostly taught online and does not inherently gather large groups of students. ",
            "\u00a0CS50 has an incredible wealth of resources - TAs, Natalie/Benedict, David, stack overflow responses, Youtube tutorials, lunches with companies, etc. so there's definitely structure in place to help you succeed. However, because it's so self-paced, you really have to be on top of things to start psets early, truly learn the material, etc. and it is a significant time commitment even outside the 2 hr long lecture + 2 hr long TA sections. The good thing about CS50 is that it's very motivating in pushing you to be better in comparison only to yourself. Everyone here just wants you to learn! ",
            "\u00a0This course was too difficult for students who have never taken a computer science course before ",
            "\u00a0Id say the course is great at teaching you by throwing you into the deep end, forcing you to apply yourself. The help offered was great and definitely necessary, and by the final project I found I could do all by myself with the help of the internet. My only feedback would be that some works were simply too tough (the teachers even sent apology notes) and they left me feeling less confident. I think adding more thorough steps and instructions for the earlier psets would be great! ",
            "\u00a0The course teaches you a very large amount of information, concepts, and languages in a short time. However, the lectures often times were not helpful for the problem sets, which lead to inconsistently high workloads. Some weeks the problem sets were very close to the subject of the lectures, and took only a few hours, while others took close to 30. ",
            "\u00a0This course was really good at keeping me engaged and to provide help for all coding levels. ",
            "\u00a0The strength of the course is primarily the extend of the knowledge you gain in such a short time. I went from having no coding experience to building a functioning website in 3 months and I now feel compelled to take more CS courses. The other strength of the course is the extent of the support, with regular office hours throughout the week and an online forum. The weakness of the course was the way it got very hard, very quickly, before relaxing again. This led to some of my peers dropping out due to the intense workload, which could be quite stressful at times. ",
            "\u00a0Very well designed course. Lectures and homework assignments build on each other - lectures give good introduction to concepts and techniques, and homework allows exploration and new learning. Really good support from course teaching team. ",
            "\u00a0Well-structured, really enjoyed David Malan's lectures and working on the psets. Amount of TAs at office hours can be significantly increased. ",
            "\u00a0Strengths: David Malan (not sure if the course would work without his dynamic teaching style, at least for me). Cover so much content in short period of time. TAs were incredible...definitely enhanced the experience.\r\nWeaknesses: that experiment with switching the order of class and resize pset was very uncool. The opportunity cost of wasting that much time on a project we're set up to fail is too high. I probably lost a week of my life because of that. I thought that could've been handled much better. Teach the material before assigning a pset, not after. ",
            "\u00a0Amazing professor, awesome office hours support, course bonding events, really a special experience ",
            "\u00a0Strengths include a wide breadth of knowledge but a weakness is the short time frame for learning it all. If it were spread out more it would be more useful for students. ",
            "\u00a0Strengths : good material and practical\r\n\r\nWeaknesses: I will love to have a platform like DataCamp "
        ],
        [
            "\u00a0Yes. ",
            "\u00a0I would, but definitely only if you have the time. It takes a lot to understand the concepts and everything that goes into the course is worthwhile but definitely takes a long time ",
            "\u00a0There is no need for me to recommend this course. It is already one of the must-have courses in Yale. ",
            "\u00a0One of the hardest, most difficult and most challenging courses you can take at Yale but so so worth it! For the community, involvement, engagement and just for fun. If you graduate from Yale without doing CS50 you will be missing out. You have been warned but I still dare you to try! ",
            "\u00a0I personally loved the class. It is a great introduction to learn many languages throughout the course of a semester, and it is done in a fun and engaging way. You do not have to attend any lecture (just section once a week), but the recorded lectures are all 2+ hours. If you have never touched coding before, the learning curve will definitely be steep. As someone who had some experience, there were still weeks when the difficulty of the problem set was overwhelming and felt insurmountable. Despite this, it really is a great feeling finishing a problem set or your project and being able to say you learned a valuable skill. I truly think this class has made me not only know more about programming but actually like it too! ",
            "\u00a0I recommend it, even if you don't have prior experience. I went in knowing nothing and I learned a lot of interesting and applicable skills. You even make a final project that showcases what you've learned at it actually makes you feel accomplished and even proud of yourself for once. Beware: you need to commit at LEAST 10 hours of work a week for the class, even if you're doing Credit/D/Fail. Oh, and I forgot to mention: CREDIT/D/FAIL THE CLASS IF YOU DON'T WANT YOUR HAIR TO FALL OUT FROM STRESS. ",
            "\u00a0I would only recommend taking this course if you will actually use the skills you learn afterwards. ",
            "\u00a0Great course! ",
            "\u00a0I would strongly recommend CS50 for any student who wants to get a basic familiarity with programming, and especially for those who have no computer experience, because the class provides such strong support for newcomers and experienced programmers alike. In addition, the structure of the class is such that it accommodates students who learn in different ways, whether that be through lecture, close discussion, or independent experimentation. ",
            "\u00a0I would recommend the course to those who really want to switch to the software development industry. With that course you would have an  idea of all you should know at least to interact with software development colleagues. ",
            "\u00a0Yes. It is a good introductory course on how to code, and will teach a student the fundamentals necessary. It does have a heavy workload, but that is out of necessity. ",
            "\u00a0Yes, because CS is important and CS50 gives you practical knowledge. ",
            "\u00a0Yes ",
            "\u00a0Definitely - if you are interested in getting a basic understanding of coding and willing to put in the time commitment, this is a great course to begin your coding journey. ",
            "\u00a0If it fits in to what you want to do. ",
            "\u00a0Yes, I would recommend this course to another student who is learning to code for the first time or who is trying to refine their coding skills following a limited computer science education. ",
            "\u00a0Yes! Take CS50. It really isn't as bad many people say. As long as you start the PSETs early enough to make office hours, getting them done without feeling pressured to finish them shouldn't be a problem. This class would be hell if you enter with the habit of finishing PSETs last minute without thoroughly understanding the material from each lecture. If you give yourself enough time to learn and apply the material, then CS50 would be enjoyable and stress-free. ",
            "\u00a0yes! this is a great intro course ",
            "\u00a0I'd definitely recommend this course to another student if they don't have a really heavy schedule otherwise. It takes up a lot of time but you get a ton out of it. You also meet some really cool people from all around campus and leave the class with a super cool final project if you but the work in. ",
            "\u00a0YES! If you want to see what applications coding can have and get started on being able to apply coding skills yourself, this class gives you the resources to do that. It takes a LOT of time and effort and perseverance, especially if you've never coded before, but the reward afterward is totally worth it. If you go in with a positive mindset, the work is actually quite fun! ",
            "\u00a0Yes, it's a great course which you guide you to programming ",
            "\u00a0Honestly, not really. I think you should just do CPSC 112. ",
            "\u00a0Yes! Even though it was difficult, I learned a lot and whether useful in my field of work later on, I know it is something I will be glad to have learned early on in my lifetime. ",
            "\u00a0Highly recommend: you need to know CS in today's world, and even if you're not one to be swayed by pragmatic arguments, I would say that the thinking style CS teaches you is invaluable and something unique to the field. ",
            "\u00a0Intense course, but extremely powerful tools, and pride that comes with making it through! ",
            "\u00a0Yes, especially if you have no coding background! This will give you a comprehensive overview, and you will feel like you learned so much in a short period of time. ",
            "\u00a0Well, if you are trying to get an introduction CS course for the major, go for 201 instead. If you are a non-major who just wants a little bit of CS, this is a decent class if you don't mind its many weaknesses like over-focus on publicity and sketchy TA's. Honestly, even if you are a non-major, just go for 201 and 223, you will get a much better perspective on CS and will learn your material solidly (unlike in CS50 where they force the material down your throat and you can't digest it well). ",
            "\u00a0YES. Programming is a useful skill to have. ",
            "\u00a0Yes, this course was amazing and I love coding now! ",
            "\u00a0Yes if you have time to put in, or have a strong analytical background, since it will open doors in terms of future computer sciences classes you can take. ",
            "\u00a0Yes! I think I gained a lot from this course. I can do so much and so many different things with CS because of this class. The lectures are engaging, and the TAs are super helpful. However, I would keep a few things in mind: going in with no CS background may be difficult. I took an easy intro python class last year that made the transition to CS50 better. It's a lot of work, though the work is really worthwhile. So make sure that this class balances out well with your other classes. I spent several hours at office hours which was necessary for me to succeed in the course. So go, go, go to office hours. In the end, after you do your final project, you will be amazed at how far you got! ",
            "\u00a0Definitely take this course if you are looking to properly learn about programming and Computer Science ",
            "\u00a0Yes because I think it gives students a comprehensive understanding of programming, and having coding skills these days seems essential. ",
            "\u00a0Yes I would recommend. It was a great experience. ",
            "\u00a0I do recommend this course, if you are prepared to put in a lot of work in order to learn some programming skills. I learned a lot from this course and definitely know more about computer science and how to pursue my own programming projects. However, the workload is a lot many weeks (sometimes >20 hours on a single pset in a week) and it seems like the same amount of learning could be achieved in a less stressful way. ",
            "\u00a0I think being able to understand computer languages is always helpful and prepares for the future. It allows you to get a computer to do the work (in your specific field).\r\nIn addition, programming is challenging and will teach you how to think about a problem. Give a try and you'll see. ",
            "\u00a0Yes. I learnt more than I expected. ",
            "\u00a0Yes I learned a lot, however I would preface this recommendation with the fact that this course is very demanding, the most demanding course I've ever taken (I was spending about 20-30 hours average per week on material). ",
            "\u00a0Lol ",
            "\u00a0Yes, definitely! It's an amazing introduction to computer science course, even without prior programming experience. ",
            "\u00a0Yes. It is a large workload, but by going to office hours that workload shouldn't be more than 6 hours any given week (versus the 20 other people say). Office hours are great for getting you through tricky things you otherwise would spend 2 hours on each. ",
            "\u00a0DO IT! ",
            "\u00a0Yes, if you want to really get a good fast introduction to CS take this course. You will gain a wide variety of skills and the course is definitely manageable if you put in the time. David Malan is a great lecturer and you will learn a lot by taking this class. The problem sets are interesting and really enforce what you are learning in lecture. This is definitely the intro CS class to take at Yale. ",
            "\u00a0Yes, it was a hard but good class. ",
            "\u00a0I'm still not sure what the target audience of this course is. The material covered is too broad to serve as a proper introduction to computer science for CS majors; I think a course like CPSC 201 would do a better job of this. On the other hand, some assignments were too demanding and time-consuming for someone taking this course out of casual interest. In short, I think that there are better introductory courses offered by the department, no matter what you're looking for out of a CS class. ",
            "\u00a0This course is a really good introduction to CS and programming. The first class starts by talking about what 1's and 0's are, and the complexity builds up from there. I heard CS 112 was awful, so I decided to take this one instead and I was not disappointed. The psets ranged from 4 to 15 hours of work but usually averaged around 8-10. It was annoying that the psets would range so wildly in the amount of time they would take to complete, and it made it hard sometimes to plan out my work for the week. Definitely go to office hours. ",
            "\u00a0Yes, fully, because you will not get an experience like this anywhere else. ",
            "\u00a0If you are a new student to coding I would not. This class will cause you too much stress and would foster your passion for coding. If you have a bit of coding experience I would definitely recommend this course ",
            "\u00a0I definitely would recommend this course to other students. In my opinion, everyone should at least try to take CS50. It can bring anyone without any coding experience to a level of being able to make their own web-application. And it teaches students alot about how computing works. It is a very practical course for anyone today. ",
            "\u00a0Yes! It's not nearly as scary as everyone says. I am a junior non-STEM major and had no problems with the course. The course never actually meets which is nice but you should expect to spend a decent amount of time at office hours. It's a great course for people who want to learn the basics of programming, if not a little overhyped. Take it! ",
            "\u00a0100%. If I had taken this course as a freshman, I might be a CS major. ",
            "\u00a0I don't really understand the hype surrounding this course. David Malan is a great lecturer, and he seems to have created a strong intro CS course. Take it if that's what you're in it for. If you're excited for the T-shirts and the hackathon and the whatever else, I personally think that's kinda dumb. Also, note that the rest of the CS department seems to look down on this course, so if you plan on taking more CS, starting with 201 or similar will probably be a better way to spend your time. ",
            "\u00a0Yes if they are willing to step outside their comfort zone, this is a great intro cs class ",
            "\u00a0Yes! you really do learn a LOT! ",
            "\u00a0Do not take as a first year acclimating to your first semester of college. ",
            "\u00a0Yes, I would. It does a good job of developing coding skills in beginners and helps teach a variety of languages as opposed to focusing on just one. ",
            "\u00a0Highly recommend. I loved the class. Expect a lot of work, but expect an incredible experience. I learned that coding can be both addicting and frustrating, and CS50 is largely the same: thrilling, frustrating, headache-inducing, and so so rewarding. If you commit to the class, it gives you a lot back. I was enamored with the course and its hype -- the annual events, the lunches, the shirts, the office hours, David Malan himself. I learned a tremendous amount, and though things certainly got stressful (and took a lot of hours throughout) especially during the last 3-4 weeks of the course when office hours get more crowded and work in other classes piled up, I enjoyed the experience throughout. Coding is fun, but I think I like CS50 itself more than I do computer science. It would not be as fun or engaging if I was not learning computer science from CS50 with David Malan and all the hype surrounding the class -- both on Harvard/Yale campus and in the greater online community. \r\n\r\nGo to office hours, and start your problem sets early. Coding always takes longer than one expects, and you'll miss out on the satisfaction of completing relevant, enjoyable problem sets (that often impress you with your own rapidly developing ability) if you are unable to put good effort into them. My least enjoyable weeks of CS50 were weeks when I started the psets late. I felt lost, rushed, and behind, and my pset grades during those weeks reflected that, even though those weeks are sometimes inevitable. ",
            "\u00a0Yes especially if you arent a CS major and are trying to get a good understanding of programming. ",
            "\u00a0I would definitely recommend CS50. Looking back, it's ridiculous how much more I know now than I did at the start of the semester; it's a very rare class where you can look back and think that. Probably one of the most important realizations I made is that, when it comes to CS, if you have an intuitive understanding for how a language works, you really don't need much instruction in specifics: it's all about learning to Google what you need effectively. CS50 definitely gave me that basic intuition. Plus it has a lot of well-developed \"infrastructure\" associated with it, like the CS50 IDE and the Hackathon. You're supposed to go to office hours apparently; I never did so I can't speak to that. Sections are effectively useless unfortunately since they just go over the lecture material again. But you can always just sit in the back and work on your P-set. Also, this class is definitely more work than most, but it's not ridiculous by any means. Don't be scared. ",
            "\u00a0Very rewarding course, and I'm so glad I took it! There is a great workload, but as long as you manage your time wisely, it is completely manageable. ",
            "\u00a0Yes. It's a decent intro course. Most psets are manageable. Start early and you will be fine. ",
            "\u00a0Yes, I would recommend. Don't take it lightly though. It will fill your schedule. ",
            "\u00a0Depends. If you are genuinely interested in computer science, plan to major in it, or want a very difficult introduction to the field, take it. If you come into the class without any CS background (like me), I strongly recommend to take it with some friends who do. Even then, the class was very difficult; expect some of the psets to take 12+ hours and upwards of 20 hours. If you don't feel super interested in CS, I wouldn't recommend CS50 because of its high workload and difficult psets. ",
            "\u00a0Yes if the student is looking to take a crash course of the entirety of CompSci and is not taking other heavy-workload courses as he/she will be spending a lot of time in office hours. The p-sets will make you feel utterly hopeless at times. (Aside: I legit had a nightmare where I was assigned another CS50 p-set even after the course ended because that's how much anxiety the homework gives me.) ",
            "\u00a0a great introduction to programming. It can get you a lot of ideas about how to solve problems by writing codes. ",
            "\u00a0100%. Amazing class, even--and perhaps especially--for non-STEM students. If you're a Humanities major like me: take the risk, it'll pay off! ",
            "\u00a0I would definitely recommend to anyone who is interested in knowing more about computer programming ",
            "\u00a0Its a great course to introduce cs, but the workload was crazy! ",
            "\u00a0Absolutely! Although it may be challenging at first, its definitely worth it. I was nervous in the beginning because I heard all of the stories about this class, but its completely doable if you start all the psets early and not wait until the last minute ",
            "\u00a0Yes. I learned a lot. ",
            "\u00a0I recommend taking this course if one is new to CS; it gave me a strong foundation in the subject. ",
            "\u00a0Take this course if you're interested in an introduction to programming  don't worry about lacking background, or being daunted by the high workload. The curve is steep but you'll find yourself enjoying the process of breaking down the problem and systematically building up a program to tackle each pset. The class seems to sell a lot, but at the end of it you will feel as if you learnt a lot over the course of the semester. ",
            "\u00a0I learned a lot! Just make sure to start psets early. ",
            "\u00a0Yes, I would absolutely recommend this course. It is challenging and its a lot of work, but you learn a lot and its fairly manageable. It teaches you to think in a different, more rigorous way - while also teaching you how to code - and I think thats really valuable for anyone. ",
            "\u00a0Yes, you learn a lot even though there is a very steep learning curve. ",
            "\u00a0ABSOLUTELY. If you want to work in the modern world, you'll need to learn some coding, and nowhere is there a better way to start to code than CS50. The lectures are super convenient since most of them are recorded at Harvard and posted online for you to watch at your convenience. They even come with written out lecture notes, which are super helpful for psets. The psets provide good challenge, but also have instructions that basically guide you through step-by-step so it never really feels like you're lost. Sections are very useful and fun, and there are so many office hours that you'll never find yourself at a loss for help. One of the coolest things about this course is just the amazing organization around it. The schedules and plans for CS50 are so nice to follow compared to some courses which feel like a random assortment of topics and tasks one day and a completely different set another day. Also, THE CS50 HYPE IS REAL. You'll enjoy this course purely from the amount of energy in it alone. The Hackathon and CS50 Fair are just the delicious icing on the beautiful cake that is CS50. ",
            "\u00a0Not to someone with 0 coding experience, but definitely to someone with at least a little bit. ",
            "\u00a0Definitely take it! Im not a CS major and I loved it. Wish I had taken it sooner... maybe Id have thought about the CS major! ",
            "\u00a0Yes, I believe knowing how to code is an important skill that everyone should know a little about. ",
            "\u00a0Absolutely - I truly believe this is the best intro CS class at Yale/Harvard (much better than 112 or 201, which I have shopped before and had friends in). It is highly 'glamorized' because of the brand CS50 has - and this is a good thing. There is a good community with the course and engaging problem sets, with a wealth of genuinely useful resources to help you succeed. The Hackathon and the CS50 fair are also crazy, enjoyable events that aren't to be missed! Know that this course will take up a lot of time, however. I spent an average of 15 hours a week on the problem sets (I'm a bit of a perfectionist, however). I was taking a difficult Junior year STEM course-load and managed, though; the class compliments a finals-heavy courseload, as CS50 ends before reading period begins and this is awesome. Some of the staff mention it is a good idea to consider taking the class Cr/D/Fail, however the course really requires a lot of effort to truly get anything out of it and the grading really isn't that bad, so I'd recommend going all in!  Overall, as a Junior with absolutely no knowledge and a full courseload - I managed to really enjoy it, I bet you will too! ",
            "\u00a0I would if other students are looking into getting into computer programming. It's a great first step since it teaches you everything you need to get started as a programmer. ",
            "\u00a0Yes because I learned a lot ",
            "\u00a0Absolutely, though I would warn others to take this course very seriously as it will demand a lot of your time every week. Begin every problem set early and dont be afraid to ask for help. ",
            "\u00a0Definitely! ",
            "\u00a0Yes, I would recommend this course to both majors and non-majors. It is a great introduction to computer science and relevant to all people in this day and age. Even if this is the only CS class that you ever take, you will be more aware and knowledgeable about the basic systems that govern much of society today. For that reason, I think CS50 teaches important skills effectively, as the lectures are particularly engaging in a subject that can easily be interpreted as dry. I think that is the biggest strength of the course: making CS accessible and fun! ",
            "\u00a0I would recommend CS50 1. if you take it credit D and 2. if you're still willing to put in the work (10-15 hrs/week) to do kinda well. It was a fun intro and I was really proud of my final project! Unfortunately, I don't feel very equipped to code still. ",
            "\u00a0If you want to go into the computer science course I would recommend this course, otherwise its extremely heavy course load is not worth it ",
            "\u00a0If you want a thorough intro for CS, this is your course. It isnt inpossible like its made out to be, but you will need to work hard and utilize the course resources. By the end, though, if you applied yourself youll feel really proud of all the progress you made! ",
            "\u00a0I would not recommend this course to another student. The workload is very high and much of the learning is done without the assistance of course heads, nor from the lectures themselves. If it weren't for the more forgiving workloads of my other classes, I might not have been able to complete many of the assignments. ",
            "\u00a0I would recommend this to another student who is interested in learning computer science and is willing to dedicate large amounts of time to it. It was a really engaging and rewarding course. ",
            "\u00a0Yes. This course certainly isn't for everyone, and you will find out fairly quickly whether it is for you or not, but if it is it will be a hugely worthwhile investment of time and effort as you emerge at the end of the semester with this enormous range of new skills and understanding of how such an important aspect of our world works. ",
            "\u00a0Yes - if they are willing to dedicate the time needed to complete the course in a meaningful way. ",
            "\u00a0Yes! Very fun and good introduction to coding. ",
            "\u00a0Absolutely!!! It was by far my favorite class I've taken at Yale. ",
            "\u00a0Definitely, it's really worth it to dive into this course. ",
            "\u00a0Yes I would especially if they want to see what programming is like in a wide range of applications. ",
            "\u00a0Yes: Practical knowledge and useful material. "
        ]
    ]
}