{
    "crn_code": "21890",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            1,
            18,
            40,
            45
        ],
        [
            8,
            12,
            30,
            31,
            24
        ],
        [
            9,
            13,
            22,
            40,
            21
        ],
        [
            11,
            21,
            33,
            27,
            14
        ],
        [
            0,
            0,
            4,
            57,
            45
        ],
        [
            0,
            0,
            6,
            32,
            68
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0You learn a lot of data structures, algorithms, and how to program in C, as well as how to solve tough problems. ",
            "\u00a0I learned so much from taking this course. I am so glad I was able to take it with Stan. ",
            "\u00a0Coding in C, algorithmic themes like greedy, divide-and-conquer, dynamic programming, pointers in C, memory management, and various data structures--linked lists, queues, stacks, and all sorts of trees. ",
            "\u00a0At the end of this class, you'll really know C.\r\nYou learn all about debugging, data structures, and everything else. ",
            "\u00a0This is the course you need to really start learning useful things for a career in CS. This teaches you exactly what is says it will, the basics of data structures and programming techniques. ",
            "\u00a0I learned a lot about the fundamentals of computer science and algorithms, which is of course very useful and also mandatory for the CS major. ",
            "\u00a0Programming in C and thinking like a computer scientist ",
            "\u00a0Better understanding of low-level computer architecture, memory handling, mechanics of C programming and the C compiler ",
            "\u00a0The C language; data structures and some algorithms. A lot of sorting, and a lot of trees. ",
            "\u00a0Learned C ",
            "\u00a0Learned tons about C, how computers use memory, and data structures (obviously). ",
            "\u00a0Learned C, some algorithms, and many data structures. ",
            "\u00a0I learned the importance of starting early when programming. ",
            "\u00a0Data structures and algorithms. ",
            "\u00a0I learned some basics of algorithms (i.e. types of algorithms, basic complexity analysis, etc.) and a lot about data structures (arrays, heaps, trees, etc.). ",
            "\u00a0Programming in C, data structures, and algorithms. ",
            "\u00a0I learned that I hate computer science. ",
            "\u00a0Computer science (C programming, data structures, algorithms) ",
            "\u00a0I learned about data structures like queues, stacks, and trees, and also slightly about types of algorithms, like greedy, random, etc. I learned how to code in C and how to manage memory in C with tools like Valgrind, and also learned how to write basic algorithms on paper. I also learned how to begin analyzing code in terms of runtime - specifically, in O(n) = #compares runtime. ",
            "\u00a0Memory, C ",
            "\u00a0How to program efficiently in C and implement data structures. Developing and implementing algorithms. ",
            "\u00a0I learned a lot about different types of algorithms, data structures, and coding in C. ",
            "\u00a0I learned a lot about data structures and other programming techniques that really improved my programming. I also learned how to code using the C language. ",
            "\u00a0I learned to recognize the efficiency of certain algorithms and code in C. ",
            "\u00a0I gained a much better understanding of computer memory. ",
            "\u00a0Got comfortable programming in C, debugging programs on one's own, using UNIX ",
            "\u00a0I learned a lot about data structures and programming techniques ",
            "\u00a0Different types of algorithms, time and space complexities, memory storage in C, lots of data structures including stacks, queues, heaps, trees of various types, and hash tables ",
            "\u00a0I obviously learned a lot about data structures and algorithms, which were the titular draws of taking the course. However, I also became a lot more comfortable with debugging, an invaluable skill, and with attacking problems without immediately obvious answers. I also learned C, of course, and how to read manuals when I wasn't sure what to be doing. ",
            "\u00a0It's an intense but really good introduction to C and low-level languages, memory and storage, and algorithms to work with data structures. So, exactly what it sounds like. ",
            "\u00a0How to organize data and code algorithms in C ",
            "\u00a0I developed the confidence to write programs from scratch in C, and also on how the computer works on the memory level.\r\n I also got a good grasp of the basic data structures and algorithms necessary for any programming interview. ",
            "\u00a0Learned data structures (tries, trees, max heaps, BSTs, AVLs), algorithms (dynamic, greedy, etc), and debugging ",
            "\u00a0I learned how to code in C and about various concepts and data structures like algorithms, pointers, memory allocations, and trees. ",
            "\u00a0Data structures, how to debug, how to survive on like 4 hours of sleep ",
            "\u00a0Learned C programming and algorithms and data structures ",
            "\u00a0Oh boy. You learn a lot. You learn to love and hate yourself and appreciate free time (if you ever have any while you're taking this class.) But in all seriousness, this class does a really good job at introducing you to more complex data structures, and efficient algorithm thinking. I do not regret taking it despite the fact that it literally made me depressed. You really do come out a better programmer. ",
            "\u00a0A great intro to C Programming; a LOT of data structures, yay! ",
            "\u00a0I learned some data structures, methods and algorithms that can be used with stored memory and data. I also learned some information about terminal, solving complex problems, and putting together systems of code. ",
            "\u00a0Learnt C programming. Learnt a great deal about various key data structures and associated algorithms. Learnt about compexity analysis of algorithms. ",
            "\u00a0data structures, programming in c, using gdb and valgrind to debug code ",
            "\u00a0I learned how to program in C, the design and implementation of several data structures, and a lot about sorting.  I also learned about efficiency and adversary arguments. ",
            "\u00a0Learned C and how to understand, build, and use data structures. ",
            "\u00a0I learned how to implement a variety of abstract data structures and searching/sorting algorithms. I also became more familiar with coding practice and the C language. ",
            "\u00a0This course is a great introduction to algorithms and data structures (although I wish he had gone a bit further with data structures). The p-sets also give a good introduction to good programming practices and basic debugging skills (would highly recommend actually learning GDB at the beginning when he tells you to). Also, while taking the course with Stan is more difficult, it is manageable and better prepares you for 323. ",
            "\u00a0An understanding of complex algorithms and how code efficency. ",
            "\u00a0I spent between 15-25 hours per pset. I feel like my programming skills have gotten stronger and the concepts that were used in the psets I got well. The lecture material often went over my head so I feel like I never internalized it and not everything he taught was tested over. ",
            "\u00a0I have a much better understanding of pointers/memory in C and of data structures in general. ",
            "\u00a0I learned a lot about C and how a computer works at a the most basic level. ",
            "\u00a0Prof Eisenstat teaches some algorithms and run time complexity as part of this course in addition to lots and lots of data structures ",
            "\u00a0learned a lot about programming in C and how computers store and search for data. ",
            "\u00a0Types of algorithms (e.g., backtracking, divide-and-conquer, etc.) and many different types of data structures. ",
            "\u00a0I learned about data structures, which is a very important topic as it acts as the foundation for many concepts in computer science. I also learned how to do makefiles in C. The psets taught me how to debug my code using gdb and other tools (print statements) and I was able to develop my way of thinking about CS problems. Valgrinf taught me about the dangers of pointers and how memory works in C. ",
            "\u00a0I learned to analyze complex problems, however I did not learn how to solve them. I felt the class was taught to people who are already familiar with most of the concepts. ",
            "\u00a0Deep understanding of data structures, experience in  c programming, and an overview of many algorithms ",
            "\u00a0Through this course I learned how to program thoroughly in C, implement and use various data structures, analyze algorithms for complexity and validity, debug the heck out of programs (even when assignments got frustrating), and manage my time during marathon PSETS. ",
            "\u00a0CPSC 223 was arguably the most useful of the courses I've ever taken at Yale. The course gave me both top-level and inner-level experience with the most common data structures used in computer science. I feel that my knowledge of more modern computing concepts greatly increased after taking this course, as I now have the fundamental knowledge needed to pass most technical interviews for tech companies. ",
            "\u00a0I learned the fundamentals of coding, especial how to implement and use the most common data structures like trees, lists, queues and stacks. ",
            "\u00a0I learned how to manage my time when working on the problem sets and how to remain calm in times of high stress and frustration. ",
            "\u00a0I learned a fair amount throughout this course; although it felt random at times, the most valuable information was taught through the psets. ",
            "\u00a0Learned data structures in C, how to account for memory when programming ",
            "\u00a0Something related to algorithms? and then data structures ",
            "\u00a0I learned a great deal about data structures and became much more comfortable with low level programming through the use of c. ",
            "\u00a0Data structures in C ",
            "\u00a0I learned a variety of data structures that I didn't know about previously. I learned about some algorithms that I already somewhat new, as well as algorithms that I had never encountered before. I also gained some really useful skills in time management, resourcefulness, and independence. ",
            "\u00a0How to think like a programmer, a handy set of algorithms and data structures. ",
            "\u00a0I learned about the different types of algorithms that programmers use to solve problems and the complexity analysis associated with each one. I learned how to implement different data structures in various ways using C, and practiced lots of debugging! ",
            "\u00a0I developed a strong base in computer science knowledge, along with the abilities to write and debug effective code. ",
            "\u00a0I now feel very comfortable with UNIX, C, and data structures. "
        ],
        [
            "\u00a0This class's one weakness is that office hours get very clogged. ",
            "\u00a0Stan often tries to overcomplicate things for no reason so I would suggest in addition to going to lectures also doing some of the readings if you feel like you've left the lecture very confused. ",
            "\u00a0The problem sets are hard but also very engaging. Professor Eisenstat is a really nice guy, although he might seem intimidating sometimes. If you send him questions, he will respond quickly with extremely concise, to-the-point answers. I really think that taking classes with Eisenstat can improve your coding skills. He designs the private scripts with a lot of edge cases in mind and really pushes you to think through the logic of your code and discover the holes in it. Plus, taking it with him can better prepare you for 323 which has almost always been taught by him. Nothing is more satisfying than seeing your code work in the end. ",
            "\u00a0This class is hard. No other way to say it. It's hard.\r\nBut it's good. Professor Eisenstat does an excellent job of teaching difficult material well. ",
            "\u00a0Strengths: Really helps you learn. The PSets are sometimes frustrating, office hours annoying, and lectures boring, but you do learn. \r\n\r\nWeaknesses: Ridiculously disorganized office hours making it hard to get help. Also sometimes Stan is sarcastic and rude to students who generally need help (though they sometimes deserve it) ",
            "\u00a0The course is very theory heavy in lecture. The psets then apply this theory, but many of the challenges come from learning the details of C. Professor Eisenstat will not walk you through C, he expects you to learn it yourself outside of class. ",
            "\u00a0Lectures sometimes confusing. Unclear what is tangent and what is to be learned. Due dates should not be at 2:00 am as it is unfair to people who must wake up at 5 am for practice. ",
            "\u00a0It also definitely made me question my own self-worth on a regular basis because this was HARD. I guess I'm glad it prepared me for the next CS class, but at the same time, I don't know how good a course is if it just made me hate myself and gain an apparently shaky understanding of the concepts I was supposed to have learned, because I really don't think I learned as much as I was maybe hoping to. ",
            "\u00a0Strengths: Well-structured, lots of material covered with a good amount of rigor and ground-up derivations\r\nWeaknesses: maybe moved at too quick of a pace, covered a lot of material with no obvious connection until the second half of the course with data structures ",
            "\u00a0It's really a well-structured course. Stan runs a tight ship. He's incredibly organized and a lucid lecturer. ",
            "\u00a0A bit more guidance on the problem sets ",
            "\u00a0Strengths: Stan knows what he's talking about. He has high expectations for his class, which makes it difficult, but it's very rewarding.\r\n\r\nWeaknesses: The C learning curve is steep, but so the class cooouuuulldd move a bit slower towards the beginning. The piece sets get most difficult during the middle of the semester, but are less so towards the ends. ",
            "\u00a0The only weakness I could see is that some of the material in class might be explained a little too fast - but if you take notes and review you should be fine. ",
            "\u00a0Strength: \r\nVery intellectually stimulating. Lots of cool content in class lectures. Very cool to explore during problem sets.\r\n\r\nWeakness:\r\nTA's were always busy. Such a struggle to get to them. ",
            "\u00a0Pset's were a tad bit challenging. ",
            "\u00a0The course is very well organized and brilliantly taught. The material is also engaging and useful, and I like that the course does not handhold you through things such as learning a coding language or simple concepts. ",
            "\u00a0This course provided a very rigorous introduction to data structures and algorithms, and, primarily through the problem sets, improved my proficiency in C in a very short period of time. ",
            "\u00a0Extremely long wait times during TA help hours, pretty horribly written instructions on the assignments, overall uninteresting topics. Assignments are unnecessarily long and are not instructive. Debugging shitty C code for hours helps no one. Also C is literally one of the worst languages. No strengths. ",
            "\u00a0Strengths: The problem set specifications were very clear, detailed, and structured. I felt that each Pset, with enough time and work, was solvable and fair. Stan also was a very kind professor who could be approached for help.\r\n\r\nRegarding lectures, I liked the pace that Stan wrote notes - it was a very good pace and easy to write down. I also really liked the addition of statistics on each Pset so that I knew exactly how I was doing relative to the rest of the class.\r\n\r\nFinally, I liked the curve - while much, much harder than CPSC 201, I did feel that it was still relatively generous and left a lot of room for improvement.\r\n\r\nWeaknesses: The lectures were simply not that great. I felt that they tended to delve into the theoretical a large portion of the time and brush on theory that not many people understood and would never appear on a final. Also, I felt that the lectures were not engaging - I know other students, as well as myself, would even fall asleep. The thing is, Stan never put lecture notes online or recorded them, so you had to go. I feel that having digital records of notes and review sessions for exams afterwards would have been immensely useful for review. ",
            "\u00a0You learned a lot, but the psets were very hard and I thought they took a lot of time. I don't like biweekly psets either. I prefer weekly 10 hour psets as opposed to biweekly 20 hour psets in terms of budgeting your time and scheduling. ",
            "\u00a0I loved Stan. Kind of a grump but a great teacher and organized the course really well to have every pset build off the last. ",
            "\u00a0In retrospect, CS223 under Prof. Eisenstat was very challenging but rewarding. I learned a lot more than I expected, although I had to work a lot of late nights and debugging sessions. Some TAs were amazing and very helpful, while the others less so. ",
            "\u00a0This class was taught well, and although the problem sets were difficult you learned a lot after completing them. ",
            "\u00a0Its a good class it is just very hard. ",
            "\u00a0The first few psets were an introduction to programming in C and algorithm types.  I wish we had gotten a chance to implement one more data structure instead of wasting our time with introductory psets.  With that being said, I learned a lot from all of the assignments, and the tests were very challenging in a good way. ",
            "\u00a0I don't think it was always the most welcoming environment, but I suppose that's not the role of a 3rd course in computer science. I loved this course, wouldn't personally have changed a thing, but it definitely worked better for me than some others. ",
            "\u00a0I think lectures were generally good, although it would be good to get a little more practice of the concepts on the midterm exams since they weren't always tied too much to the problem sets.  I also think the system of office hours at the end of the term was really good, the beginning not so much. ",
            "\u00a0Strengths: very independent, teaches you to think creatively and analytically\r\nWeaknesses: office hours were very inefficient and waiting often took several hours. Problem sets take a long time. Also, midterm 1 material was not covered very well or often. ",
            "\u00a0It's an amazing course, combining the theoretical aspects in class (some C language details are also introduced in lecture) with very instructive psets for practical training. The office hours were also very helpful, and in good amount. ",
            "\u00a0The problem sets are absolutely brutal -- especially Merge 19. It takes an unreasonable amount of time, even for those who go to office hours and start early. ",
            "\u00a0Students improve their skills in coding a lot. Office hours were not as effective sometimes when there were many students but less TAs. ",
            "\u00a0V difficult. Stan really gives you a run for your money \r\nLearned a lot ",
            "\u00a0Very time consuming and crowded office hours are an issue ",
            "\u00a0Strengths: with professor Eisenstat, you learn to either manage your time well or accept the suffering that comes with not doing that. The class content is clearly presented, and well explained. I liked the structure of it.\r\n\r\nWeaknesses: the class does NOT facilitate well for unexpected circumstances such as being late on a problem set for medical reasons - you get your lateness penalty excuse from the Dean, but no one cares if that sets you a week or more late on the next problem set, and before you know it, you've gone from a satisfactory, if not excellent, standing in the class to barely passing because you just can't catch up. If you're late for even one problem set, the effect trickles down, and then you're screwed. Something needs to be done about this, especially if the reasons a person was late in the first place were beyond their control. This especially includes mental illnesses, which go largely overlooked in the Yale CS department. ",
            "\u00a0While many courses in the CS department are already challenging, this course I found to be one of the most difficult and frustrating to follow and receive help with questions. The class style is very large, yet there are limited academic resources and available tutors for students, and you often have to wait hours to get help at office hours even if you show up relatively early. The professor attempted to resolve this a little by adding 15 minute sessions, but this also wasn't significantly more helpful because in solving deeper and more complex problems, you mostly would only be able to receive some vague direction and guidance if you weren't completely certain of how to continue, and in addition to only being able to do one of these a night you'd often have to return and re-explain your issues to a completely different learning assisstant the next day. The office hour sessions are still very understaffed and not optimal if you don't know other people who can explain things to you, and there often seems to be a large jump from what is involved with completing the psets and how things are explained in the lectures. That being said, a lot this course you are on your own. It's hard to receive adequate help to catch up of you fall behind, and rather than being able to learn from your mistakes in the psets and improve you're simply penalized for them and have to move on if you're already losing time on the next one. The large lecture style also makes it difficult every learn individually or gain practice inside of class, and even after taking previous CS classes required to enter the course large assumptions in knowledge and ability are made. The department should to invest in hiring professional tutors who have experience teaching computer science and theoretical concepts both in code and practicality, and create sections where students can feel comfortable asking more detailed questions and getting one-one-one help. I think regulating the pace, division of work and support, and the overall teaching methods along with this could greatly improve the course. ",
            "\u00a0I think it would be worthwhile to have multiple people look over problem set specs to ensure clarity and concision, to help save student comprehension time and allow students to better anticipate private test cases, etc. Another suggestion would be to perhaps have a Piazza instead of the current newsgroup system to allow messages to be handled more easily. Other than that, the course is quite reasonable- well taught, well structured and full of important content. The change in the office hours system was also wise and helpful and should be maintained for the future! ",
            "\u00a0The strengths of this course is that it teaches you a lot. The weaknesses of this course is that you have to learn basically all of it on your own. There is very little help to speak of. Also, the class is taught in a way that favors students with several years of programming experience as opposed to the students who are new to CS. The leap from 201 to 223 was extreme. I found this class to be very frustrating, and unforgiving, despite 25 + hours of work put in per week, and I would not have taken it had I known this. ",
            "\u00a0The course is challenging but the lectures were informative and the PSets were engaging.  The material is not particularly interesting but is nonetheless necessary to develop a knowledge of Computer Science. ",
            "\u00a0Strengths  you learn a lot and Stan is helpful if you go to him. Weaknesses  lectures arent always easy to follow or understand and the course is extremely stressful. Psets took at least 20 hours each and were very very difficult conceptually and ULAs werent always super helpful. Also you have to completely teach yourself C. ",
            "\u00a0This course is really great in lecture but the actual skills needed to implement the psets aren't taught in class. Stan wrote entirely in chalk and never really taught C... or any code for that matter. This lack of guidance made the first 3 or 4 psets VERY challenging and required a ton of trial and error. More teaching about makefiles, standard input and output, and other general concepts like that earlier in the course would really help people transition from CS 201 to 223 because right now the skill jump seems a little ridiculous. ",
            "\u00a0The course definitely could have focused more on data structures and been slightly less theoretical (especially when learning about algorithms). However, Stan is a good teacher (occasionally confusing and not willing to take questions though), and office hours are quite helpful if you go the first week that a p-set is assigned. ",
            "\u00a0The weakness is the lack of focus of the psets on the material in class and the disconnect from coding and inclass concepts. ",
            "\u00a0I wish there was a lecture outline or lecture notes; often if I didn't copy down something correctly I would be completely mislead reading it later. Also everyone just copies down what he writes on the board. It seems like it would be better for everyone if he released the executes notes. ",
            "\u00a0There was not a lot of feedback on mistakes that were made in problem sets, and it was easy to lose a lot of points for one mistake, which would seriously impact your grade on that assignment. However, the problem sets were challenging, and I learned a lot from doing them. ",
            "\u00a0We weren't taught C, but we were expected to know it straight away. This led to an increased amount of time doing problem sets for the duration of the semester. The problem sets were written with the intention of helping us to become better programmers. ",
            "\u00a0Strengths: Great professor, super clear, available, helpful\r\nWeaknesses: Hard. You need to go to Office Hours often if you want to finish problem sets, unless youre a genius ",
            "\u00a0Strength: you learn A LOT and are forced to learn and improve very quickly. Stan is a good teacher too. \r\nWeakness: so much work that it sometimes seems unreasonable, and not a lot of compassion from the professor ",
            "\u00a0You will get significantly better at programming because of this class, but almost all learning occurred outside of the classroom while working on the psets or using other online resources rather than in lecture. ",
            "\u00a0The psets teach us a great deal about programming and algorithms. They are an intense but insightful application of what we learned in the class and what we had to look up by ourselves. The course teaches you how to be a better independent programmers. The issue is probably how intense the psets are and how inadequate the office hours can be sometimes. The office hours are somewhat understaffed. The style grading sections are also not really organised. ",
            "\u00a0Computer Science is really cool and this class does a very good job and hiding this fact. Why is class spent explaining data structures, algorithms and the calculations of runtimes when we never talk about interesting ways to apply these ideas? Make the students want to engage with the subject matter!!! Why do entry level courses need to be so unenjoyable? ",
            "\u00a0Strengths: the material is very interesting\r\n\r\nWeaknesses: very difficult material. The leap from CS 201 to this course in terms of the difficulty of the homeworks and the exams is very big. The course was not taught for the people who struggled to understand the concepts. Only those who had been more engaged with computer science before were able to get something out of this course. ",
            "\u00a0lectures frequently do not help with the problem sets. It would be a lot better for the students as well as the ULAs if the lectures were more helpful for completing the problem sets. ",
            "\u00a0Strengths: amount of material covered, many office hours to help with psets\r\nWeaknesses: had to learn programming in c essentially on your own, psets took a lot of time, long waits at office hours ",
            "\u00a0Strengths: Good lectures, difficult but mainly rewarding PSETS\r\nWeaknesses: Crowded office hours, lack of feedback on PSETS ",
            "\u00a0The concepts were well-packaged and the professor did a great job with the pacing of the course. However, I believe that adding late days to the course would make it a bit more fair for students (apparently students were given late days for homework assignments in the previous semester of the course so it would only be fair to extend this across semesters). ",
            "\u00a0The lectures of this course are very well organized, and the assignments are usually very clear. It was very difficult to get help on homework assignments from ULA's, which made it hard to make progress some times. ",
            "\u00a0This class was more of an algorithms class than a data structures class. Because it was taught by Stan Eisenstat this semester, it was difficult for the students to gauge what to expect in the class. ",
            "\u00a0A lot of work. The fact that it's taught in C, not Java or Python. ",
            "\u00a0If you don't go to lecture, there's no way to get the knowledge/notes online, you have to ask a friend who went for the information ",
            "\u00a0Ridiculous amount of work and poor teaching. ",
            "\u00a0This course is terrible, absolutely terrible. It ruined my semester. It was such a frustrating class. The organization of this class is absolutely terrible. The freaking class is called data structures, but, for some reason, we didn't start doing data structures until the second half of the course, so I was just completely confused by what was going on during the entire first half of the course. It would have been nice if Eisenstat had an agenda that he told us, like if he just said that \"this is what we're covering today, and tomorrow, etc.\" I wish we actually had a syllabus that said what we would be doing every day. It was frustrating how what was covered in lectures wouldn't overlap with what was covered in exams or what was covered on assignments. Everything about this class is absolutely terrible, and I don't think anyone should take this class. ",
            "\u00a0I felt that the core strength of this course was the problem sets, which required a great deal of self study. I found the problem sets posed a great challenge which forced me to learn the topics in great detail. I sometimes felt that the lectures deviated into topics that were irrelevant to our immediate studies and would have been more appropriate in a discrete math or algorithms class, like the lectures on runtimes for obscure variants of algorithms. ",
            "\u00a0More practical TA sessions ",
            "\u00a0This course needed to have more of a support structure, there were many students who needed a lot of help and it was impossible or extremely difficult to find any help resources ",
            "\u00a0The problem sets were really interesting but often very daunting. For each one I spent around two hours just trying to understand what the specification meant. My biggest challenge with this course was feeling very discouraged and doubtful of myself, and I feel like that could have been avoided if the instructor had at least discussed the specifications of each problem set before we began working on them. Otherwise, lectures were super well organized and easy to follow, but I wish the class size had been smaller. I was frequently distracted by my peers in the classroom who browsed the internet/talked during class. ",
            "\u00a0Strengths: you definitely learn a lot, and the exams are pretty straightforward\r\nWeaknesses: very time consuming, especially until the 4th pset, after which the psets get easier. Office hours are terrible (like with most CS classes) and you have to wait more than 2 hours to get help. However, Professor Eisenstat's new sign-up-for-a-slot system worked really well and partially fixed the problem. ",
            "\u00a0I learned a lot during lectures and I loved working on psets which were relevant and interesting. I felt lost sometimes during lectures when Professor Eisenstat went deep into the math behind some complexity analysis that wasn't going to be on the exam. ",
            "\u00a0The course was well organized and well taught, but there weren't enough ULA's to effectively help everyone who needed help. ",
            "\u00a0Strengths: I learned a lot from this course, including UNIX, C, and data structures; The late submission policy is good; Homework is a significant factor in the final grade; Help hours were indeed helpful, especially after appointments were introduced; I made friends at help hours; Plentiful appointments with Prof. Eisenstat during office hours, which were always extremely helpful; Homework specifications are clear; Due dates are spread out well and stated at the beginning of the semester; The class newsgroup was helpful; Exam review sessions were helpful; Many online resources.\r\n\r\nWeaknesses: Notes from classes and exam reviews are not posted online. While I'm glad the homework deadline is 2 AM, I wish it were on Saturday and not on Friday so I could work on Fridays without penalty. In the same vein, there were no help hours on Fridays or Saturdays, so one late day often turned into three late days when in need of help. During help hours at the beginning of the semester, sometimes other students would hog the ULAs. Many students struggled to compete with those who were already familiar with the material, and those who struggled had to spend many hours on each assignment. Finally, the course focused too much on algorithms. Of course they're impossible to avoid in a CS course and they reinforce data structures, but the exams tested algorithms, not data structures. "
        ],
        [
            "\u00a0This class is the minimum to pass a technical interview in software engineering. ",
            "\u00a0I would definitely recommend this course to others! Don't be taken aback by the level of workload it says. As long as you manage your time well this class is very doable. Also, it was great being able to take it with Stan because I will likely be better prepared for 323 in the fall. ",
            "\u00a0YES YES YES, especially if Eisenstat is teaching it. He's a really good professor and takes seriously every question that students have. The problem sets are hard but also very interesting. In the process you will learn so much about C and how to implement data structures in C. You will also learn about debugging strategies and how to use GDB and Valgrind, which can save you hours if you know how to pinpoint the exact location where the bug occurs with the help of these debugging tools.\r\n\r\nHOWEVER, the caveat is that if you don't have any coding experience in C or if your previous coding background is a higher level language like Python, then the learning curve at the beginning of the course might be very steep. You need to be mentally prepared to handle the stress (I know a friend of mine who dropped the class after the second pset because she just couldn't get C working right). ",
            "\u00a0Yes. It's a bit of a trial by fire, but at the end you will be well-equipped. ",
            "\u00a0Yes but make sure to take a lighter schedule if Professor Eisenstat is teaching ",
            "\u00a0Dont take this unless its for your major. It is a very hard course and the skills are mainly only applicable to a career in some kind of CS. Definitely dont take this without a strong background in CS. ",
            "\u00a0If you need to take it for your major ",
            "\u00a0If you have to take it for the CS major, you do what you gotta do. ",
            "\u00a0If you want to get better at computer science, then take this course. ",
            "\u00a0Not unless you're planning on majoring in CS really, you learn to appreciate computers at a relatively low level and some interesting data structures/algorithms for other CS classes presumably ",
            "\u00a0Yes. If you have a strong mathematical background, you can probably take this as your first computer science class. The workload is less than one of the core math major courses (e.g. abstract algebra), considering: a p-set for this course takes about as much time as a p-set in a decently challenging math course, but there are only six of them, as opposed to 12+. Stan is incredibly organized and a good lecturer. I will say, though, that there were a few too many weeks in which it felt like the whole lecture was him filling various trees with the names of the months. There's nothing particularly thrilling about this course, but it's a good chance to learn C. The exams are quite doable. ",
            "\u00a0Yes, great introduction to C but you must be committed to the course due to workload ",
            "\u00a0Yes, but this course is definitely a step up compared to CS 201. ",
            "\u00a0If you want a deep understanding of C, programming, computer memory, and/or data structures, yes. If you think you'll enjoy, you can take it for as long as you can hold on. Otherwise, you probably aren't considering it anyway, so don't try it. ",
            "\u00a0You have to if you're a CS major. As a non-CS major, I think it's a good way to brush up on programming skills - and learning some data structures and basic algorithms can't hurt. Also, knowing a lower-level language won't hurt. ",
            "\u00a0No doubt. Cs major or not this class is for you. This is the greatest class I have ever taken in my life, and I am so excited for the future of my cs experience at yale after taking it. ",
            "\u00a0Yes, you must take it as a CS major and it just helps you program more. ",
            "\u00a0I would recommend this course to students looking to major in CS or have an interest in applying CS to whatever major/field they are looking into. Data structures are extremely fundamental to computer science (since CS is essentially data structures + algorithms) so if you looking for a well-rounded background in CS, this class is a must. ",
            "\u00a0Definitely, even if you are not considering CS as a major. ",
            "\u00a0No way in hell. ",
            "\u00a0I would only recommend this class if you're a prospective CS major who needs to satisfy this core credit. I only don't recommend it to other students simply because the workload is so high - each pset will take 10-25 hours in order to complete. ",
            "\u00a0Yea if you're a cs major/have good perserverance skills.\r\n\r\nIt's also probably fine with anyone other than Stan. ",
            "\u00a0It's required for CS students, but if you're just looking to get good at coding and are ready for a challenge, definitely take it. ",
            "\u00a0If you are truly curious about programming and coding in C, there is no better class to take. However, note that CS223 under Stan is much much harder than it needs to be. ",
            "\u00a0Absolutely! Just make sure to start the problem sets early because it is important to success in this class ",
            "\u00a0Yes! Stan is tough but you learn a lot and the curve is generous. ",
            "\u00a0On the one hand, Prof Eisenstat's lectures are clear and well-paced (albeit dry) and if you can manage to stay awake and maybe even do the readings before the lectures, you'll come out with a good understanding of important CS topics. However, office hours are a MESS, which can be disastrous considering that the psets are long and incredibly involved (some of the longer ones can take >20 hrs) and if you're learning C for the first time (which most people are when they come into the class), there's a ton of nuances that can make the programming process slow and really frustrating for first-time users. The best (and quickest) way to get learn all these small details would be to get help from someone more experienced (i.e. a TA/ULA), but the combination of understaffed office hours, large class sizes, difficult psets, bad queueing systems, and people who hog ULAs makes getting help FAR too difficult. On the week psets are due, office hours queues can take up to 4 hours. If you don't jump on the queue soon after it opens at 7:00pm, you might not even get to the front of the line before office hours closes at midnight and the ULAs leave. The lectures and material of the course are good, but not being able to receive crucial help while you're programming made learning much more difficult than it needed to be. ",
            "\u00a0Only if you want to be a CS major ",
            "\u00a0Absolutely.  One of the most interesting, applicable courses you will ever have the chance to take.  Eisenstat is a phenomenal lecturer, keeping the material focused but analyzing it in depth for our understanding.  The psets were challenging and interesting, and if you want to do anything in computer science you need data structures. ",
            "\u00a0I would wholeheartedly recommend it. It's the course where I learned to be a programmer. It's the course where I learned how to attack a problem, learn, debug, and edge case. Stan just deposits information into your brain. It's an incredible experience. ",
            "\u00a0I highly recommend this course, especially the instance taught by Professor Eisenstat. Data Structures is a fundamental course for any student considering a career which even tangentially relates to the areas of computer science and programming techniques and Professor Eisenstat is the professor you want. Just the right amount of rigor combined with support means this course is a gem. Truly exceptional!! ",
            "\u00a0Yes, if you're a prospective CS major obviously but also if you want a really good foundation in programming for other STEM fields; but not necessary otherwise. ",
            "\u00a0I would recommend it if they are interested in computer science. This is a core class ",
            "\u00a0Absolutely. Please take this class. Any Yale student should learn basic programming, and this is the class that gives it to you. ",
            "\u00a0Only if you are really interested in CS or a CS major. ",
            "\u00a0Yes, because you get to improve your skills and sense in data structure. ",
            "\u00a0Yes, if by eisenstat ",
            "\u00a0Yes, despite everything. You either pass this class and learn from it and go on to apply it to industry or wherever you need to, or you realize that what little coding you've done up until that point was as far as you could go. Either way, once you're done with the class, you have a gauge on whether you want to stick with the field. ",
            "\u00a0Yes! Simple tip to enjoy this course: start early! If you think about it, 2 weeks for a problem set is so much time, you just need to use it and not push it to the last week. Sometimes Stan doesn't answer questions well, not because he doesn't know, but because he doesn't understand what the student doesn't understand. But mostly, he explains things very well. ",
            "\u00a0Take this course if it's in your major, or you're already relatively experienced at coding and are confident you'll have at least 10-25 hours extra to spare every week or so. For some people, it may be interesting I can't argue with that, but this is NOT a course to take if you don't feel very confident in your ability as a coder and a quick learner who enjoys a challenge and doing things possibly largely on their own. ",
            "\u00a0Yes, definitely. Full of necessary content for anybody interested in computer science or even just programming. ",
            "\u00a0Nope. This class was poorly taught and did not make me feel confident or successful as a computer programmer. I put in too many hours for this class and did not learn anything. I have taken computer classes before at Stanford and University of Pennsylvania, and those were far more helpful and successful experiences. ",
            "\u00a0It is required by the CS major, so you will probably be taking it for that.  I enjoyed the class with Prof. Eisenstat, and would recommend taking it with him if possible.  The class also provides a good opportunity to try-out CS if you already have some experience but are unsure of your major. ",
            "\u00a0Not unless they were taking it for their major. ",
            "\u00a0Yes! Look, this class was pretty much torture and also the reason I decided to drop CS from my EECS major... BUT, I am really glad I finished out the class because I genuinely think I learned A TON from the course and that the skills won't go unused. Not to mention, Stan is a very smart man and is a great professor. ",
            "\u00a0I would recommend this course to any other prospective CS major, but probably not to other students, unless they really love spending long hours on coding p-sets ",
            "\u00a0No. Only if they needed it for the cs major. ",
            "\u00a0Yes. It is hard but you will learn alot. ",
            "\u00a0I would recommend this class to anyone who is planning on majoring in CS or to someone who really wants an understanding of programming in C, but probably not to anyone else. For someone who wants to take 323, it is nice that this class is taught by Prof. Eisenstat because it gives you exposure to his teaching style. ",
            "\u00a0Yes, but only if you are majoring in computer science. ",
            "\u00a0Yes, but take it with caution. some assignments took my 28 hours to complete. Others are about 10 hours. It is not easy to get an A. ",
            "\u00a0Good course, but A LOT of homework, so I'd say take it only if you have to or if you have a lot of time. I'd guess even taking it credit D wouldn't make it too much less work ",
            "\u00a0If they want to learn more about data structures and programming the course is intense but useful. When it comes to algorithms we do get exposure however that section of the course can become confusing at times. ",
            "\u00a0I would recommend this course only if you are very well prepared in computer science. This is not meant to be a course for first-years at all, but it is sold as if it was the course that follows CS 201 (intro course to computer science). Dont take it if you are just getting familiar with computer science. ",
            "\u00a0I highly recommend this course taught by Professor Eisenstat. His lectures are very clear, and you learn a ton.  Just make sure that you have the time for the work in this class (this includes the lectures) so you can get the most out of all the material covered. ",
            "\u00a0No. It is too time-consuming to be worth taking. It is frustrating to spend multiple long nights a week in office hours because lectures usually do not help much with the problem sets. ",
            "\u00a0Yes because of the programming experience and important knowledge of data structures. However, be prepared to learn a lot about data structures and algorithms very quickly, and learn how to code in C on your own/at office hours. ",
            "\u00a0This class is required for any CS major, and even though it was the most difficult class I have taken so far, I did learn a great deal about data structures and programming techniques in general. I learned to think through a problem step-by-step which is an essential skill to have. Taking the class with Stan definitely made my life much more difficult, but in the end, I do feel more prepared for later CS courses because of the rigor of this class. ",
            "\u00a0For any students that are very serious about majoring in Computer Science/pursuing it as a career path, I would say that enrolling and completing this course is practically a must. However, if you are simply interested in the subject and do not have any existing passions for the field, I would say that easier courses like CPSC 201 would be more fit towards said purpose, as the workload of 223 is very large. ",
            "\u00a0I highly recommend this course to anyone who wants to actually learn how to code, and understand the fundamentals of computer science. ",
            "\u00a0I would only recommend this class to computer science majors and not to people that just want to learn computer science for a marketable skill. You learn how to think in a certain way, not tangible, applicable computer science skills. The problem sets also take a large amount of time, and I would not recommend it to someone who is not willing to dedicate time to this class. ",
            "\u00a0This course was unbelievably difficult. Disclaimer - DO NOT TAKE THIS COURSE WITH STAN IF YOU HAVE NOT TAKEN CS201. I got a 99.5% in cs50 and still struggled immensely given the fact that I did not have the necessary prereq knowledge for the course. Stan does not hold your hand and will laugh at you if you ask him to explain something that you should know prior to the course. ",
            "\u00a0Yes, 223 is a good course in general and Eisenstat is a good professor, he just makes it too difficult. Also, don't make the mistake of taking 223 as your sixth course like I did. ",
            "\u00a0Yes, it will boost your C programming skills and the assignments are usually fun and engaging (if a good amount of work). ",
            "\u00a0It's required for CS ",
            "\u00a0No. There is no real teaching, students would camp out at office hours to complete 20+ hour problem sets. ",
            "\u00a0No. Definitely not. This is a terrible class. It is taught poorly. Don't take it unless you're masochistic. ",
            "\u00a0If you are interested at all in using CS in your career, I would very highly recommend this course, as it teaches about data structures and algorithms that are fundamental to most branches of CS ",
            "\u00a0Yes ",
            "\u00a0I would recommend it, with the disclaimer that to get the most out of this class, a lot of responsibility for learning the material/completing the work falls on the student. ",
            "\u00a0For a good set of programming tools, yes. I am not a CS major and took this class just to learn the skills. While I did become a better programmer and most importantly learnt how to figure out unknown programming problems myself, I did find some of the material boring. ",
            "\u00a0Yes, you will learn a lot about the data structures and algorithms that are used by programmers! ",
            "\u00a0Yes. This course was a lot of work, but I now feel very comfortable with the material. "
        ]
    ]
}