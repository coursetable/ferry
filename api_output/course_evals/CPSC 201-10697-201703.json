{
    "crn_code": "10697",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            8,
            18,
            39,
            42,
            24
        ],
        [
            6,
            39,
            48,
            30,
            8
        ],
        [
            8,
            21,
            34,
            54,
            14
        ],
        [
            12,
            30,
            39,
            40,
            11
        ],
        [
            2,
            16,
            54,
            45,
            14
        ],
        [
            1,
            11,
            43,
            57,
            20
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0I was introduced to functional-based programming, learned about Turing machines, machine architecture, and regular expressions. By far the most worthwhile thing I gained from this course was just pure exposure to a functional programming language, but I'm sad that language was Racket. ",
            "\u00a0I learned a lot of recursion and learned critical thinking and logic skills. ",
            "\u00a0My programming skills have improved tremendously and my knowledge about computing has grown as well. ",
            "\u00a0- Racket (but this is fairly useless knowledge).\r\n- Change of mindset to learn functional programming, and without the use of loops.\r\n- Other interesting concepts like turing machines, boolean logic, circuits, computer structure, regular expressions, and running time of code. ",
            "\u00a0I learned a lot about recursion and how to get less frustrated while learning a useless programming language ",
            "\u00a0recursion, building up computer architecture from the base, knowledge of bash in unix (which is pretty useful), basics of runtime complexity ",
            "\u00a0Not many. I guess I understand recursion better and I know Racket now but that's a pretty useless language. ",
            "\u00a0A strong understanding of functional programming and traditional computer engineering topics (e.g. computer architecture, circuits) ",
            "\u00a0An entirely new language and fundamental knowledge of computers. ",
            "\u00a0Racket is actually great fun, though it takes getting used to. This is an intro CS course (not programming) so you will learn a lot of foundational concepts. I enjoyed myself thoroughly ",
            "\u00a0Students gain an understanding of how computer programs work, from the machine language code to compiling to run-time.  Coding is done in Racket, a recursion-based program.  Fundamental knowledge for all future CS is acquired. ",
            "\u00a0I became a master at a programming language I will never use again. I also gained a much better understanding about the fundamentals of computing, as well as a basic grasp on computer architecture and assembly language programming. ",
            "\u00a0This course was absolutely foundational for me. I had programmed very little before the course, but Professor Slade's organized approach helped me achieve a (relatively) high degree of success. All of the topics mentioned in the course description are covered with good depth. ",
            "\u00a01) Familiarity with the concept of recursion; 2) A basic understanding of computer architecture starting from Turing machines, gates and circuits, random access memory and machine language ",
            "\u00a0I understand Racket and CS fundamentals. ",
            "\u00a0I learned about functional programming using Racket as well as fundamental principles of computing. The practice designing and writing programs to solve simple algorithmic problems may have been the most useful part of this course. The unit on computer architecture and assembly language programming was very interesting to understand how my programs work at a very detailed level and learn how to optimize them. ",
            "\u00a0Strong grasp of the foundations of computer science, including recursion, circuits, computational theory, UNIX, and basic computer design. I never really understood how computers functioned until I took this course. ",
            "\u00a0The concepts I learned about recursion, circuits, computer systems, languages, etc are very important as a computer science major. Though racket was annoying at first, I got used to it and grew to like its simplicity. ",
            "\u00a0I learned a lot about how computers work and their architecture, memory, and recursion. ",
            "\u00a0I learned about many different and interesting topics of computer science, including those that are now outdated or just irrelevant to higher levels of computer science (like Turing machines, how code written in languages are translated to basic machine code, etc). I learned a lot more about different types of recursion as well as the importance of program run time, how cpus and ram work, etc. ",
            "\u00a0The course taught the methods of functional programming: recursion, lambda functions, and memoization. It also laid the foundations for the development of theoretical computer science, exploring boolean functions and algebra, circuit design, computability, complexity, and UNIX. Regular expressions, languages and grammars were also covered, as well as basic computer architecture. The course was implemented in Racket, a programming language which is a LISP/Scheme variant. I learned the essence of theoretical computer science and began to understand the way algorithms are constructed and problems are solved in computer science. It has set the stage for further inquiry in higher level courses by offering a glimpse of the basis for more advanced results and fields of study. ",
            "\u00a0I gained a lot of knowledge on many new programming and computer science topics, such as memoizaton, the halting problem, and tail-recursion. I also learned a lot about functional programming and really developed my skills in that area, which was one of the main focuses of the course. Something that made this class unique was that it gave me an insight into the different ways computers can function at the machine level. Learning about Turing Machines, circuits, and assembly language programming made the class more interesting and useful than a standard programming course. ",
            "\u00a0Introductory CS concepts like recursion, functional programming, computer architecture, logic, circuits, etc.... ",
            "\u00a0I have learned more about computer science in general. Also I have learned what a computer science course is like. Specifically I have learned more about how computers work on a fundamental level. ",
            "\u00a0Learned how to program in Racket, recursion, tail recursion, Turing machines, context-free grammars, & boolean functions ",
            "\u00a0I learned how to code in the language Racket, and some fundamentals of computer science in its original form--how computers are built and used. ",
            "\u00a0Much better foundation in the theory behind computer science and the way computers work ",
            "\u00a0This course was a great introduction to some of the conceptual frameworks underlying computer science. As a non-CS major I found it really helpful, and I no longer think of computers as 'black boxes': I understand how they are built up from simple circuits. I think that the biggest takeaway for me was understanding programming through the 'functional' mindset - that programs can be built as the sums of many smaller functions. ",
            "\u00a0In this class you learn how to write programs in Racket, which is a useless language, but you end up learning about thinking about programming which is important. ",
            "\u00a0A cursory look into recursion, UNIX, computer architecture, memoization, and running time. ",
            "\u00a0I learned how to comfortably progam in Racket, as well as develop a deeper understanding of recursion and how to create recursive programs. I also learned about cool computer science topics, such as Turing machines and circuits/gates. ",
            "\u00a0I learned how to program in Racket as well as some basics of theoretical computer science, ranging from recursion to Turing machines to assembly code to complexity. ",
            "\u00a0I learned the basics of computer science, this course does just as advertised. ",
            "\u00a0I learned a lot about how computers are structured, all the way to machine language up to high level languages. \r\n\r\nI also learned a lot more about how to think through coding. ",
            "\u00a0I learned a lot from this class. It taught me the fundamentals of programming through the breakdown of Turing Machines, assembly language, regular expressions, and everything in between. ",
            "\u00a0Essential skills that will serve as the foundation for computer science majors ",
            "\u00a0Programming in Racket\r\nImportant topics in CS ",
            "\u00a0Got much better at recursion as a result\r\nOf this class. Learned about languages as well. ",
            "\u00a0I felt as if I improved my recursion skills ",
            "\u00a0I learned the basics of computer architecture. ",
            "\u00a0Basic Computer understanding ",
            "\u00a0I learned about various concepts within the foundation of computer science and improved my programming skills. ",
            "\u00a0This course introduced me to the concepts of computer architecture, Turing machines, and memory, and I developed a strong grasp on recursion. ",
            "\u00a0I gained a fundamental understanding of core computer science concepts and history. ",
            "\u00a0A lot more about conceptual elements of Computer Science, much better at Recursion, and understand more basics like computer architecture and string construction ",
            "\u00a0This course taught me key computer science concepts (computability, Boolean algebra, circuits, computer architecture, language, etc.) through lectures and problem sets based on the functional programming language Racket. ",
            "\u00a0You learn a lot about recursion and some decent theory. Mostly just a whole lot of recursion. ",
            "\u00a0I developed strong logical skills through logic based tasks like turing machines, assembly, and circuits. ",
            "\u00a0Racket, basics of computer science theory ",
            "\u00a0Learned much about the theory behind computer science and the functions of a computer. ",
            "\u00a0Learned how to program with recursive/functional programming language. Learned basic principals of computation. ",
            "\u00a0I learned how to apply many important computer science topics such as recursion and dynamic programing. I also learned about basic computer engineering and circuitry. ",
            "\u00a0I learned a lot about not just racket but how computers work. Also, surprisingly, a lot about computer history! ",
            "\u00a0I got a basic overview of the theoretical underpinnings of computers, as well as some practical experience learning how to code in a functional language. At the end of this course you will have a very rough idea of how we can perform computations using simple electric circuits combined together in complex ways, including all the layers of abstractions in between. ",
            "\u00a0I learned how to code in racket, recursively, and how to use UNIX. In racket and theoretically, I learned how to instantiate Turing Machines, TC201 programs (very basic assembly/machine language computers), natural language and Context Free Grammar/Deterministic Finite Acceptors, etc. The different types of languages (e.g. regular expressions), basics of boolean algebra, power sets, boolean gates and circuits, and how to calculate running times of programs.\r\n\r\nThis gave me a better understanding of the theories covered by/used in computer science, which built upon the more code-heavy foundation I'd built in CS50 (CPSC 100). ",
            "\u00a0coding and logic ",
            "\u00a0I understood how computers work on a fundamental level and how previous problems lead to the advent of computer science (such as Turing machines and the halting problem). ",
            "\u00a0Really good understanding of recursion, I felt like I became fluent in the racket language and developed a really good understanding of functional programming. Also I really enjoyed the 8 units that delved into a specific area of computer science to show what is going on at the low level of the computer. ",
            "\u00a0I got to learn fundamental computer science principles such as machine architecture, recursion, etc... ",
            "\u00a0You learn a lot about the fundamentals of computer science through Racket, as well as how to operate unix. ",
            "\u00a0I learned the fundamentals of how computers are built. I also gained valuable coding experience. ",
            "\u00a0Turing machines, computer architecture, recursion ",
            "\u00a0Knowledge of Racket, Scheme/Lisp/UNIX, and knowledge of how a computer is structured and how it works on multiple levels. Knowledge of recursion and much more fluency coding. ",
            "\u00a0Learned about recursion, circuits, boolean expressions, computer architecture, compilers, complexity, sorting algorithms. ",
            "\u00a0I learned a lot about many programming fundamentals. I also learned Racket, and learned the process of doing complex coding problems. ",
            "\u00a0Learned lots of recursion and a bit about computer systems and efficiency. ",
            "\u00a0you learn recursion and how to use base cases + recursive cases in functions. ",
            "\u00a0Learned about a variety of computer architecture/theory related concepts. Became more proficient with recursion. ",
            "\u00a0This class will give you a comprehensive overview of what the field of computer science covers. ",
            "\u00a0I learned a lot about recursion. My ability to think critically in \"programming terms\" improved drastically, and I now consider myself fairly competent in racket. ",
            "\u00a0Even though Racket isn't the most commonly used language, I felt it was really useful in teaching students to think recursively. On top of that, it was nice that everyone was starting from scratch learning Racket. ",
            "\u00a0I learned about the essential basics of computer science and computer architecture. ",
            "\u00a0Recursion ",
            "\u00a0Learned the racket language, and a new way of thinking recursively. "
        ],
        [
            "\u00a0Getting an understanding of how functional programming is definitely a strength of this course. Also we get to learn about some relatively interesting topics like Turing Machines. \r\n\r\nA big weakness is that most of what we do in class feels and truly is incredibly worthless for a future in computer science. Even our professor, regarding one of the final lesson topics, said something like \"this might seem unusual, because this topic is actually useful.\" I think the decision to choose Racket was a misguided one. Professor Slade said it was in an effort to ensure no student had previous experience with the language so that everyone was on an equal playing field. While they certainly succeeded in finding a language no one had experience with, that didn't necessarily put everyone on the same level regardless. If people had backgrounds in functional programming they were already at an advantage from a conceptual and understanding standpoint. Syntax at that point is mostly a minor adjustment. \r\nThat's why I think it was foolish to teach us Racket. Yes, you could flip the argument on me and say well now all I've got to do is learn new syntax when encountering other functional programming languages, but to that I'd say why bother to force the students to go through that? Why not teach us a useful language from the start? Sure some students may have experience already and would perform better, but they would've regardless, and you can't waste your focus on trying to handicap gifted students, just let them excel and focus on the majority who'd really appreciate a useful education. ",
            "\u00a0The classes are not taught very well. Most of it is self-study and practice. ",
            "\u00a0The language, racket, is really outdated. The class would be better taught in something more useful like C, Java, or Python. ",
            "\u00a0The subject matter being fun and challenging is definitely a strength but the obvious weakness is the lectures. I as well as many other stopped attending lectures after the first few weeks because they were not useful to us at all. ",
            "\u00a0- Was pretty interesting in terms of content.\r\n- Would have liked more cooperative structure, be it in terms of more discussions, or the allowance to collaborate on assignments. Since most tech industries emphasise the importance of collaborative coding, it seems only natural that we should start learning to work in groups.\r\n- Currently the only interaction with other students is pretty much solely through piazza. ",
            "\u00a0The lectures were extremely dry and the course material is not applicable to anything ",
            "\u00a0The course goes through important material, but is taught in racket, a fairly useless language outside of the context of the class. The problem sets take a fairly reasonable amount of time, 3-5 hours. The lecture though are incredibly boring and have little value. A lot of people don't go to lecture as Slade essentialy just reads off of three year old compiled notes, which are entirely available online. ",
            "\u00a0Better TA office hour system - the \"queue\" took way too long and it was hard to get any help. TA's should split themselves up by which pset problem they are helping with instead of going from student to student answering the same exact questions. ",
            "\u00a0Strengths: Tons of new material for those with prior programming experience. Very interesting and (at times) fun problem sets.\r\nWeaknesses: Lectures are rather pointless. Professor Slade often goes off topic, and even when he's on topic, it's super difficult to understand what he's saying. ",
            "\u00a0Strengths Office hours\r\n\r\nWeakness lecture was not exciting. ",
            "\u00a0Strengths: Stephen Krewson, the ULAs, Dana's notes\r\nWeaknesses: Slade's lecturing will put you to sleep/you will not learn anything if you bother going to lecture ",
            "\u00a0Strengths:\r\nlearn fundamental concepts essential for future CS endeavors\r\ngain thorough program experience ",
            "\u00a0The problem sets are crazy helpful. I really did not learn much from going to class, but the problem sets were so much fun and incredibly helpful in helping to understand the material. I thought Prof. Slade could have organized the lectures a little better, and towards the end the material was practically not covered at all, yet was all over the final. Also the feedback is incredibly slow, even though everything is autograded and you get practically no feedback on your answers. ",
            "\u00a0Only positive things to say. Great course! ",
            "\u00a0The homework was generally enjoyable as an exercise in programming. Lectures were generally unhelpful (as reflected by attendance numbers) but the lecture notes gave you everything you needed to figure out the concepts involved. Tests were fair. ",
            "\u00a0Racket is an underrated language, and the content of this course has the *potential* to be so amazing, but it just isn't structured well for learning and engagement.  Lectures are dull and psets are needlessly tedious.  Autograde also sucks, since there is no clear feedback as to what specifically you did incorrectly.  This class would benefit from more feedback, via human-grading PSETs and exams that are graded quicker. ",
            "\u00a0I enjoyed the range of topics covered by this course, and particularly its method of teaching students functional programming through exercises exploring other computer science concepts. The problem sets were a good way to exercise the skills we learned. since learning to program well requires so much practice. Help from the teaching fellow and the ULAs was easily available. I would have liked more opportunities for collaboration in this course, though I understand that the introductory computer science courses are more intended to develop individual skills.\r\n\r\nHowever, I felt that the material was sometimes disorganized, especially during Dr. Slade's lectures. The online lecture notes, including materials from other professors, were very useful to fill in the gaps, but I wished the lectures could have done so on their own. I think that a more focused and schedule-driven approach to lecturing would have served this course well. ",
            "\u00a0Slade literally did absolutely nothing. The course material is incredible and extremely engaging to anyone who's interested in theoretical compsci, but Slade somehow managed to mess that up. Slade refused to \"read off the lecture notes,\" so that ended up being him going on extremely unrelated tangents and just going through homework problem on a very superficial level. ",
            "\u00a0Strengths: informative notes and lectures, office hours and especially the ULAs are a godsend, Piazza responses are also illuminating\r\n\r\nWeaknesses: Some of the changes or clarifications to problem sets posted in Piazza should be posted in announcements instead for a particular problem set. Having to go on Piazza expeditions makes problem sets unnecessarily difficult sometimes. In addition, the problem sets at times felt tedious more than challenging. ",
            "\u00a0The problem sets are great at helping you learn the material, however the lecturers are pretty useless. Professor Slade spends half the class discussing random topics and going over the homework, so many students did not even come to class. ",
            "\u00a0PSETs would ideally be less difficult or have more time to do them. It seemed to be the case that almost every week there was an extension on a pset, that usually means that it should not be due with the limited time that it was due. The exams are fair and the class has a lot of support. I would definitely recommend going to the class regardless of notes posted on line. ",
            "\u00a0There could be more walkthroughs about certain skills from Ta's in addition to open office hours ",
            "\u00a0The course is finds its strength in its breadth and rigor. The syllabus, notes, and lectures were comprehensive and the course, certainly, gets to the heart of what computer science is all about. ",
            "\u00a0The strengths of this course are that it covers many different but interesting topics, the expectations for the exams are always very clear, and the homework assignments help solidify and test our understanding of the important material. One weakness is that the office hours were not very helpful for students who needed help with learning concepts since their main focus was to help everyone finish their problem sets. Also, the online notes were sometimes hard to follow because they were mostly made up of large blocks of small text. ",
            "\u00a0Strengths: Problem sets are very interesting. Course covers fairly cool content that gives a nice overview of CS in general.\r\nWeaknesses: Lectures are not really that useful since the content covered in lecture often either does not relate to the problem sets or goes over the topics too superficially. ",
            "\u00a0Strengths: Gives a very broad overview of computer science. Learn different forms of recursion.\r\n\r\nWeaknesses: Does not use a language that will be applicable in student's future. ",
            "\u00a0Strengths are the fair difficulty level of the problem sets, the available help hours, and piazza. Weaknesses are the lectures: they can get pretty boring and as a result, not too many students show up to them ",
            "\u00a0Strengths- we learned important fundamentals that will (hopefully) be important if you continue on in the major\r\nWeaknesses- the instructor made the class lecture painfully boring and largely useless ",
            "\u00a0The course gave a very comprehensive overview of how computers work, and it was interesting to do the psets that eventually came together to simulate the way computers read and write memory and operate. ",
            "\u00a0Almost all of my learning came through doing the problem sets, rather than lecture. The problem sets were extremely well designed, and the TAs were very helpful. However, the lectures covered essentially the same things that were in the notes, so sometimes going to lecture felt pointless. ",
            "\u00a0I would keep deadlines more regular. We started off the year with Wednesday due-dates, so I organized my schedule and extra-curriculars as such. However, the deadline basically changed every week, which made it tough to schedule office hours/ organize my schedule effectively. \r\n\r\nThat said, the ULAs WERE awesome and such beautiful people who genuinely cared about helping me learn--and went out of their ways to do so. ",
            "\u00a0I enjoyed the logic puzzles and word of the day at the beginning of every class. \r\nThe psets were useful/helpful in forcing me to consolidate the material. \r\n \r\nWeaknesses and Suggestions for Improvement:\r\n1. Better organized ULA office hours\r\n2. Better measures of class understanding in class before Professor Slade moves on with the lecture\r\nProfessor Slade would ask questions of the lecture during class, and only a handful of people would answer. Often, he wouldn't explain why the student is correct, or even repeat the students' answer for the rest of the lecture to hear. He'd then move on while I, and many other students I've talked with, remain confused. I'd thus have trouble following the remainder of the lecture, since the material would be based on what was discussed earlier. If Professor Slade introduced a system of semi-anonymous feedback in classes, it would feel a lot less intimidating to tell Professor Slade to reexplain a topic or clarify a particular point. Examples include an online in-class question-asking/question-answering system for students, a \"whistle when you're confused\" system where students are given whistles or another noise-making device to sound when they're confused, or a multiple choice answer system that everyone answers using a clicker or an app.\r\n3. I wish collaboration on psets weren't so discouraged (by the class's policy on the syllabus). Given that the ULA's were very busy, weren't available Friday evening and Saturday, and often had long wait times, it would've been so much easier and reassuring if I were allowed to talk to friends about my pset codes. Many times, I had small bugs that took hours for me to realize but would only take 10-15 minutes to debug if a friend reviewed it and/or compared it to their own code. ",
            "\u00a0The problem sets were essential in helping me understand the topics that were taught, but the lectures didn't seem to offer any more insight. ",
            "\u00a0Strengths -- interesting content, good problems sets that reinforced understanding of the material\r\nWeaknesses -- lectures were pretty boring and dry, no detailed feedback on problem sets (I would appreciate learning how to do things more efficiently, but the problem set feedback I got was just whether I passed the test cases or not)\r\n\r\nBecause the lectures were relatively boring, I ended up skipping many of them and learned the material from the lecture notes and problem sets, which were actually extremely effective at teaching the material. ",
            "\u00a0I often felt that a majority of the topics covered in lecture were irrelevant to the knowledge needed to complete the psets. ",
            "\u00a0Professor Slade tended to deviate from the subject matter at hand during lectures. If he stuck to his online notes then I think I would have learned better. ",
            "\u00a0I thought that sometimes lecture was a little repetitive, but the homework assignments were always engaging and challenging. ",
            "\u00a0Prof. Slade is great, but his lectures just don't do it for me. \r\n\r\nI learned a lot from the psets, they do a great job hammering in the concepts. ",
            "\u00a0More resources especially concerning later topics ",
            "\u00a0Problem sets are fun\r\nA bit slow ",
            "\u00a0Strengths are that the course is very all encompassing and exposes students to lots of topics. Weakness is that sometimes problem set deadlines were difficult to keep track and pace with. ",
            "\u00a0There has to be Moreno structure to this course. Here should be a set lesson plan each class. ",
            "\u00a0Lack of material during lectures that go beyond lecture notes already posted online; no incentive to attend lecture.; ",
            "\u00a0The choice of programming language seemed not entirely necessary or practical considering the concepts taught were not dependent on the language. The concepts taught could just have easily been conveyed using a different, more relevant programming language like Java, C, or Python. ",
            "\u00a0The problem sets for this course were effective in teaching concepts and for the most part, enjoyable to work on. A weakness of this course was the lack of individualized learning. Help hours were often quite crowded with students, and there weren't enough ULAs to help each person efficiently. ",
            "\u00a0Course assignments were fun and challenging. Lectures were only mildly interesting and could be replaced by just reading online notes. ",
            "\u00a0Very weak teaching style, structure, and assignments. Office hours are wholely unhelpful and unstructured. ",
            "\u00a0Class time not really engaging, lecture notes in difficult format to read and sometimes feel disorganized. Engaging psets though ",
            "\u00a0This course covers most important theoretical computer science concepts. While the lectures may or may no be helpful, the notes posted online and the problem sets certainly facilitate learning. This course starts off rather slow paced and then becomes rather fast. ",
            "\u00a0It would be nice if the lectures were more useful for doing homework. As it stood, going to lecture felt like a black hole in the day, where Slades voice would lull you into an almost hypnotic trance and you would wake up at the end wondering what transpired while you were unconscious. ",
            "\u00a0This course appeals to a very mathematical approach of computer science. This course could be improved with more content, I felt it didn't cover as much as it could have. ",
            "\u00a0Racket is cool but it would've been nice to get more experience with another language with real-world applications ",
            "\u00a0Strengths: Covers a lot of material.\r\nWeaknesses: Does not actually cover much of the material on the exams. ",
            "\u00a0I appreciated that the lectures were posted comprehensively online because the in-class lectures were terrible. The professor got sidetracked very easily and stretched concepts out across the semester that should have taken a month or two to cover. ",
            "\u00a0This course provides much exposure to functional programming with its focus on the Racket programming language but does not explore object oriented programming in-depth. ",
            "\u00a0I think more examples should be done in class but otherwise this course was strong. ",
            "\u00a0Strengths: The course covers several highly interesting topics concerning the fundamentals of computing that perhaps every aspiring Computer Scientist should know. The assignments are a great mental workout and teach you a different style of programming. On the administrative side, Lecture notes are comprehensive and assignments are easily available. Instructions for submitting them are fairly clear, and the resubmit policy is generous. Though I have not had much experience with office hours, questions on Piazza are generally answered pretty promptly.\r\n\r\nWeaknesses: There isn't much individual feedback on the code you write. You could spend the entire course writing code that is stylistically wrong/ inefficient and never find out. A lot of time during lectures is also spent on administrative matters that is unnecessary because everything is online. ",
            "\u00a0The problem sets were enjoyable and instructive. The lectures were often unhelpful. ",
            "\u00a0Good contents\r\nClasses can be boring ",
            "\u00a0The course did not have enough ULAs and the material presented in class was difficult to follow and understand. ",
            "\u00a0Strengths: DANA!! (ie Dana's notes, Dana's design of the class). This is such a well designed course. Actually I think it is my favorite (and the best) course I have taken at Yale. I love how you kind of just learn by accident by doing the psets. The psets are so well designed. Love the test cases, love how you use functions you already wrote later on. I felt like doing the psets was such a good way to learn the material, and it was very rewarding to be able to recreate what it going on inside a computer all by myself. Also the ULAs were amazing, especially Steph, Nathan, and Pong. \r\nAlso the Piazza was a great resource. \r\n\r\nWeaknesses: Professor Slade is not a very good lecturer. He is a great guy and his passion for CS really shines through, but although I always went to lecture I never learned everything there. I had to learn everything from Dana's notes and from the ULAs. ",
            "\u00a0The course was good in giving a fundamental overview of CS concepts. Weakness is that the course is in Racket, which is not a very commonly used language. ",
            "\u00a0The lectures werent helpful at all because we spent a lot of time covering material that wasnt pertinent to our psets. The strength of this course are the lecture notes online and office hours. ",
            "\u00a0less emphasis on UNIX and more on the other topics ",
            "\u00a0The lectures could have been more engaging and added to the lecture notes, rather than simply diverging from them altogether. The problem sets were great and were really helpful to my learning. ",
            "\u00a0Strengths: Office hours and having a good support system to help with problem sets. Weaknesses: The lecture could be a bit more engaging. ",
            "\u00a0I thought lectures did not help very much, and that I would have benefited more from smaller discussion groups. ",
            "\u00a0I enjoyed the problem sets, but felt that the lectures were a bit dry and didn't add too much to the course at all. I really liked how active the Teaching Fellow was, though. ",
            "\u00a0Problem sets were well-designed for the most part and helpful to master concepts. Piazza was a godsend. Lectures were not engaging at all and not necessary to learn the material. Some TA's seemed uninformed and unable to help on complex programming bugs. ",
            "\u00a0A strength of this class is the number of office hours open to students. A weakness of this class is the fact that it is taught in Racket, a completely useless language. ",
            "\u00a0This course is definitely a learn-by-doing class. Most of the learning is not done in the classroom lectures, but through trial and error on the homework assignments.\r\nThe help hours that are provided are fabulous, and absolutely crucial for being able to complete the homework assignments. However, given how busy most Yale students are, it can be difficult to find time in a busy schedule to attend these help hours. I would have found it extremely helpful if one of the three days a week of classes was turned into a \"workshop day\", so students could go in to work with TA's, ULA's, and the professor on the homework. This would ensure that all students would be able to attend at least one session of help hours per week.\r\n\r\nAdditionally, this course assumes that you already \"speak programming\". Both the lectures and the associated text reading for the class are written to be understood by someone already proficient in the syntax of computer programming. While some students definitely come to the class already beyond this benchmark, others (like myself) do not. It would have been helpful to make an optional \"beginner\" text available in the bookstore for rent/purchase, or even just to explain that it is totally okay to come to help hours with no idea what you are doing at all.\r\n\r\nThat being said, this course is extremely well structured, and incredibly productive for advancing an individual's grasp of programming as an overarching discipline, as well as in Racket specifically. ",
            "\u00a0I like the homework assigned since it is problem oriented and working through the homework problems actually helps me learn more than the lectures. ",
            "\u00a0This is overall a very good class. If they could make homework 0 optional for those of us who accidentally submitted it wrong, that would greatly improve the course. ",
            "\u00a0Strengths: Makes you think critically and helps you get the hang of coding and how to approach problems \r\nWeakness: Racket isn't a useful language and the homeworks become repetitive ",
            "\u00a0Strengths included the problem set depth and the fact that the lecturers were posted online. Weakness included the fact that the lectures were a little hard to follow. "
        ],
        [
            "\u00a0If you have to take it, take it. Otherwise, there are more engaging comp sci classes out there. ",
            "\u00a0Yes, if you don't know the topics in the course already. ",
            "\u00a0If you can skip to 223, do it. Unless you really like functional programming or something. ",
            "\u00a0The ULA's and TA's were great in this course.  If Stephen Krewson is the Head TA, take this class.  He is extremely knowledgable and can explain the concepts in the course well.  Don't waste your time going to lectures. ",
            "\u00a0Yea, it's pretty fun. ",
            "\u00a0If you need it for your major, yes. If you don't, don't bother, you won't learn anything. ",
            "\u00a0Took it as a non-CS major looking for an extended intro to CS. If that's what you're looking for, it does its job, nothing more. ",
            "\u00a0gives a decent framework to the basics of computer science if you already have some background in CS (like AP comp sci or equivalent), but is also just required for cs majors, so... ",
            "\u00a0You probably have to take this course if you're a CS major but do not take it with Slade. Most of class he would show us random youtube videos instead of actually teaching us. ",
            "\u00a0I would recommend this course for anyone interested in majoring in computer science. For those that want to learn how to program, CPSC 100 is probably better. ",
            "\u00a0Yes! Very valuable skill sets/thinking processes even if you are not a CS major ",
            "\u00a0I enjoyed this class because I like computer science, but I'm not sure I would recommend it to non-majors. I learned a lot about recursion, some important historical/theoretical concepts, computer architecture, etc. I hesitate to recommend this class if Stephen Slade is teaching it because he tends to ramble or go on long tangents that are irrelevant to the curriculum. This made it very hard to pay attention, and sometimes going to class felt like a waste of time. All of the lecture notes are online and are often more comprehensive than lecture, but I feel obligated to go to lecture. In the end, I was going to every lecture but also relying heavily on lecture notes when it came time to do a problem set. Problem sets are fairly manageable, but you must start a few days ahead of time at least and go to office hours. (That said, there are often extensions and I found the problem sets pretty enjoyable.) I found that there are two types of people in this class: hardos who show up to every class, finish the problem sets a week ahead of time, etc. and people who never go to class and start the problem set the night it is due. ",
            "\u00a0It is a required course for the CS major and will give you valuable knowledge for future CS endeavors.  Definitely should take if you plan to be a CS major. ",
            "\u00a0Not the best class but unfortunately a pre-req for a lot. Taking it with Slade was not very enjoyable. We spent about 90% of class looking at weird comic strips that were just barely funny and YouTube videos with under 100 views. All the material we are actually supposed to be learning for the course is largely self-taught through the problem sets and in cramming for the exams. Not that tough but really not an enjoyable time, I'd try to take it with another professor if possible. ",
            "\u00a0Yes! I would recommend 201 to any student at Yale, regardless of programming experience. ",
            "\u00a0It is a generally enjoyable course which pretty much composed of prospective computer science majors. It isn't practical, but it is pretty interesting and you learn a fair amount. ",
            "\u00a0No, I can't recommend this course.  As an EE major, I'm happy I took it, but this is not a class worth your tuition money.  Slade's PSETs were unnecessarily tedious; they weren't extremely difficult, but they were a time sink for no good reason (in comparison to other professors' version of this course).  Slade's lectures were dry -- there was no use in attending any of them, since we hardly learnt anything.  Exams took several weeks to be graded and returned, even though they're all graded electronically.  The exams were relatively easy, but I worry about how that translates to my grade in the class.  As someone who wants to pursue CS further, I *wish* there was a reason to like this class, but I can't find one. ",
            "\u00a0I would definitely recommend this course for anyone with some programming experience looking to practice more and broaden their understanding of the field, whether or not they're a CS major. Although the lectures this semester weren't great, the online notes, problem sets, and ULA help hours make it possible to figure everything out, and it's fascinating material. In addition, the lectures may be better in other years. ",
            "\u00a0No, just learn the material on your own and take other cs classes. ",
            "\u00a0Yes, but only if they have some interest in computer science. Otherwise, the tediousness of some of the problem sets may lose people, but I suppose that is why there is CS50 and other courses as primers. ",
            "\u00a0If you are a computer science major you have to take this course. I enjoyed it, but the work can catch up with you if you do not start the problem sets early. ",
            "\u00a0If you are interested in CS, maybe. ",
            "\u00a0Yes, I would recommend the course, but only if you really enjoy computer science as an end in itself. This isn't a course intended for people with little or no experience in programming and computer science. Instead, you should be reasonably sure that you're interested in engaging with computer science at the theoretical, deeper level pursued in the curriculum. Don't take this class just to acquire programming or utilitarian computer science skills (though you will certainly learn and acquire such skills in the course), take it if you are interested in understanding what underlies programming languages and computing at a fundamental level. You should be interested in computer science as an intrinsic activity rather than as a means to some other goal. ",
            "\u00a0Since this is a required class for computer science majors, most people taking this class probably do not have a choice. For students who want a taste of computer science but who are not planning to major in it, I would suggest taking a class like CPSC 112 instead, since it covers Java, which is a much more useful programming language. However, if you do want to continue to learn computer science topics past introductory programming, then I would definitely recommend the class. I enjoyed the material a lot, and I found it all very interesting. ",
            "\u00a0Good introductory CS lecture class. Take it if you want a broad introduction into CS. Problem sets are fairly interesting and really make you think differently about programming. Lectures are not really that mandatory since all the content can be learned from just reading the lecture notes online. ",
            "\u00a0Yes, especially for students in the CS major who have to take it. If you are not a CS major still consider it because it is an interesting class and teaches you about how computers work. ",
            "\u00a0I do recommend this course as an introduction to the major for students with slight experience in computer science, but particularly with Slade as the instructor, I don't find the course to be very compelling. ",
            "\u00a0If interested in CS, and intend on majoring in it, yes. Otherwise, take 50 or 112 ",
            "\u00a0Yes, I would recommend this course to anyone who wants a better understanding of the concepts underlying computer science as a field of study. I also recommend this course to non-CS majors (such as myself) who want a better understanding of what computation means. ",
            "\u00a0I think that classes should always focus on SKILLS> CONTENT. I think this class did a pretty decent job of that since the language we use is largely useless, what you learn is how to think about problems using the tools you have (recursion!). In that way it was quite awesome. I'm not a quick programmer, so I would say I averaged 10-12  hours on most psets, except for the biggest two (15-20) but again I'm not quick at this stuff. \r\n\r\nThings I wish I knew:\r\n1) If you know how to program, skip 112/cs50 and jump into this, you'll be fine. (Check w/ Slade tho)\r\n\r\n2) CS is gorgeous. Don't be spooked by the dudebros!\r\n\r\n3)Don't get too dependent on OH. Always try to work out a problem as far as you can before asking for help. But don't spend 3+ hrs on a single problem. \r\n\r\n4) If you do honest work on the psets and study, you'll do fine on the first midterm, and then flounder with the second--but it will be okay ",
            "\u00a0We cover a lot of cool topics in the course. However, because the lectures were not the most helpful, I would end up having to learn most of the material through online resources and by having friends explain it to me. If you have the chance, take the class with Dana. ",
            "\u00a0Yes, because it forces you to solve problems recursively, and I believe that this skill will be very useful later on down this, 'CS path.' ",
            "\u00a0This course is required to be a CS major, which is a reason that most people take it. If you want to be a CS major, take it. If not, maybe try to take something slightly more practical. ",
            "\u00a0If you're in CS good luck, have fun. If not then look for another easier, more fun QR course please. ",
            "\u00a0Yes I think it is a very good intro course to computer science and there are a lot of resources for help available. ",
            "\u00a0class is really boring so i mostly didnt go, you can teach yourself everything from the notes. psets are interesting with a few more complex concepts at the end. overall only take for the major requirement ",
            "\u00a0You should take it if you're interested in learning the fundamentals of computing. ",
            "\u00a0Yes, necessary for computer science ",
            "\u00a0Yeah its an enjoyable class, not too difficult, and you learn cool things ",
            "\u00a0Yes I would ",
            "\u00a0It encourages you to improve uour recursion skills ",
            "\u00a0Yes, but only if they have experience with Computer Science before hand. ",
            "\u00a0I would recommend this course to another student based on the concepts taught. ",
            "\u00a0I would recommend this course to people interested in learning computer science from a conceptual standpoint. The lectures were quite boring and didn't add much to the notes already posted to the class website. I found the problem sets enjoyable for the most part and not too difficult. ",
            "\u00a0I would recommend the course to anyone planning on a CS major, but certainly not someone just wanting a taste of computer science. ",
            "\u00a0No, it will likely cause you to greatly disdain CS as a whole. ",
            "\u00a0Yes if you want to be a CS major, no if you're just interested in the subject ",
            "\u00a0I would recommend this course to anyone interested in how computers work, and interested in functional programming. ",
            "\u00a0I guess I would recommend this course to another student, even non-cs majors. It will definitely help you decide whether you want to subject yourself to more cs lecturers in the rest of your time at Yale. If you can stomach the lectures, youll be fine. ",
            "\u00a0Yes, the course is sufficiently challenging and helps with a foundational understanding of computer science. ",
            "\u00a0If they are a CS major. ",
            "\u00a0If you are familiar with programming (meaning, you have taken a previous programming class) this is a good class. You learn how to write functional and recursive programs, which will generally increase your abilities as a programmer. The course material is a bit dry and sometimes a bit confusing, but the course also has its interesting moments. ",
            "\u00a0I would recommend this course to any student interested in computer science. ",
            "\u00a0This course was a lot of fun and really improved my understanding of recursion and functional programming. ",
            "\u00a0The course primarily deals with the nature of computation and how we've built layers upon layers of abstractions to create computers from simple digital circuits. The assignments are done in Racket, a functional programming language that is a dialect of Lisp.\r\n\r\nEven if you're an experienced programmer, chances are you've never really learned what happens under the hood. This course will give you great flashes of insight and expose you to several ingenious ideas that underlie Computer Science. Programming in racket is also a completely new paradigm and will probably be fun if you like problem solving.\r\n\r\nThe material taught in this course will not be as practical useful as CS50 or 223, but it is probably essential material for a computer scientist to know. Lectures can be hit or miss, but the material is all posted online and this is one of those courses where you learn by doing the P-Sets more than sitting in class. Prof Slade is very intellectually curious and always approachable. ",
            "\u00a0Yes, because it is a good introduction to various areas of computer science and psets are enjoyable. It's definitely good for intellectual growth to learn how to think recursively, which racket forces you to do, but if you really had to you could probably skip this course and learn things on your own, especially if you've already taken cs50. ",
            "\u00a0Yes if you are a CS/SDS student ",
            "\u00a0I would not recommend this course to another student unless they had a strong understanding of computer science going in. I struggled a lot with this course despite my CS background. ",
            "\u00a0My understanding here is that this is Dana's course which Slade has now taken over, but he still uses all her notes and her design. Copying and pasting from the strengths and weaknesses section:\r\n\r\nStrengths: DANA!! (ie Dana's notes, Dana's design of the class). This is such a well designed course. Actually I think it is my favorite (and the best) course I have taken at Yale. I love how you kind of just learn by accident by doing the psets. The psets are so well designed. Love the test cases, love how you use functions you already wrote later on. I felt like doing the psets was such a good way to learn the material, and it was very rewarding to be able to recreate what it going on inside a computer all by myself. Also the ULAs were amazing, especially Steph, Nathan, and Pong. \r\nAlso the Piazza was a great resource. \r\n\r\nWeaknesses: Professor Slade is not a very good lecturer. He is a great guy and his passion for CS really shines through, but although I always went to lecture I never learned everything there. I had to learn everything from Dana's notes and from the ULAs. ",
            "\u00a0This course is necessary for CS majors, but for non CS majors, I highly recommend the course as a stepping stone for learning CS. ",
            "\u00a0I would recommend the course to someone who wanted to understand computers but not if they only want practical programming skills. ",
            "\u00a0As someone who isn't a CS major, I found the class material interesting and would recommend it to anyone who's interested in CS, but Professor Slade doesn't teach very well. I rarely went to class because you can just read the notes he posts online. ",
            "\u00a0Definitely take it if you are a cs major ",
            "\u00a0Yes - it's a great introduction to Computer Science, particularly for those with some coding background. And it's a relatively relaxed class with fun problem sets. ",
            "\u00a0Yes. It provides a lot of important background knowledge going forward. ",
            "\u00a0Take it if you're a CS major. ",
            "\u00a0I would highly recommend this course to any student who has a high school background in computer science and is interested in pursuing computer science as a major. ",
            "\u00a0Not unless you're a computer science major. Didn't really improve as a coder, aside from learning recursion ",
            "\u00a0I would recommend this class to another student. ",
            "\u00a0Yes I would. It is a great class for getting your feet wet in terms of programming, but I would let them know that allotting time for help hours at least twice a week is essential. ",
            "\u00a0I think this course could be extremely useful to anyone trying to get into computer science or trying to understand what computer science is. ",
            "\u00a0Yes if you want to learn computer science. ",
            "\u00a0If you already have some experience with functional programming and basic knowledge of theoretical computer science concepts (regular expressions, Turing machines, CFGs), you may be better of skipping this course and taking CPSC 223 or 202 instead. ",
            "\u00a0Yes, if the student is looking to pursue a CS major/minor "
        ]
    ]
}