{
    "crn_code": "10707",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            3,
            5,
            7,
            2
        ],
        [
            1,
            3,
            7,
            4,
            3
        ],
        [
            0,
            2,
            5,
            8,
            3
        ],
        [
            1,
            3,
            6,
            5,
            3
        ],
        [
            1,
            5,
            9,
            1,
            2
        ],
        [
            1,
            5,
            11,
            0,
            1
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Not much - the class wasn't very enlightening as a whole. Did get some hands-on practice with C++, but that's about it. ",
            "\u00a0OOP design patterns,\r\n\r\nC++ programming ",
            "\u00a0C++ and Object-Oriented Design Practices ",
            "\u00a0The concept of object-oriented programming and examples of it\r\nPractical knowledge in C++, Java and Go ",
            "\u00a0I learned a lot about designing programs and object-oriented programming, how to make my code modular, and how to create a program by piecing together different components that work together. Furthermore, I learned more about inheritance and polymorphism, which are core concepts to know for good design. ",
            "\u00a0Having only learned functional programming before, I developed my object-oriented skills. ",
            "\u00a0Understanding of OOP, C++ ",
            "\u00a0I learned C++ programming and object oriented design of computer programs, plus a bit of other topics like low level representation of objects and comparative object oriented programming languages. The most valuable thing was getting to practice programming in C++ and with object oriented design patterns. "
        ],
        [
            "\u00a0Wish the focus would have been more on good object oriented design and less on the semantics of C++ ",
            "\u00a0Class focuses on the wrong things. Much time was spent on minutiae that isn't that important overall when it comes to what matters to a computer programmer. Problem set specifications were vague and the homework wasn't very challenging, which meant that one learns little in the process of completing it. ",
            "\u00a0Strength: Prof. Glenn is a very clear lecturer! The problem sets are very interesting.\r\nWeakness: Sometimes it's hard to follow the lectures as Prof. Glenn switches back and forth between C++ files. ",
            "\u00a0The professor is very knowledgable about this topic and explains everything very clearly, but I wish the lectures and problem sets were more challenging. ",
            "\u00a0I think the class is designed very well to teach the important concepts of OOP. I did feel however that towards the end of the course there wasn't much left to cover and that our focus was a little shifted towards different topics. ",
            "\u00a0The course could have been more organized with assignments returned timely and the tests could have been more explicitly clear on how to prepare. ",
            "\u00a0Strengths -- interesting psets, good learning of C++ (i felt like I acually learned a language instead of just using it as a means to an end) \r\n\r\nWeaknesses: pset specs were super cryptic, sometimes lecture was hard to follow key points ",
            "\u00a0Subject itself is interesting, instructors are all very ready and willing to answer questions. Assignments could have been more interesting (the last few were interesting, the first few were not) by going deeper into OOP concepts / C++ more quickly e.g. involving more design patterns. Reviewing for the midterm and final really helped me check my understanding. ",
            "\u00a0Strengths are the topics covered and the way we got to practice what we learned in class with assignments. A weakness is that lectures were sometimes boring, but I think that's inevitable with the subject material and ultimately worth it. "
        ],
        [
            "\u00a0Comparing Object Oriented to the hodgepodge of courses at Yale known as cs electives, I would definitely recommend this class. It's not as gutty as it sounds (psets take ~5 hours) and the tests aren't a cake walk, but it also doesn't come close to the difficulty of other electives like AI or Computer Networks. The main gripe I had with this class is that the focus was split between C++ semantics and object-oriented principles, rather than spending the majority of the time on good object-oriented design. If I wanted to learn about standard library containers or templates (yuck), I could hit up stack overflow. How to efficiently design a board game? That's not as straightforward. That being said, this class did help me with real world design questions (create an API for a board game) and Prof Glenn is a great guy. So, take this class. You won't be underwhelmed or overwhelmed. ",
            "\u00a0Do not take this class. Jim Glenn's lectures are boring and difficult to follow. Assignments have vague specifications and everybody gets almost a full score on them, so the only effective means of evaluating student performance is through the exams. Private test cases aren't released so you have no idea where you went wrong. As for the exams, they focus on minutiae and intricacies of the programming language that any normal programmer wouldn't have to worry about because they can easily be figured out by looking up documentation or circumvented by good programming practices. That, or he focuses on problems that compilers would easily catch for you. To his credit, Jim Glenn tries, but unfortunately he just doesn't seem to have a good idea of what is important and what isn't. ",
            "\u00a0This class was definitely really interesting. If you have a background in C (which undergraduates should), then learning C++ should be fairly easy - there are some nuances and design patterns that you have to learn, but having a background in C definitely makes it easier! The problem sets are really interesting - Professor Glenn enjoys board games, and when it comes to good object oriented programming, board games make a ton of sense. While specs could be a little unclear at times for what they expected, Professor Glenn and the TA were quick to respond and make clear what was expected. \r\n\r\nAs a professor, Professor Glenn was quite engaging and made things extremely fun and engaging. I would definitely recommend going to the lectures because he writes code and notes as we ask and answer questions and so seeing the notes become the final product that he posts online makes it much easier when you go back to study. In addition, the exams were fair, but I do think I suffered some because I missed some classes that ended up being more central to the exam questions than others.\r\n\r\nHowever, it was definitely a really really fun CS course and I would definitely take it again or another class with Professor Glenn again! ",
            "\u00a0If you are looking to take a relatively straightforward CS elective I would recommend it.  It is definitely helpful to get a better understanding of object oriented programming.  However, the topics of this course could be covered in a third of the time so sometimes it feels like you aren't learning much on a day to day basis. ",
            "\u00a0A course that teaches good OO design, or at the very least you learn some C++ ",
            "\u00a0Totally! The class is in C++ but the design practice can be applied in pretty much any object-oriented language. It also helps me become a more \"organized\" programmer, as I aim to make my code modular, clean and reusable. ",
            "\u00a0A nice class if you want to learn more about object-oriented programming and the object-related features in C++ and Java. Not very intellectually challenging though. ",
            "\u00a0If you are looking for a CS elective and are interested in learning more about object-oriented programming then definitely go for it. ",
            "\u00a0Yes -- good way to learn C++ and OOP ",
            "\u00a0I would absolute recommend Object Oriented Programming with Professor Glenn. It is a great, chill CS elective that teaches real-world programming principles and lets you practice them without being overwhelming or overly focused on nitpicking. Lectures are sometimes slow but that's kind of the nature of learning programming in a lecture-style class. Ultimately, it's worth it to go to class because Glenn drops nuggets of wisdom and he's just a great guy. I took it at the same time as 323 and it was a great balance for the semester. It's also valuable to learn C++ in a structured way rather than tackling it all on your own. Glenn gives great examples and the assignments were very reasonable - none took me more than 10 hours over 2 weeks. Exams are also reasonable. "
        ]
    ]
}