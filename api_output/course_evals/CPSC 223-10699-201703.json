{
    "crn_code": "10699",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            0,
            1,
            10,
            22,
            31
        ],
        [
            4,
            4,
            25,
            20,
            12
        ],
        [
            5,
            3,
            17,
            23,
            16
        ],
        [
            10,
            11,
            16,
            19,
            8
        ],
        [
            0,
            3,
            11,
            34,
            17
        ],
        [
            0,
            0,
            5,
            28,
            31
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Definitely learned a lot about C and data structures and general programming from Professor Glenn! ",
            "\u00a0I gained a much better understanding of (and experience with) C, and learned the implementation details of a number of data structures that I had not worked with previously. ",
            "\u00a0Knowledge: 1. Unix command lines 2. C language 3. Arrays, queues, stacks and linked lists 4. Hash table 5. Binary search tree 6. Adjacency list of graph 7. Heap/priority queue 8. Dynamic programming\r\n\r\nSkills/insight: 1. Strengthen the fundamentals of data structure and I know what the underlying processes are when I used set() in python or priority_queue in C++. 2. Coding and debugging, very important skills as a CS major. ",
            "\u00a0This course is a great start towards data structures in C, per the title of the course. Glenn is a good lecturer, as he makes sure in the beginning of the course that the learning curve for students previously not exposed to C is not too steep, but as usual the course is pretty challenging in terms of problem sets. Expect to spend more time than usual on problem sets. The tests are fair but a bit challenging considering the fast pace of the course. ",
            "\u00a0Knowledge: You are introduced to the C language, data structures, and basic algorithms.\r\n\r\nSkills: How to create programs in C. How to tackle coding problems.\r\n\r\nInsights: Is the CS major right for me? ",
            "\u00a0Basic, yet very important data structure concepts in C. This is not the most engaging topic of discussion in the world but most of the algorithms you learn in class are vital if you end up pursuing more CS classes or having those tech interviews. ",
            "\u00a0You learn C and data structures well. The insight is clear and even though I took this class C/D/F I definitely learned a lot about programming and how programs are built. Made me a more logical thinker, even as a math major. ",
            "\u00a0I learned C programming and data structure. ",
            "\u00a0Learnt practically how to implement various data structures in C, how to debug etc. ",
            "\u00a0I learned basic data structures and how to program in C. ",
            "\u00a0C, Hash Tables and other structures ",
            "\u00a0I learned a lot about memory allocation, that was the main thing. Adts, lists, queues, maps, dynamic programming, bfs, dfs, Dijkstra, bsts, hashtables ",
            "\u00a0I gained a greater appreciation for computing and designing efficient code. We learned a lot about specific data structures and their uses and how they can be combined to create the efficient algorithms we use everyday. ",
            "\u00a0Developed a knowledge of how to program in C and various data structures and programming techniques; also how to debug ",
            "\u00a0I learned data structures! ",
            "\u00a0This is a wonderful class and I became more comfortable with C and coding in general. I learned a lot of materials in this class and learned a lot from the PSETS. ",
            "\u00a0I developed practical programming skills and the ability to adhere to  program specs and build onto existing frameworks. ",
            "\u00a0This course taught fundamental aspects of computer science that were very useful for job interviews, even though C itself is not particularly useful. I learned a lot about how memory works in a computer and some basic understanding of algorithms. ",
            "\u00a0223 gives you a good breadth of data structures, including queues, maps, graphs, and more. ",
            "\u00a0I learned a decent amount of C and used C to create some important programming data structures. ",
            "\u00a0CPSC 223 offers the quintessential knowledge that all CS students should know: data structures, memory allocation, binary search tress, and a quick introduction to dynamic programming and algorithmic analysis. ",
            "\u00a0I feel very comfortable with C now and have a general knowledge of basic data structures. ",
            "\u00a0I got much better at using data structures and learned how to program in C. ",
            "\u00a0This course improved my coding skills and my understanding of different data strucutres ",
            "\u00a0This class is very using for learning the fundamentals of data structures and algorithms! It is one of the most useful CS classes I have taken at Yale. ",
            "\u00a0Data Structures! Exactly what youd expect. ",
            "\u00a0I learned a TON about data structures!! Honestly an amazing class. Everything you need to know for coding interviews. ",
            "\u00a0I learned a lot about computer science data structures and making things run efficiently. ",
            "\u00a0a better knowledge of data structures and how computers use them on a lower level ",
            "\u00a0I learned how to program in C and the basic data structures, linked lists, queues, stacks, hash tables, binary search trees, and heaps. ",
            "\u00a0I learned basic and common data structures and how to program in C. ",
            "\u00a0All the data structures I've needed for tech interviews ",
            "\u00a0Linux and C; programming techniques (data types, modularity, code base, asymptotic notation, dynamic programming); finite state machines; linked lists; stacks; queues; maps; binary search trees; graphs; priority queues; heaps; "
        ],
        [
            "\u00a0The strengths of the course were Professor Glenn and the TAs, who always had ample time to help students with questions which would inevitably arise with many of the assignments. ",
            "\u00a0Lectures could have been far more useful with a traditional slide format instead of freeform discussion and explanation. I often found myself not paying attention in lecture because I felt that nothing was being explained, so I taught myself much of the curriculum outside of the class. ",
            "\u00a0PSETs are straightforward and teach you how to implemenet data structures. Very useful. ",
            "\u00a0Strength: Well-organized, covers the basic and fundamental data structures, good practice of those data structures in homework assignment. Discuss how to do homework in class, which makes life much easier.\r\n\r\nWeakness: None ",
            "\u00a0The course's strengths are Glenn as a lecturer, although lecture notes may be helpful in case students miss out on a lecture, but the grading was extremely delayed and in turn proved to be a disadvantage when continuing with the problem sets, as you could not see the mistakes you were making until almost the second half of the semester, when we got our first problem set back ",
            "\u00a0Strengths: The CS community is very strong and every TA is there to help you. If you enjoy collaborative work and working on large projects, then CS is for you. If you enjoy the whole process of writing a CS program and debugging it and then edge-casing it, you will enjoy the struggle that is 223. The exams were also fair.\r\n\r\nWeaknesses: We did not hear back about pset 1 until we were about to turn in pset 3. ",
            "\u00a0It could definitely be a more rigorous course. Data structures is such an important topic in computer science! I feel that the psets were challenging, but we could have gone a little faster through some of the topic. ",
            "\u00a0The class was well-organized for the most part. Grading of problem sets (which is done through automatic grading script) could have been processed a lot faster for feedbacks. Workload is relatively high. ",
            "\u00a0The psets are where all the learning really happens, but lecture was a good aid to that. Course could provide more of a runup on how to debug code in C -- maybe half a lecture on how to approach a seg fault or something. I also wish we had received our psets back earlier -- it was tough to understand how they were graded for almost half the course. ",
            "\u00a0Very good class with thorough homework and good lectures. Only improvements would be faster grading and more clarity on grading system. ",
            "\u00a0Great problem-sets that force us to learn the material well. Perhaps the problem-sets were made too easy by providing us so much code, relative to previous years. Weakness would be a lack of conceptual class notes at the start of the semester. Class was difficult to follow but improved markedly as the semester progressed.\r\nWould be useful to have psets graded MUCH MORE PROMPTLY. At this point, we are yet to receive the grades in our last 3 psets, meaning that feedback is minimal. ",
            "\u00a0I think that the course sometimes covered things at the wrong pace - i.e. some topics too fast, some too slow. ",
            "\u00a0The psets were good, but sometimes the code given made it confusing to figure out what we were actually supposed to do.\r\n\r\nGlenn's a fun lecturer at times, but lecture isn't really necessary and I learned mostly by looking through the psets and reading about the concepts.\r\n\r\nWe also never received feedback on our code specifically, or would receive a score based on tests that didn't really tell us what our grade might be, which was frustrating, or we would receive scores several months after submission. ",
            "\u00a0Memory allocation stuff is really annoying and can make psets veery long and stressful. The course was really well taught, the topics are interesting and useful. ",
            "\u00a0Part of why I enjoyed the course so much were the problem sets where we were usually assigned to write a data structure and use that data structure for another purpose say analyzing speech. These problems were always really fun to think about and formulate a solution for. A weakness to this course are the lectures, although they provide an overview of our assignments they are difficult to follow as sometimes they are slow and dry and do not provide a lot of new information/insight that we could get from reading from a website. ",
            "\u00a0Glenn's teaching style is great.  His is the first computer science lecture I've been glad I attended.  I felt that his lectures prepared me very well for examinations and problem sets. ",
            "\u00a0This class teaches lots of materials and I learned a lot from the PSETS. It would be helpful if we spent a little more time on certain topics. ",
            "\u00a0The problem sets generally were well designed, and I enjoyed the two week spacing between each assignment since it meant the work didn't burn me out. Lectures were sometimes helpful and James Aspnes had these really good course notes that were a lifesaver to look off of. James Glenn was incredibly helpful at office hours and I learned a lot just by working through bugs with him. \r\n\r\nThe exams, however, I didn't think tested knowledge of concepts very well, since there were a lot of questions that asked you to implement an algorithm by hand or really pedantic questions about pointers. I think having some sort of actual programming question would have been a much better test of knowledge. ",
            "\u00a0I thought the TA's were amazing and unbelievably helpful. Professor Glenn was funny but could sometimes be rather off topic during lectures. However, the problem sets felt like the right amount of difficulty. ",
            "\u00a0A lot of new content is introduced and reviewed in class, and homework assignments are no joke. I wish that grading had been introduced a little more transparently, as for the first half of the course I had no idea how assignments were going to be graded. ",
            "\u00a0CPSC 223 is one of my CS classes so far! I love it so much! It is very well-organized, although there was a long wait time to get our grades for problem sets back (the tests were graded very quickly though). I feel like we went at a great pace--not too fast or too slow--but I would have liked to spend more time with dynamic programming. ",
            "\u00a0This course had a lot of issues. The lectures, especially at the beginning of the semester, seemed very disorganized and it was extremely difficult to follow. Professor Glenn would switch between a terminal and emacs text editing extremely quickly so that it was impossible to actually write code along with him. The example code he used usually ended up online, but if it wasn't up before class it was almost pointless to be in lecture at all because you couldn't look at his code long enough to really follow and understand it. \r\n\r\nAlso, the timing of feedback on homework assignments was not adequate for any real learning in time for exams or following homeworks. Grading was extremely slow (especially since it only required running test scripts!) and was often extremely nit-picky with many tiny edge cases that were not reflected in the public test cases (of which there often seemed to be too few). Going into the final exam with only four out of seven assignments graded was certainly daunting. While the class was quite large, the lack of organization and extreme sluggishness of grading and feedback made it feel like we were all flying blind.\r\n\r\nThe assignments were ultimately helpful in teaching C programming techniques and how to implement some data structures. However, the tardiness of grading and confusing lecture structure made this class highly unpleasant in the process. ",
            "\u00a0Assignments are returned incredibly late, especially considering they are graded just using a test script.  The grading system was also very opaque (nobody knew if there was a curve or what that would look like) ",
            "\u00a0Strengths: insightful and challenging problem sets.\r\n\r\nWeaknesses: I personally do not find teaching via pre-written C code an effective pedagogical tool. Often lectures focused around code Prof. Glenn had written before class. It is very hard to work through the code on the spot, and I found myself spending more class time trying to figure out what his code did than actually understanding the data structures involved. I think discussing the structures and relevant algorithms at a higher level was more useful. ",
            "\u00a0The only strength of the course is how the intensity forces you to learn. Everything else is a weakness. The teaching is awful and the PSets are grueling. The specs are incoherent and often not finalized until a few days before the PSet is due. The skeleton code the professor gives you is often incorrect and the only thing that helped was looking at class material from other instructors. ",
            "\u00a0The course is very well structured and the psets are spread out sufficiently to allow us to be able to complete them. I think that more ULAs would be helpful, and having office hours over the weekend would be a great improvement! ",
            "\u00a0Strengths: Resubmitting homework, midterms were hard but not impossible, grading was fair, textbooks and lecture notes were actually pretty helpful.\r\n\r\nWeaknesses: lectures were incredibly boring, psets were very long, office hours wasn't very helpful, feedback took forever to come in so it was difficult to tell how you were doing, teacher's responses to any question were usually purposefully vague. \r\n\r\nOverall, this course was not the best, but also not the worst CS class. Lectures were dull, but if you read the material on your own you usually do okay. Basically, just be prepared to teach a lot of the work to yourself. ",
            "\u00a0Lectures werent particularly useful, but Prof. Glenn was very helpful and psets were instructive. ",
            "\u00a0Strengths was his ability to introduce new data types, rather than just working out of emacs or vim, he would visually describe and evaluate each new topic in terms very easy to understand. The big weakness would be how disorganized his grading was, having none of the grades back until after the first midterm, and getting 30% of our grade after classes ended. ",
            "\u00a0I learned a ton and Professor Glenn presented everything in a super straight forward way. ",
            "\u00a0The course is taught very well with fair assignments that make you learn the new material. I enjoyed it. ",
            "\u00a0Glenn is a great professor, the only thing I would've liked to see improve is the turn around time on receiving grades on problem sets and exams... we didn't have grades for the last 3 psets going into the last exam, which would've definitely helped the studying process ",
            "\u00a0Professor Glenn is a good lecturer which made class engaging. The only problem is that he took a ridiculously long time to grade, which is frustrating. ",
            "\u00a0Strengths: James Glenn is a fantastic lecturer and very approachable.\r\nWeaknesses: would love more paper exercises ",
            "\u00a0Very long problem sets but very engaging as well. It is one of the few courses that I did not care a lot about my grade and rather just enjoyed doing the homework. ",
            "\u00a0Strengths\r\n- pedagogy of using problem sets to test data structures is appropriate\r\n- method of examining content relied of understanding and application\r\n- resubmission policy is reasonable\r\n\r\nWeaknesses\r\n- problem sets rely on a single trick that is hidden deep beneath a complex tangle of starter code given\r\n- no instructor solution given, leading to students having to guess what is the expected output for various input of programs\r\n- specifications not clearly written, several important parts are obfuscated and rely purely on clear English comprehension skills\r\n- little guidance given to programming techniques, particularly: workflow, testing process\r\n- lectures rely on OneNote which simply do not translate well to personal notes, and implies that instructor jumps all over the place on OneNote\r\n- no overall skeleton of content was given "
        ],
        [
            "\u00a0I think pretty much all students at Yale should at least take up to 223 in their academic careers. Sure, it is hard and you have to put in a lot of time, but what you get out of it is a comfort in tackling challenges in computer programming that span across languages. Even while taking the course I felt comfortable applying my skills in my other courses, and with technology being the way of the future, this would definitely be a good way to stay ahead of the curve. Professor Glenn was great, and I think he made a great addition to Yale's CS department. I would definitely take this with Glenn over anyone else in the department. ",
            "\u00a0Class was alright. The common sentiment is that the course with Prof. Glenn is harder than that offered in previous years by Prof. Aspnes.\r\n\r\nWe cover a lot: arrays, hash-tables, 3 types of trees, heaps, graphs, priority queues, and memoization and DP.\r\n\r\nMy advice is to brush up on C before coming into this class, because otherwise you'd be hung up on the details and won't be able to focus on the psets. TA office hours only got me so far, and mostly I had to figure out everything by myself. This is especially relevant if you've only ever taken CPSC 201 (functional programming) before this class.\r\n\r\nFirst midterm is easy because it's all about the nuances of the language and not really about data structures. Second midterm was a lot harder. The data structures should be at your finger-tips and you should memorize them.\r\n\r\nMy pet peeve with this class is that the psets and exams took forever to grade and get feedback on. As of writing, I still don't have all my pset grades. So I cannot ballpark what my final grade is going to be ahead of time.\r\n\r\nAs a CS major, you have to take this class. Solid for interview season and such, but just be prepared to give a lot of time to it. ",
            "\u00a0I don't think this course offers much benefit to non-CS majors because C isn't a very useful language, but it's a part of the core CS curriculum so you probably don't have much choice. If you're a non-CS major looking to take a good intro CS class, check out CS50/CPSC100 or CPSC112. ",
            "\u00a0I would definitely recommend this course if you are a CS major, intend to work in any form of programming (tech etc.), very useful to learn foundational data structures. A must take if you are thinking about entering industry. ",
            "\u00a0YES!\r\n\r\nMy background: I'm a first-year who have learned competition coding in C++ and python before taking this course.\r\n\r\nThis course gives a solid knowledge of most wide-used data structures and helps you practice coding. \r\n\r\nThe homework assignment is not hard, and as long as you code in a test-driven way, it will take less than 12 hours every two weeks. The exams are well-written and enjoyable to do, also not difficult. ",
            "\u00a0Yes. If you are a CS major, you will have to take this class anyways. But it really is not that bad. And once you have finished it, you will feel ready for anything to come your way. ",
            "\u00a0If you're a CS major, you gotta take it. If you're not, like me, I think there's still a lot worthwhile to be learned. Understanding data structures is a good exercise in critical thinking. C is unforgiving, so you have to be ready for some frustrating late nights, but I think overall I learned a lot. As someone who was always starting the psets at the last minute, it definitely taught how to be disciplined and think logically under time pressures too, but it doesn't have to be that way.\r\n\r\nUnderstanding how programs are written is important, and now that I've taken two CS classes I feel as if I could learn almost any language pretty quickly and be able to competently code, which I did not feel after CS 112. ",
            "\u00a0Yes. You will become much smarter and much more employable with this class. ",
            "\u00a0I would if you are in interested in learning to complete large programming assignments. Don't expect to have your mind blown though. ",
            "\u00a0Yes. Lecture isn't particularly helpful, but the course itself is interesting and you learn a lot just by the nature of the psets you have to solve.\r\n\r\nIt's helpful to understand C pointers and memory allocation really well before you start coding. Coming from a java background, that was really rough. ",
            "\u00a0Yes! If you're interested in learning cs stuff that's useful in real life this can be a really good course. It is hard and the psets are very long sometimes. ",
            "\u00a0If you are a student with a penchant for computer science, math or any related field that will use coding in some way this course is a great course to have. This course really teaches you the fundamentals of good coding practices in the realms of C a relatively basic and universal language. I believe that theory is the most important thing to learn from school and this course does exactly that. ",
            "\u00a0This is one of the more important building blocks of CS, so if you're interested in CS, you should take this course. ",
            "\u00a0Take it with Jimmy Glenn!  Nicest teacher at Yale.  Personable and his lecture isn't a waste of time. ",
            "\u00a0Yes! This is a wonderful class and if you put in the time and work, you will learn so much! ",
            "\u00a0Take this class if you have any interest in doing software related internships since the data structure knowledge you get in this class is often tested on interviews! I really wish I had taken it earlier because it would have helped a lot with the companies I was applying for. James Glenn is a great professor that can be quite funny and is really invested in his students. ",
            "\u00a0If you are interested in computer science, this course is essential to understanding its core tenants. If not, this course is too much work to take for fun. ",
            "\u00a0It teaches you a lot, but be prepared for a ton of work and late nights and stress. ",
            "\u00a0I would recommend it to either a student who needs it for the major or a student who wants to start learning C. ",
            "\u00a0Don't expect to ever get any feedback on anything. We received grades at least a month after submitting the assignment. On Piazza, prof Glenn ignored any questions about when he would provide feedback/complete something, but would respond paragraphs to every other question. ",
            "\u00a0Absolutely if you are a CS major! You need it for the major, but the knowledge is also necessary for succeeding as a CS major in the work field. You'll need the information to pass tech interviews :) ",
            "\u00a0This class is required for almost every CS class at Yale, so you'd think it would be better organized and taught. It is ultimately manageable and does teach you how to program basic data structures in C, but lack of organization, confusing lectures, and extremely slow grading make it highly unpleasant. ",
            "\u00a0I would only recommend this to students who need to take it for the CS major. Any other person taking this class is wasting their time. Seriously, expect to spend around 30 hours per PSet and gain pretty much no useful knowledge. Glenn will basically just throw you into the class without  explaining C at all, so if you dont know it, youre screwed. Half the PSets Glenn just steals from online/Aspnes. This is without a doubt my least favorite class Ive ever taken at Yale, and has made me seriously consider the CS major. ",
            "\u00a0If you are pursuing the CS major then absolutely, but you have to take it anyway! If you are not a CS major but may be inteteresting in working for a tech company in any position that requires a coding interview, then I would and definitely recommend this class. Otherwise it is awfully time consuming if you don't intend to use the skills later in life. ",
            "\u00a0Probably not, but its required for the CS major and the material in this course is pretty relevant. If you are in the major, make sure you read the textbooks/lecture notes, and start psets early. If you are not in the major and it isn't required, you may honestly be better off just reading the textbooks rather than taking the course. ",
            "\u00a0yes, assignments covered a range of topics ",
            "\u00a0Yes. My coding in C greatly improved and the material was interesting. Also required for most later CS study. ",
            "\u00a0Definitely! Teaches you everything you need to know for coding interviews and super interesting. ",
            "\u00a0Yes! If you are a CS major, you need to. If not, it's interesting to learn how computers work! ",
            "\u00a0only if you have to take it for your major or if it's a prereq for another course you want to take for your major ",
            "\u00a0Take it. Even as a non-CS major I learned so much about programming. ",
            "\u00a0Chances are you have to take this if you're considering it, but it's a good course. Data structures are essential to understand as a programmer, and C is just as necessary. Professor Glenn is a good lecturer, though he takes forever in grading. The problem sets take forever to complete, though they are interesting and improve your programming ability. ",
            "\u00a0For computer science majors, you kinda have to take it. I don't know why you would take it if you are not a CS major. ",
            "\u00a0Wow what a class! I took this class without the proper prerequisites, and so time-wise and intellectually it was certainly a challenge for me, but Professor Glenn is a breath of fresh air in terms of the computer science teaching style. I really appreciate the way he takes time to patiently explain concepts to students in class and in office hours, and you can tell he really cares about the subject and his students. psets take people a pretty variable amount of time, but can be as much as 30-40 hours. if you dont have the time to commit to this class, don't expect it to be easy. overall go to office hours, they really help clarify key concepts on the psets and go to class as well- its helpful. ",
            "\u00a0I would, it was critical for my interviews. ",
            "\u00a0Recommend as it is a core class for the CPSC major. Even if not a CPSC major, the data structures required are still probably going to be useful in any programming work. However, if you can learn them yourself using online resources, go ahead. "
        ]
    ]
}