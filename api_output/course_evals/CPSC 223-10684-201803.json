{
    "crn_code": "10684",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            3,
            20,
            19,
            26
        ],
        [
            4,
            10,
            26,
            25,
            6
        ],
        [
            4,
            13,
            20,
            27,
            6
        ],
        [
            8,
            18,
            25,
            15,
            4
        ],
        [
            0,
            0,
            13,
            34,
            23
        ],
        [
            0,
            0,
            6,
            33,
            31
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Became much more comfortable with the c programming language and file organization (.c files and .h files and makefiles, etc) ",
            "\u00a0Lots about data structures and runtimes. ",
            "\u00a0I learned the C language, and learned about data structures and how to implement them to solve problems. ",
            "\u00a0How to organize data, how to think about optimizing my searches for that data, how to construct systems and methods for handling, retrieving, sorting, and using data. How to think about the limitations and possibilities of the C language, what it can build, and how we can implement data types and structures in the language. ",
            "\u00a0Like nothing ",
            "\u00a0This class does indeed provide a good knowledge of different data structures and when to use each kind and the pros and cons of different data structures, as the course description suggests. It also does provide concepts for efficient programming. For those not well-versed in C, this course also acts as a good way to learn the language. ",
            "\u00a0I learned how to implement 2D arrays, linked lists, hash tables, queues, binary trees, graphs, dynamic programming solutions, and efficient run time complexities in C. ",
            "\u00a0I learned data structures which were useful for technical interviews. This class also made me realize that the CS department at Yale is very behind CS departments at other schools. ",
            "\u00a0We started off learning the fundamentals of navigating a UNIX terminal using bash (covered VERY briefly), and programming in C, such as syntax, which text editor to use (Prof. Glenn uses emacs), etc. Then there were the data structures (arrays, linked lists, hash tables, binary search trees and their derivatives, and graphs) and programming techniques such as recursion and dynamic programming/memoization. I feel that the psets do a pretty good job of reinforcing these concepts. ",
            "\u00a0hard but probably good preparation coding challenges ",
            "\u00a0I obtained the skill to write coherent programs in C, implement algorithms using C, and speedy debugging. ",
            "\u00a0You will learn the programming language C and several data structures like arrays, linked lists, hash tables, maps, trees, and more. ",
            "\u00a0General knowledge of Data Structures such as arrays, linked lists, trees (AVL, splay, binary, red-black), and graphs. How to implement these data structures is also heavily stressed. ",
            "\u00a0- Good practice using C\r\n- Excellent introduction to data structures\r\n- Covered arrays, linked lists, trees, hash tables, and graphs ",
            "\u00a0I advanced my knowledge in various data structures and their implementations, and learned how to code in C. ",
            "\u00a0I got better at C and learned about linked lists, hash tables, and many types of trees. I also learned to use valgrind, which is a useful skill. ",
            "\u00a0I learned how to program in C and about various data structures, such as arrays, linked lists, queues, trees, graphs, hash tables, etc. ",
            "\u00a0You get really good at C and at understanding different data structures and when to use them. Programming techniques was a little more understated but you still learn a good amount about memoization/dynamic programming in the last couple classes. ",
            "\u00a0Data structures we learned about included hash maps, hash tables, search trees, linked lists, queues, nested arrays, and graphs. We learned programming techniques such as depth- and breadth first search, backtracking, dynamic programming, GDB, and UNIX. ",
            "\u00a0I learned how to program in C, how to use the terminal to submit and test assignments among other things, and how data structures work internally (analyzing how data is allocated inside structures and how efficient each one is). ",
            "\u00a0Good fundamentals of data structure ",
            "\u00a0I learned programming skills in C and about data structures. ",
            "\u00a0Basic introduction to data structures and programming. lots of fun exercises/PSETs that quickly build up your ability to think your way around problems and to debug your code. ",
            "\u00a0This class is extremely utile for any major, and I highly recommend to anyone who wants to gain applicable skills and logical pathways. I learned various data structures including linked lists, hash tables, binary search trees, graphs and dynamic programming. Professor Glenn makes class engaging and complex concepts easy to follow while leaving an exciting challenge for problem sets. ",
            "\u00a0You learn all the fundamental data structures!!! ",
            "\u00a0AVL trees, adjacency representations of graphs, binary search, pointers, better practice with malloc and c, etc. ",
            "\u00a0I developed the ability to think about problems as organized structures and learned how to organize information for access in the most efficient way. ",
            "\u00a0From this course, I developed the abilities to program in C, working with manual memory allocation and certain data structures. ",
            "\u00a0I gained proficient coding abilities in C and now understand how to create header files and opaque structs. ",
            "\u00a0I learned the C Programming Language and used it to implement data structures including linked lists, stacks, queues, hash tables, binary search trees, and graphs. ",
            "\u00a0Learned about coding in c, pointers, hash maps, binary treees, kd trees, red black trees, dynamic programming, breadth first search, depth first search ",
            "\u00a0Programming in C, Writing efficient code ",
            "\u00a0Skills in C, search trees, hash tables, and more. Also time management in creating programs ",
            "\u00a0By taking this course I learned about Data Structures in Computer Science such as trees, linked lists, hash tables, and arrays. I also learned about various topics such as runtime and memory. ",
            "\u00a0Knowledge of data structure including linked lists, queues, stacks, various types of trees, and more. Good knowledge of pointers and strong proficiency in C. ",
            "\u00a0Learned algorithms ",
            "\u00a0I developed instincts for programming algorithms and using pointers in C ",
            "\u00a0The ability to program in the C programming language. Also the use of different data structures to solve specific problems. For example trees, heaps, priority queues, etc. ",
            "\u00a0I learned about Data Structures, like hashtables, open addressing, binary trees, arrays, searching and sorting algorithms, and C. ",
            "\u00a0Basic Data Structures ",
            "\u00a0Methods of debugging, understanding of data structures, lots about trees ",
            "\u00a0I learnt primarily about the appropriate data structures for specific types of applications, and algorithms to create and manipulate them. I thought the way ADTs were taught was engaging and useful. ",
            "\u00a0I learned to program in C and also learned to use some basic data structures like trees, stacks, and queues. ",
            "\u00a0C, Data structures ",
            "\u00a0program in C\r\nhow memory (stacks and heaps) work in the computer\r\nhow to use Unix and the Zoo (if you didn't take 201)\r\nuse arrays, nodes, trees...all the trees ",
            "\u00a0I learned about basic data structures such as arrays, linked lists, binary search trees and red/black, AVL, and splay trees. ",
            "\u00a0Understanding of some common data structures (Lists, Trees, Hash Tables, Graphs and variations of these mostly) and algorithms for using them effectively "
        ],
        [
            "\u00a0Strength: engaging lectures, helpful code posted online, good ULAs\r\nWeaknesses: sometimes there were far too few ULAs ",
            "\u00a0Course got a lot harder and much much much faster in the second half. Should have gone much faster in the beginning so that you have more time for the later material. Not a good pace. ",
            "\u00a0Glenn's lectures are a little weird--he often presents massive programs that can be hard to grasp at first glance. Would be more helpful if he started from scratch, but that's not always feasible. Some data structures are highly abstracted and his drawings and diagrams helped us visualize them. ",
            "\u00a0I believe this course could've gone a little faster in the beginning. We spent too much time on the basics of C. We had barely even gotten to linked-lists before the first midterm, and if I remember correctly, linked-lists were not even tested. As a result, we ended up basically cramming all of the really important material in the last part of the course, making the final a lot more difficult as we did not have as much time with some of the material (dynamic programming, DFS, BFS, and graphs). Besides that, the course was pretty good. The problem sets were quite challenging at times which allowed the students to really learn the material and improve. ",
            "\u00a0Office hours were really really bad, instruction was quite bad, psets were very poorly explained, distribution code was often flawed ",
            "\u00a0lectures could be better organized to teach the material and more of the notes/diagrams from class should have been posted on the course webpage to help aid learning. Very often it was assumed that some of the slides from lecture would be put on the webpage because they mostly were, but often many key concepts were left off, or the diagrams were made so confusing by the end that they were rendered meaningless. ",
            "\u00a0This course does really make you learn how to code in c so that is a strength.\r\nHowever, this course specifically with Professor Glenn has extremely boring psets and classes. I know the psets and classes were more interesting with other professors. \r\nAdditionally, the tests were simply impossible to do in the time allotted. I really do not think anyone finished it on time as there were 9 questions with several parts each and only an hour and 15 minutes to complete the exam. The content was appropriate but the length was not. This class would be significantly improved if we had shorter exams or more time for them. \r\nLastly, Professor Glenn spent an extremely long time on each topic and yet most people still did not learn the topics. This led to us being behind and having the longest pset of the year (up to 60 hours for some) due the midnight before the 11:35am exam. We then also had a pset due during reading period when there was very few office hours. Even if you did go to office hours it would be unlikely that you would get helped as I got there 15 minutes early one day and still waited on the queue for 4 hours and did not get helped. \r\nThis class needs more office hours, more ULAs, more time for exams, and more interesting content. ",
            "\u00a0It would be great if there was more documentation other than the ",
            "\u00a0Not a huge draw to go to class, but should go it is helpful ",
            "\u00a0The strengths are pretty obvious as are the weaknesses. Professor Glenn is very patient in his office hours, which usually end at 6:30. He is willing to stay for students for very long after his office hour to answer questions regarding algorithms and C. That being said, he becomes another person when we talk about grades. Almost all questions on piazza asking for the date of grade release are ignored by the professor and he is postponing the release of every assignment grade to almost the end of the semester. This means that you will not get very useful feedback as the semester progresses. ",
            "\u00a0The strength is that there is a lot of help available from ULAs 5 nights a week for homework assignments.  The weakness is that, unless you already know C well, you will need to take advantage of all of that help.  Also, homework grades were returned extremely late, so it was difficult to get an idea of where you stand grade-wise till the middle of November.  I personally believe that I would have learned more if the homeworks were easier because I would have been able to give each function more time and concentration. ",
            "\u00a0Interesting material with interesting problem sets that force you to use the data structures (as only one data structure is optimal for solving these particular problems). The work is never bland. ",
            "\u00a0Strengths:\r\n- Interesting problem sets. The k-d tree assignment was especially interesting\r\n- Well-taught. Glenn is a good lecturer\r\n\r\nWeaknesses:\r\n- Personally, I thought graphs were not covered in enough depth. We really could have spent more time traversing the subject in greater depth and breadth. ",
            "\u00a0The psets were challenging, and they always felt good to turn in. Lecture, however, was infrequently stimulating, and it was not always apparent how one concept tied into the other. I wish we had spent more time on the topics discussed at the end of the course, as the final was very strongly weighted towards these topics. Additionally, after the first few psets, grading slowed down considerably. A respectful question on Piazza asking about a grading timeline was never addressed. This made it hard to know how to improve our homeworks. (All of this being said, the challenge of the course was fun. The course itself didn't feel like anything special, however.) ",
            "\u00a0important concepts behind various concepts found on PSets are sometimes explained in class, but sometimes they are not; the course should make more clear at the start whether PSet concepts should be explained or not. Other than this, the PSet problems were challenging, but not too challenging, and the course covered a great deal of material useful to any CS student. ",
            "\u00a0Strengths- Having the assignments due every other week (for the most part) was great. James Glenn is a nice guy, and he gave us 5 free late days, which allowed me to be less stressed. I felt that the assignments were mostly reasonable and could be completed with some help from the ULA's. I also appreciate that the problem sets are 70% of our grade, which allowed me to not stress too much about the tests.\r\n\r\nWeaknesses- The pacing was a bit off I think. Having a problem set due during reading week isn't even allowed I thought, and yet we ended up with a ~20 hour pset during reading week that he claimed would be easy but was not. I know some students were also upset at having the hardest pset of the year due 12 hours before the final, but at least we had like 3 weeks to do it. It also seemed like we focused a ton on trees and not a lot on stacks and queues. Finally, the tests were too difficult, as evidenced by the ~65% averages but I assume they'll be curved so at the end of the day it doesn't really matter. ",
            "\u00a0Strengths: the psets taught me a lot about how to program in C and how to implement various data structures. Some psets were very difficult (I think 2-3 took 20+ hours for me), but I'm very proud of the work I accomplished. The TAs were also super helpful.\r\nWeaknesses: The lectures were kind of dry and hard to follow, and the exams were incredibly difficult. Also, we would hand in a pset and not get a grade for several weeks. ",
            "\u00a0This course is extremely tedious and rightfully so. The problem sets are thought out and clever in pushing you toward understanding what to do. Additionally, TA's and Office Hours are plentiful and extremely helpful.\r\n\r\nI didn't really vibe with Prof. Glenn's teaching style that well but I found lecture to be pretty dry on most days and not always worth going to (ie. an entire day spent on deleting in Red-Black tree). Also, while the exams were graded very quickly, it was often frustrating how slow we were to receive feedback on problem sets. Given that students are spending 20-30 hours on these, it felt frustrating that grading was done weeks after handing it in. ",
            "\u00a0The content of this course felt very important, and I appreciate the breadth of topics we covered. That said, I was far from thrilled thrilled with Glenn's lecturing style. In addition, more advanced CS students say that some topics of 223 (e.g. opaque structs and red black trees) are downright irrelevant. ",
            "\u00a0Course could be improved by allocating time better for each topic. We were quite rushed near the end and barely covered things like breadth/depth first search in graphs, and it still showed up on the second midterm. ",
            "\u00a0Didn't talk abt priority queue and sort algorithms, bad schedule ",
            "\u00a0They are taught in a large lecture which is not the best way to learn. I have friends at other universities that tell me about how their programs are run and they facilitate learning much better. They have smaller classes. On top of that, they have lab hours which are office hours with smaller groups so you do not run into the issue where there are 30-40 students looking for help while there are only 2 TAs working office hours. I believe the entire CS department can restructure the class in order to make classes better. ",
            "\u00a0Lots of good exercises. Feedback is intermittent, and it's hard to know how well you're doing and to improve your programming methods. So many students end up spending a ton of time working out tiny bugs, etc. but maybe that falls under the pedagogical purview of this course. ",
            "\u00a0The strength of the course was Professor Glenn and the content. I looked forward to class each day, and the problem sets provided useful practice to apply our knowledge. Professor Glenn is the best. No weaknesses to report! ",
            "\u00a0Its hard but some more feedback and preparations for exams in class would be nice. ",
            "\u00a0Regular CS fundamental class, ok as it is. ",
            "\u00a0I think that the course is very strong but that it could benefit from a discussion of debugging during class time. The only time to learn this was during office hours and I believe it is unfair to make a student come to office hours to learn something necessary for the course. ",
            "\u00a0I think the course has good structure and organization. That being said, I think it could have expanded into a wider breadth of topics, especially data structures. ",
            "\u00a0The psets are very challenging, but support at office hours lacked at times. There were many nights where there would only be one ULA for 25+ students and the ULA would only get to 3-4 people on the queue. Hiring more ULAs should be considered. ",
            "\u00a0I generally enjoyed this course and though it was tuaght very well. I wish we would have spent less time on C at the beginning of the course and would have moved onto the important data structure content earlier. We ended up squeezing dynamic programming and graphs into a single class period each. I wasn't very comfortable with this content and it ended up making up a significant part of the final exam which was frustrating. ",
            "\u00a0Strengths: the coding assignments help you understand the material really well and theyre due every other week. If you go to lecture, the material is engaging. Glenn is fairly accessible and helpful during office hours. \r\n\r\nWeaknesses: the notes are just Glenn writing on his iPad so its very messy and hard to understand. A lot of material was crammed in right before the final (all of it showed up on the final btw) so it was really difficult to get a good grasp of fairly important material. Theres a coding assignment that was really difficult due during reading period. ",
            "\u00a0great assignments, great lectures, i dont have any areas for improvement ",
            "\u00a0Was really well taught. Not really any comments ",
            "\u00a0Strengths are it covers alot of important topics in computer science pretty well. A weakness I felt was that office hours had no where near enough people. There are times I would walk in and the queue would be 20 long and I would stay for the remainder of office hours and receive no help. Additionally, notes are difficult to take for the class and there isn't really anything posted after if you miss details. Lastly, for assignments, test cases were never released making it difficult to know where your program went right or wrong. ",
            "\u00a0Receiving grades back earlier would have been better to see how to improve our code for later psets. The lecture notes were kind of hard to follow if you missed a class, but in class glenn was good at explaining concepts and drawing them out with many diagrams. ",
            "\u00a0Hard ",
            "\u00a0The hardest problem set was due the day before the last exam. This was tough. ",
            "\u00a0The problem sets were very in depth and they taught me so much about programming. It was an extremely intensive course and I would spend on an average 40 hours on each one. It would be so helpful if there was more support on how to approach the problems, because many times I would be coding something that was wrong, and then I would need to restart. I wish there was an easier way to test our understanding because the private test cases were very difficult. ",
            "\u00a0strengths: the psets are fun, challenging, and helpful to facilitate learning.\r\n weaknesses: teaching is not very clear or organized. ",
            "\u00a0The course was very challenging but I felt like its greatest strengths were the challenging nature of the PSET. I felt like the workload was not well spaced out during the last few weeks of the course. ",
            "\u00a0I would say a weakness of the course was the sometimes vague problem sets for which I needed to rely on office hours each week to complete. ",
            "\u00a0Strengths: you learn data structures\r\n\r\nWeaknesses: wait time in office hours ",
            "\u00a0The strengths of this course include the skills that one would develop after taking this course. A weakness of this course was the planning since the last two weeks of this course were too packed with assignments and an exam that students felt as if they were being cheated and were unable to succeed. The last few weeks of material were also rushed and it seemed as if the professor had fallen behind schedule which ruined the experience for the students. ",
            "\u00a0This was the most challenging course I have ever taken at Yale. I spent longer on one problem set than I spent studying for the ACT. The lectures were not very clear either, in some ways they moved too slow and other times they jumped around and were too quick to follow. The specs on the problem sets were very vague and even confused the ULAs. The course is enjoyable if you understand the concepts on your own and don't rely on lecture to teach you. ",
            "\u00a0Content is solid, problem sets are usually relatively fun. Teaching requires improvement; prof. Glenn is good at explaining things but lectures can be a little dry sometimes and there's no real community around the course. I felt very uninspired to go to class. Maybe more pages should be taken from Harvard's CS50 course. "
        ],
        [
            "\u00a0Yes, if you like programming it is fun ",
            "\u00a0Yes. This is so useful. ",
            "\u00a0Yes, I would recommend it. You do learn quite a bit and your skill with C and data structures will improve. ",
            "\u00a0You have to take this, but Glenn made it exceptionally painful ",
            "\u00a0I would recommend this course to a student wishing to become a competent programmer but only by putting in the work. P-sets are due every other week and take 20-30 hours each. I would also only recommend this course to a very self-sufficient student as lectures only serve as a brief introduction to course concepts and the actual learning of material occurs entirely out of lecture, so students need to be able to learn material on their own. Additionally, I would recommend this course only to someone with computer science experience as ULA office hours are most often a madhouse and there is a very long wait to be seen. Lectures are ok, not terrific but not awful, but only about half of the students show up to lecture. ",
            "\u00a0I would recommend this class to any student who wishes to build their knowledge of data structures, as they are essential for software engineering and many other endeavors in coding. However, the course's problem sets took me from 20 to 50 hours to complete, so I would also recommend that you go to every lecture, Professor Glenn's office hours, and the student help hours often. Be prepared to work hard and learn material at a rapid pace. ",
            "\u00a0I would recommend this class but not with professor Glenn. It is a large time commitment but teaches what you need to get a job in CS. ",
            "\u00a0Taking this course with Glenn was much harder than with Aspnes, but you learn much more from Glenn than you feasibly would with Aspnes. ",
            "\u00a0required:) prob not if not a cs major ",
            "\u00a0Not really. ",
            "\u00a0I would recommend this course to any one who enjoys computer science, as it will separate those who are prepared to major in computer science from those who want to learn computer science for fun.  Just make sure to take the course when you have an easier semester. ",
            "\u00a0As a CS major this class is absolutely critical. The material is interesting and I thoroughly enjoyed the lectures. ",
            "\u00a0Yes, it's a great course. Would recommend for non-CS majors (as I was) as it teaches good programming skills and understanding of data structures (and some very basic algorithms such as BFS, DFS, tree balancing, etc.) that are useful across many fields. ",
            "\u00a0If you're considering this course, then yes probably. I am not a CS major, but am glad I took it and sharpened my programming skills. If you feel you may not be interested in C or data structures, this may not be for you. ",
            "\u00a0The course is mandatory for CS students, and for good reason; the course takes into account much of the basic building blocks and the foundations of computer science. However, I would not recommend this course for a non-CS student, or for those with little to no CS experience beforehand. ",
            "\u00a0Yes! Probably only for a CS major or someone with a lot of time to dedicate to it. However, I found the problem sets to be sort of fun and office hours were always there for me when I got stuck. ",
            "\u00a0This course was incredibly challenging, but I would recommend it to other students. Data structures are crucial for any CS major. Arrays, linked lists, queues, trees, graphs, hash tables, etc. will definitely show up in software engineering internship interviews. Just be prepared to spend a lot of time on the psets. Glenn gives 2 weeks to complete the psets, but they are pretty long. ",
            "\u00a0Take it if you have the time. You learn 90% of the material in this class by doing the problem sets, which usually take around 20 hours (but you have 2 weeks to do them). TA's are very helpful and office hours are plentiful, so as long as you have the time, they will help you get through the problem sets. Midterms are extremely difficult but curved so if you study the material well, you'll be fine on these. Lecture is a bit dry but Prof. Glenn's notes and example code were very helpful as well. Overall, the intellectual challenge isn't overwhelming, but only take this class if you hate free time. ",
            "\u00a0Yes, overall I was satisfied with it. I'm not a CS major, and I hadn't taken 201 or learned CS outside of CS 50; even so, I did fine in the course. ",
            "\u00a0I would recommend the course because of how important coding and data structures are in today's society. Lots of problems can and will be solved by software which is something I realized while taking the course. ",
            "\u00a0Yes, I would. Despite it being difficult to learn, the information that is covered is very interesting and fun to work with. I enjoyed doing the work for this class I just wish it was organized differently. ",
            "\u00a0I would recommend it if you're interested in a more rigorous CS course. I took this class without any other Yale CS courses since I had some programming experience, and it was a reasonable class. You can do well in it if you work on programming assignments early and find some friends to work on edge cases with. ",
            "\u00a0Yes, I highly recommend taking this course with Professor Glenn! I recommend this course to people of all majors, as I think the ways of thinking and problem solving will be useful for everyone, especially in an age of growing technology. ",
            "\u00a0Definitely take this class if you want to know more about data structures. It is the kind of stuff you will be asked in countless interviews in the future. ",
            "\u00a0Take it if CS / Stat major. Helps practice coding. ",
            "\u00a0I would recommend this course to anyone who wants to learn more about computer science. ",
            "\u00a0Yes, I would recommend this course. At the end of the day, it is an essential course to any computer science major, and is taught more or less comprehensively. To non-majors, it would be a difficult class but an interesting one nonetheless. ",
            "\u00a0Yes, this class is necessary for any CS major. ",
            "\u00a0Yes. I would definitely recommend this course for anyone who is interested in learning the core data structures in computer science. ",
            "\u00a0Yes- Jim Glenn is a great professor with whom to take this class ",
            "\u00a0Yes. Glenn is an excellent teacher who really designs the psets to help you learn the concepts ",
            "\u00a0I would recommend this course if you are really interested in computer science and want to dive deeper in. If you want just an intro to Computer Science CS50 or CS112 would be better choices. However, this class is really essential if you want to understand learn to code well/do programming interviews. ",
            "\u00a0Data structures is a very important topic, and I learned it well from this class. The problem sets were fun and engaging, and having two weeks for problem sets provided scheduling flexibility. The final was super hard and crunched on time, but everyone felt that way. If you put in the time you can do well on all the psets. Definitely helps to know some C beforehand. Glenn is solid too  explains concepts via examples and diagrams nicely. ",
            "\u00a0Yes ",
            "\u00a0I would recommend it to anyone taking the major - it provided the necessary skills to move forwards in the major ",
            "\u00a0Yes, if they want to learn important topics for anyone going into Computer Science, like space and time complexity and data structures. ",
            "\u00a0Yes but be careful with who you are taking this course with. Prof Glenn is very nice and caring :) ",
            "\u00a0Yes, good way to get familiar with data structures and programming methods ",
            "\u00a0Yes, it is a staple in computer science. ",
            "\u00a0I would recommend the course to a student who truly loves programming. ",
            "\u00a0It was an entirely fine class. Definitely a lot of work, but that's what you expect. Glenn is pretty disorganized and has pretty bad timing, which could really suck for students come finals time when you still have a new pset, but it's not the worst thing ever. It's fine. Take it if you have to. Take it if you want to learn data structures and don't have to. It's fine. ",
            "\u00a0just think about the class name: Data Structures\r\ndo you want to learn about data structures? if yes, take it\r\nknow that it will be a decent amount of work ",
            "\u00a0I would recommend this course to another student since it did assist me with understanding data structures and developing skills with writing code. ",
            "\u00a0I would recommend this course only if you need to take it for your major. If not, you can learn data structures by reading Geeks for Geeks or Tutorials Point. ",
            "\u00a0Only for the major requirement. If you're a non-CS major, take CS50 then teach yourself or look at more interesting/niche courses here "
        ]
    ]
}