{
    "crn_code": "21892",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            7,
            16,
            29,
            37,
            20
        ],
        [
            14,
            30,
            41,
            18,
            5
        ],
        [
            16,
            19,
            35,
            32,
            5
        ],
        [
            23,
            31,
            25,
            22,
            7
        ],
        [
            0,
            2,
            28,
            52,
            27
        ],
        [
            0,
            8,
            35,
            50,
            17
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0I got better at writing proofs ",
            "\u00a0A deep affirmation that I have no interest in being a computer science major or doing any kind of theoretical computer science research. ",
            "\u00a0I learned that as usual, Yale CS lectures are useless and the only way I'll pass the class is by reading the book and going to the gracious TAs for help. But then again, if you've gotten this far in the major, you should know that already. ",
            "\u00a0Learned Algos - very theoretical, a good foundation to further advanced CS electives. ",
            "\u00a0I learned the basics of algorithm design and how to evaluate the efficiency of algorithms. ",
            "\u00a0Learned greedy algorithms, dynamic programming, network flow, and running time classification of algorithms. ",
            "\u00a0You learn a few common algorithmic paradigms (divide & conquer, dynamic programming, greedy), how to asymptotically analyze runtimes, and how to prove algorithms are correct using loop invariants, as well as some open questions like P vs NP, NP-complete, PSPACE, etc. ",
            "\u00a0Thorough understanding of basic and complex CS algorithms. ",
            "\u00a0Stable matchings; greedy algorithms; shortest paths and minimum spanning trees; dynamic programming; divide and conquer; network flow; P vs. NP ",
            "\u00a0Very standard algorithms. ",
            "\u00a0Algorithm design ",
            "\u00a0Not that much honestly ",
            "\u00a0I learned how to approach thinking about algorithmic problems and about some common/famous algorithms to solve well-known computational problems. ",
            "\u00a0Algorithmic problem solving, good for better code understanding and interviews ",
            "\u00a0Gayle-Shapley, dynamic programming, etc. ",
            "\u00a0Fundamental algorithms ",
            "\u00a0Basic algorithms, how to come up with algorithms, how to solve problems with knowledge of existing algorithms ",
            "\u00a0Algorithmic design, proofs, problem solving strategies ",
            "\u00a0Developing efficient algorithms. ",
            "\u00a0Different types of algorithms, writing pseudocode, time complexity analysis, etc. ",
            "\u00a0I learned about different algorithms to apply to solve words problems. ",
            "\u00a0Algorithms: (matching, greedy, dynamic programming, divide and conquer, flow graphs, NP vs P) ",
            "\u00a0learned about algorithms ",
            "\u00a0Build a toolset to deal with difficult algorithmic problems. Types of computational complexity. Creative thinking. ",
            "\u00a0In this course, we developed skills of writing proofs, coming up with pseudocode, and analyzing runtime.  The biggest focus was on algorithms pertaining to graph theory (e.g., minimum spanning trees, shortest paths). ",
            "\u00a0I leaned about a variety of types of algorithms, methods of approaching them, and proofs regarding the correctness and optimality of these algorithms. ",
            "\u00a0I learned about different algorithms (Gale-Shapley, Dijkstra's, Ford-Fulkerson, etc.) and theorems and how they can be used to solve various problems. I also learned how to prove the correctness of algorithms using invariants and prove the runtime of an algorithm. ",
            "\u00a0Different algorithms ",
            "\u00a0learn classic algorithms and how to transform other problems into those algorithms ",
            "\u00a0I learned many of the most important algorithms in CS such as Dijkstra's, Gale-Shapley, Fork-Fulkerson, etc. I also learned how to adapt/modify these algorithms to fit new situations. ",
            "\u00a0I learned so much about algorithms! DP, divide-and-conquer, network flow, P/NP problems, asymptotic notation, minimum spanning trees... ",
            "\u00a0I learned a lot about algorithmic thinking. ",
            "\u00a0I learned about many common examples of computer algorithms (shortest path, perfect matching, etc) as well as methods for writing, optimizing, and proving correctness and difficulty of computer algorithms. Specific topics included proofs and loop invariants, stable matchings, divide & conquer, dynamic programming, P and NP, maximum flow, runtime, and graphs. ",
            "\u00a0Learn how to analyze and prove runtime of various algorithms ",
            "\u00a0Basic introduction to classic algorithmic problems ",
            "\u00a0I learned a lot about algorithms and their applications and time complexity. ",
            "\u00a0The basic classes of algorithms, and how to devise algorithms that fit into these general categories. ",
            "\u00a0Surveyed several important algorithms and gained insight on how to approach writing proofs on algorithms. This class helped me get comfortable with proofs on algorithms, but I feel like I didnt really learn how to write or implement algorithms that well. ",
            "\u00a0I loved the content of this class  I learned a lot about graphs & graph theory, matching, scheduling, classifying problems such as P and NP, and optimization. ",
            "\u00a0One learns the basic algorithm strategies (Greedy algorithm, dynamic programming, divide and conquer, max flow) as well as about the whole P vs NP debate. ",
            "\u00a0Strong grasp on already existing algorithms. ",
            "\u00a0Taking Algorithms made me a smarter person. I also learned a lot of concepts: big-O, algorithms for stable matching (Gayle-Shapley), scheduling, shortest path (Prim/Dijkstra), MSTs, and maximum flow (Ford-Fulkerson). I learned about greedy algorithms, dynamic programming algorithms, divide-and-conquer algorithms, and a lot about P/NP/reductions. The material in this class is extremely applicable to the technology industry and to software engineering interviews. ",
            "\u00a0I learned about different problems that can be solved using algorithms. The beginning of the course focuses on different problems and polynomial-time algorithms, while near the end we broached into other topics like NP-complete problems. I learned how to design algorithms for various problems. ",
            "\u00a0Stable Matchings, greedy algorithms, minimum spanning trees, dijkstra's, Divide and conquer, Dynamic programming, network flow, P NP ",
            "\u00a0I became much better at reasoning about various algorithmic techniques, learnt more about the different classes of algorithms, and became more adept at proving their correctness. It was fascinating to probe into the structures of problems, and brainstorm how to design procedures to optimize the computation of a solution as much as possible. ",
            "\u00a0Pretty much what the course description says ",
            "\u00a0different types of algorithms commonly used and referred to in computer science ",
            "\u00a0I learned essential concepts in computer science and many famous algorithms and important skills in proving them. ",
            "\u00a0The course covers basic categories of algorithms including greedy algorithms, shortest path, dynamic programming, and divide and conquer, as well as P vs. NP and complexity class proofs. There was a focus on applying and modifying the standard algorithms to solve realistic problems. ",
            "\u00a0Good algorithmic knowledge ",
            "\u00a0General Ideas of useful algorithms and algorithmic analysis ",
            "\u00a0I learned so much. Literally everything (save a few things reviewed from MATH 244) was new to me, but it was all very fun to learn: invariants, sorting algs, scheduling algs, shortest path algs, etc. Everything was immediately applicable to common real world problems, so it was very rewarding to see how such problems can be solved. ",
            "\u00a0matching, dp, invariant, shortest path, HP ",
            "\u00a0Good ",
            "\u00a0Learned about writing and analyzing algorithms. ",
            "\u00a0I don't really know tbh. Maybe I became better at solving algorithms. I learned about various algorithms. ",
            "\u00a0I learned a bunch of algorithms. I learned their time complexity and how to implement them, kind of. I kind of learned how to write one. And how to prove that one is good. Kind of. ",
            "\u00a0I learned about computer science algorithms. "
        ],
        [
            "\u00a0strength - great ULAs\r\nweakness - When a pset or exam gets graded, could you press the button on gradescope that notifies us? Otherwise we just have to keep checking gradescope over and over again until the grades are released. Also, if there is important post on piazza, could you press the button that emails everyone about it? (bypass user's notification preferences or something like that) ",
            "\u00a0Strengths: If you go to office hours you'll be able to get good grades on the homework and probably come out with a decent grade in the class.\r\nWeaknesses: The lectures are boring and felt disorganized. If you had to miss class for any reason or just wanted to review past notes, the uploaded OneNote pages made little sense out of context. When Professor Glenn worked through problems it made decent sense in class but when you look at the notes later, there's no sense of order to be able to understand how the problem went. Perhaps if the lectures had been recorded these notes would have been more useful. ",
            "\u00a0The strengths are the TAs, especially Marko, and the book. The weaknesses are the instructor. ",
            "\u00a0Strengths - you end up learning a lot of advanced algorithms which lay the foundation for future coursework in CS. Problem sets were relatively do-able, definitely possible to do on your own, but also office hours are incredibly helpful. I'd say that lectures are well-attended and interesting as well, Professor Glenn is a very good and funny teacher. I'd say that the only problem with this course is that grading is really slow - going into the final exam, we had 3 of our 6 psets back. ",
            "\u00a0The weaknesses of the class were that it was all large lecture-based and not more personal. If it was more personal I think it would help to make learning easier. ",
            "\u00a0Strengths - comprehensive overview of the foundational structures in algorithms\r\n\r\nWeaknesses - tough to follow in lecture ",
            "\u00a0The psets are interesting and kind of fun but the lectures felt fairly slow and it was hard to pay attention. ",
            "\u00a0The homeworks are really interesting, although they can be hard sometimes and require a lot of thought to solve.\r\n\r\nI'm not sure that Glenn is the best lecturer. I mean, yes, his voice is clear and not too quiet (unlike some other CS profs, e.g. Dana Angluin), but the way he phrases things can be extremely confusing, both during lectures and in homeworks/exams (on both midterms, there are questions which a lot of people misunderstood; the problem statements were made up of extremely long sentences and complicated grammatical structures that make you wonder whether Glenn should instead go teach English or Legal Writing). But other than that, he's a good professor and is willing to answer questions should you have any.\r\n\r\nThe feedbacks are generally slow, although purportedly the situation was even worse last year. By the time I write this (which is Tuesday of reading week), we still haven't got our 4-th problem set score back (there are 6 hwks in total). Ironically we already had our in-class final. But they were pretty quick in grading the exams (usually a couple of days after the exam). ",
            "\u00a0Overall, actually a very good course. I thought it was taught at an appropriate pace and was always pretty engaging. What impressed me most is that by halfway through the semester, the teacher was calling on all students by name which showed he really cared about the class. The one thing is that there was rather sparse feedback on work, though I understand that that's relatively hard to give in such a large class. ",
            "\u00a0It's just a good algorithms class idk what to tell ya man ",
            "\u00a0Glenn is a great lecturer but he moves very slowly and talks in a monotone so its hard to pay attention. The graders also never graded anything on time so even though its the end of the year I don't know how I'm doing in this course :') ",
            "\u00a0The course was a fair introduction to algorithms, and I found the pacing to be sufficient. The major downside of the course is that problem sets are not graded in a timely manner. There were 6 problem sets this semester, and the fourth one was just graded yesterday (and the fifth and sixth have not yet been graded), even though we had our second (and final) test in class over a week ago. \r\n\r\nSolutions to the problem sets were released soon after submission deadline to aid studying for the test, but it would have been nice to have our own graded problem sets to see what types of mistakes we commonly make, to better avoid those mistakes on the exam. ",
            "\u00a0Problem sets are comprehensive. ",
            "\u00a0I think lectures were not done in a way that made it easy to take notes and refer back to them. Often the professor would already have written most of the notes and just fill them in during class, which made it impossible for me to then take notes with annotations to make sure that I understood them. It would be helpful to have been given his notes outline to then take our own notes on. ",
            "\u00a0The lectures are pretty unengaging, and the homework is pretty much never returned ",
            "\u00a0Lectures consist of students following along as Professor Glenn solves problems, making it hard to follow and somewhat disengaging. I wish that the goals and tasks of lectures were more clearly defined to make it easier for students to know what the problems we analyze together are actually leading up to. The greatest strength of the class is the ULA teaching staff, especially for problem sets. The problem sets were quite difficult, and many times, students actually needed to go to office hours to get help from the ULAs because the solutions were so specific. It got to the point where the TF would hold weekly problem set review sessions and the classroom would consistently be overpacked, with students sitting on the floor and standing outside just to get help on problem set questions. ",
            "\u00a0The material is very interesting but lecture is not that engaging ",
            "\u00a0I was expecting a bit more CS-related problems. A lot of the course was very theoretical and although that's ok, I would've preferred a bit more CS in the course. ",
            "\u00a0I thought the problem sets were very informative and collaborative, but I didn't get much at all out of lecture. ",
            "\u00a0The best part of the course were the ULAs at office hours! They were amazing and really helped teach the concepts. ",
            "\u00a0I couldn't tell if I just wasn't that into the subject material, but I didn't enjoy Glenn's lectures. I felt like he taught as if we were already familiar with the subject material, and would often not emphasize over the most fundamental, important themes of the lecture. This made it really hard to learn. At a certain point, I stopped going to lecture and basically self-studied for the tests. Office hours were very helpful, because that's where I learned all of the material. ",
            "\u00a0Class is not run efficiently or effectively, ",
            "\u00a0Lecture not very interesting or exciting; lecture notes are hard to read afterward. ",
            "\u00a0Good content. \r\nProf. Glenn could have rushed less although the sheer breadth of content he had to cover makes this understandable. ",
            "\u00a0Good depth and breadth of content, decent lecturing, well-balanced homework. Take notes as closely as possible. Start homework as soon as possible. Go for office hours as often as possible. And you will learn a lot. \r\n\r\nMidterms and finals are quite stressful and hard. Very few people can think well about proofs under time pressure. My assignments were mostly 75-90% and above but my tests were near 50%.  At least they are relatively low weightage. ",
            "\u00a0Strengths: Glenn is very good at going step by step through a concept or a problem whether it be in lecture or office hours.\r\nWeaknesses: More often than not, going through step by step feels much more tedious than enlightening. It was nice to see a concept or a problem being written out step by step the first time, but when this is done on every single problem, students (myself included) seemed to get extremely bored during lectures. I'm also not a fan of grading the problem sets on a rubric. It forces a certain solution, and creativity or elegance is punished because it doesn't fit the guidelines of the rubric. I could see how a rubric could work with a swift grading and a robust regrading system, but neither was present. Grading and regrading took absolutely forever, and I don't think much consideration was given to the regrade requests. If you're thinking about getting regrade requests, just go straight to Glenn, as he will explain clearly which parts are incorrect or in fact correct. Not only the rubric, but also the TAs contributed in forcing a certain solution. I've heard multiple other students referring to office hours as \"getting the answers\" because the TAs essentially write out the solution for you. Indeed, it makes the course easy, but it disincentivizes learning, which seems like a terrible design for a course. ",
            "\u00a0The course was very well structured, and I am definitely a better computer scientist and programmer having taken it. ",
            "\u00a0The class was definitely very engaging, the psets were difficult, but very rewarding. I wish the lectures could be taught in a different format, and the notes were easier to understand when looking at them after lectures. ",
            "\u00a0Strengths: The exams, although very difficult, were fair - they were usually 4-5 questions and each question was about 1 topic/algorithm that we had learned in class. The format was similar to the exams from the previous year, which Glenn gave to us as practice exams. The TAs were also very very helpful. They often held walkthroughs for difficult pset problems. I would not have survived this course without the help of the TAs. \r\nWeaknesses: the grading was very slow unfortunately. The midterms were graded within a few days, but by the end of the semester, only 3 out of the 6 psets we handed in had been graded. Therefore, it was difficult to learn from our mistakes on the homework. ",
            "\u00a0The lectures were clear, but the workloads were heavy. The homeworks went on very detailed. ",
            "\u00a0Loved the biweekly psets that were reasonable in length, but still reinforced understanding of the recent topics. \r\nPerhaps a \"tips & good practices for writing proofs\" workshop could be really helpful if given at office hours at the beginning of the semester. ",
            "\u00a0interesting material but super boring lectures, could definitely be sped up. Grading is not condusive to learning on your own: psets are most of your grade but are graded super harshly, which means everyone just goes to office hours to get the answers rather than trying the pset on your own and getting a bad grade. Exams should be worth more of the grade because people who literally don't understand the material at all are getting A's. Also, grading is SO slow--you don't get feedback on psets until you're turning in the 3rd one, which, when they are most of your grade and there are only 6 of them, is ridiculous. ",
            "\u00a0I did not feel like the lectures were necessary for learning the material, but the problem sets were very interesting and the TAs were very helpful! ",
            "\u00a0I liked learning the different algorithms, and the office hours for this course were very helpful. Professor Glenn clearly puts a lot of effort into preparing for lectures and finding examples. My main complaint is that the notes for this class are virtually unreadable, as they are written by hand with a stylus using 5 different colors. I see how drawing diagrams by hand is useful for this class, but if the text could be typed or the diagrams made neater I think that would be very helpful. ",
            "\u00a0I had a tough time understanding network flow during lecture. ",
            "\u00a0The rate at which assignments are returned is extremely slow. The ULAs are helpful but very inconsistent. ",
            "\u00a0Problem set scores/feedback are given too late. ",
            "\u00a0I thought the material was interesting but sometimes we got bogged down in examples when it wouldve been more helpful to move quickly. ",
            "\u00a0The lectures were not as engaging as they could have been, and the notes were sometimes hard to follow if you missed something. I also wished that we had gotten more practice actually coming up with our own algorithms, because it was required on tests, but the problem sets only really tested our ability to reason through algorithms in a longer time frame and prove things about them. I would have liked more frequent and casual practice problems, potentially combined with slightly shorter or less writing-intensive problem sets to offset the extra work. I also would have liked a more consistent pset schedule, and for the problem sets to be better-written and more specific. Another major weakness was that the problem sets were not graded quickly enough - at the time of the final exam, only half the problem sets had been graded, so we had actually not received any feedback on any of the material on the 2nd exam. The rubrics were also pretty harsh without a lot of additional feedback. ",
            "\u00a0Not much feedback on how to improve your proofs. Grading is incredibly nit-picky. Strengths are that the problems are very interesting and push your knowledge. ",
            "\u00a0Strengths: exams are fair, class notes posted online are very helpful, many office hours by teaching staff, Marko the head TA is especially helpful\r\nWeaknesses: problem sets that are relevant to the exam material are not graded until weeks after the final exam, so you have no idea how you are doing in the class until its too late, the pac sof lecture is slow and much more material should be covered in this class ",
            "\u00a0I thought the problem sets were very useful for learning but the exams were unreasonable. ",
            "\u00a0I don't think that the ULAs should literally be walking people through the answers the day before problem sets are due. This kind of discourages people going to office hours earlier, as during those sessions ULAs are a lot more hands-off with their help. ",
            "\u00a0The assignments were always written assignments about algorithms, but we never actually implemented algorithms. It would have been very helpful to gain actual programming experience implementing these algorithms ourselves. There was quite an expectation in this course that we had strong proof writing skills, which was certainly not true for all students. The greatest weakness of this course was the lecture. It was incredibly tedious and it was a struggle to pay attention. ",
            "\u00a0Professor Glenn is great, I really like his style of teaching and note taking. The problem sets really drive home core concepts and are properly challenging. I disliked the focus of the classs grading rubric on missing minute, small details which often are only  gotten once you go to office hours and the TAs give it to you. That part discouraged students trying to solve the psets on their own. Overall I liked the content of the class a lot though and exams were fair and enjoyably challenging. ",
            "\u00a0The strength is that one learns how to use the basic algorithm techniques well, but the weakness is that Professor Glenn's notes can be a bit difficult to understand, so many student rely on the textbook or outside sources to review. ",
            "\u00a0Weaknesses: Crazy difficult assignments and exams. Not representative of lecture or readings. ",
            "\u00a0The material in the course is very interesting, and I think Prof. Glenn is a very clear lecturer. He can sometimes go off into so much detail or on tangents that people get bored, but he is very, very clear when explaining concepts. I'm really glad I took the course with him, and I learned a ton. A huge weakness was grading, which was both painfully slow and also kind of sloppy, prompting a torrent of regrade requests that probably backlogged grading even more. The course staff said they'd try to operate on a one-in-one-out policy (i.e., finish grading problem set X before problem set X+1 is due), which is fairly standard and reasonable, but after the first assignment they didn't even come close. The second exam (like a final but on the last day of class so only on post-midterm material) covered problem sets 4, 5, and 6, but we didn't receive any of those back until weeks after that exam/months after we turned PS4 in, so we had no graded work to study from. They also didn't release grade distributions for most of the homeworks, so we had no idea how we were doing in the class (since the class is curved, the grade without its distribution is meaningless). The glacial pace of homework grading is an enormous problem that urgently needs to change so that we can learn from feedback on our past work. A bright spot was that exams were graded very quickly. I realize this is a symptom of a larger problem, which is that the CS department desperately needs more course staff. Another suggestion for improvement: the problem sets were quite substantial (since there were only six per semester), and there were problem sets due the class before each of the exams. Please reschedule these so students have the time to study for the exams without worrying about problem sets. ",
            "\u00a0I wish the lecture had more structure to them. I felt like there wasn't any outline for the class lecture, so we would go into tangents or miss topics that we were supposed to cover in shorter time. Office hours were helpful for the homework assignments. ",
            "\u00a0The strengths of this class is the textbook, which explains the concepts of the course very well. The weakness of this course are the lectures, which are so uninspiring and hard to follow that many of my fellow students gave up on going to class. For network flow, I learned more about the topic from a 10 minute video on Youtube than the entirety of the two network flow lectures that I attended. If Professor Glenn could teach this class less pedantically and more straight to the point, this would be a fantastic class that teaches the essentials every CS student needs to know to get a job. Instead, it was a frustratingly boring class that left me and other students poring the textbook to understand the topics at hand. ",
            "\u00a0This course was incredibly tough to pay attention in. The proofs went on forever in some parts, and that really hurt my ability to get much out of lecture. ",
            "\u00a0Strengths: The material is extremely interesting. Problem sets are well designed, and are challenging without requiring you to spend ~20 hrs/week like in CS 366.  You become better at reasoning about various computational problems.\r\n\r\nWeaknesses: The first half of the course proceeded way too slowly, which means we didn't spend enough time on randomized algorithms or approximation algorithms. Proofs in class were often described in an unnecessarily pedantic style compared to the text book, which tended to have much more intuitive explanations. ",
            "\u00a0Strengths: The homework and exams are not all too difficult. Many students do poorly just because they aren't comfortable with proofs and aren't willing to spend time thinking outside of the box.\r\n\r\nWeaknesses: The lectures are basically useless. Professor Glenn's in-class proofs are not very rigorous. Instead of proving things mathematically, he'll often talk you through his reasoning, which isn't something you can do on the homework assignments or exams. You may also develop a burning hatred for invariants. ",
            "\u00a0Strengths - two weeks for each problem set\r\nWeaknesses - pretty difficult material, exams are hard ",
            "\u00a0Lecture is hard to follow, and most of the burden seems to fall on office hours. ",
            "\u00a0Good content ",
            "\u00a0Strengths: useful knowledge\r\nWeaknesses: Lectures sucked ",
            "\u00a0In terms of the problem sets, I found them very interesting, but I was constantly in office hours trying to make sure they were exactly how the instructors wanted them so that I wouldn't be docked so many points for small inaccuracies. I don't mind going to office hours, and I gain a lot from going, but I felt like a burden on the ULAs, and I did not like feeling dependent for answers. ",
            "\u00a0don't use handwriting script for lecture, once the lecture is over, hard to read what was written in the lecture notes ",
            "\u00a0Good ",
            "\u00a0I liked the problem sets and the general course material, but lectures were somewhat confusing, unclear and not direct, and often we just began studying a specific problem application without really learning about the context or algorithmic technique. I also found the exams to be very challenging. The ULAs and TFs, however, were really great and definitely saved me in this class! ",
            "\u00a0This course should just be more interesting. It would be useful if we had more resources to tell us about how to solve similar problems because the ones on the website were confusing. ",
            "\u00a0Not great, lectures are unbearable, and exams were really hard. Psets were fine if you went to office hours. ",
            "\u00a0This course is pretty well-organized, I would say. The material was presented at a manageable rate and the problem sets were well-designed to get us to learn the algorithms Glenn talked about in class. My big problem with the course was how awful the lectures were. They were horrendously designed for learning. It was as if we were supposed to already know the algorithm in-and-out before walking into the first class on it. Glenn would talk about the algorithm as if we were already in a place to understand its pitfalls and problem points, when most of the class (except a few really capable students) needed more support than that conceptually. With this being the case, the ULAs and TAs at office hours ended up doing a lot of the heavy lifting when it came to actually teaching us the material. ",
            "\u00a0I learned mostly from office hours rather than in class. I feel like is a major downfall of the course and could be improved. Lectures were not very engaging and I constantly felt like he taught about details of algorithms rather than telling the bigger picture of strategies for how and when to use them. "
        ],
        [
            "\u00a0I would. I enjoyed the material and I learned a lot. ",
            "\u00a0Unfortunately, if you're a CS major, you're forced to endure this class. If you're not a CS major, do not take it. Find some other way to get a basic understanding of algorithms if it's that important to you. You will be bored out of your mind, you won't really gain a good understanding of algorithms, and you'll basically just spend several hours a week having a TA tell you how to do the homework. ",
            "\u00a0No, if you're interested in the material and don't need this class for your major, I recommend watching youtube videos or reading the textbook. ",
            "\u00a0You'll have to take it if you're CS - regardless, if you want to understand basic algorithms that underlay the foundation for many computer systems, I'd recommend. I think for any computational/data science/software field, algorithms is great. Take the course. You'll learn so much. ",
            "\u00a0Recommend if you're interested in CS / math ",
            "\u00a0It's required for CS majors, so take it I guess. ",
            "\u00a0If you are a CS major, then you'd have to take this, whether you like it or not. If you are not a CS major, then I wouldn't recommend this.. if you are really into algorithms or discrete maths stuff then go with 366 instead and I heard that although it is a lot more work you learn more and develop a better problem solving mindset (which I don't think I developed after taking 365). ",
            "\u00a0I would only recommend this course if you are looking for an intense class that really pushes your mathematical and CS abilities. Otherwise, there's not much point ",
            "\u00a0Yes. It's a good way to learn some key programming techniques, and the theory behind them is usually pretty interesting. It's not the most thrilling course, and though Professor Glenn often injects lectures with some fun examples, they often drag on. During the TF and student aid office hours, the answers to the current problem set are more or less given to students. I'm not quite sure how I feel about that; once I discovered this I stopped spending much time doing the problem sets on my own because I knew I would be given the answers. Before this, I would submit my own algorithms that were often slower than the one's handed out by the TF (or missed some edge case) and therefore lost more points than the students who faithfully copied the TF's solution. In any case, this class can be made quite easy if you go to the TF sessions. (Yes, the exams are difficult, but within reason, and they only account for 25% of the total grade). ",
            "\u00a0Take 366 if you can, but please DON'T take it with Professor James Glenn. You would appreciate me for that. ",
            "\u00a0It's a requirement for CS majors, and otherwise it's kind of a weird class to take, but yeah I'd recommend it. James Glenn is amazing and the class was really interesting. ",
            "\u00a0You have to take it lmao ",
            "\u00a0If you're a computer science major, you have to take either this or 366. If you're good at math, take 366. If you're not, take this. ",
            "\u00a0Yes, it was interesting and not too bad of a workload! ",
            "\u00a0Yes, because it teaches relevant algorithms. ",
            "\u00a0It's a requirement. So, yes.  I would not recommend it to non-CS majors ",
            "\u00a0Only if you are particularly interested in the topic or are a CS major ",
            "\u00a0It's useful (and required) for CS majors since you learn fundamental algorithms, however the course requires that you put in A LOT of time and effort on your own (ie read textbook and do practice problems in textbook) to truly learn and understand the course material. ",
            "\u00a0Lecture was pretty boring, but the concepts can be quite interesting.  Probably shouldn't take this if you aren't using this to count towards your major. ",
            "\u00a0Yes; it's good material to know ",
            "\u00a0Not really unless taking it for the major. ",
            "\u00a0If your only options are this and Intensive Algos, take this class all the way.  But it's more a choice of the lesser of two evils. ",
            "\u00a0If they need to do the core CS requirements! ",
            "\u00a0Don't take unless you are CS, or really want to learn about the efficiency of a bunch of different algorithm. ",
            "\u00a0U have to take it but Glenn isnt a good teacher idk ",
            "\u00a0I didn't have to take the course because I'm CPAR, but I did learn some employable skills and realized that my coding improved a lot after taking this class. ",
            "\u00a0yes, it teaches the basics of algorithms which is very important for computer science both theory and practice. ",
            "\u00a0Yes, fundamental to CS of course. ",
            "\u00a0For non-CS majors, absolutely not.\r\nFor CS majors, if you are completely new to writing proofs (i.e. CPSC 202 was the first class where you began to write proofs), then this course should be right for you. The TAs basically give out the answers, so the problem sets will be streamlined for you. If you are experienced in writing proofs in any way, this will be extremely frustrating. Office hours will make the problem sets seem restrictive than streamlined because a certain solution will be forced down your throat. On multiple occasions, I had to alter a valid answer because I knew that the rubric grading system will only allow the solution that the TAs were pushing. Yes, it will be easier if you take this course instead of CPSC 366, but you face the dilemma of learning to be a computer scientist but facing a frustrating grading system and learning to be a journalist who just writes down the answers from office hours but avoiding the flaws of the grading system. If you really enjoy learning and exploring with little to no guidance from office hours, then I strongly suggest you to take the extra step and take CPSC 366. I've sat in on some CPSC 366 lectures, and you'll find them much more captivating than CPSC 365 lectures, which you will find tedious quite often. ",
            "\u00a0If you're a computer science major, it's required, but even if not, its a very interesting course with engaging and complex problems to solve in homework assignments. ",
            "\u00a0Highly recommend to any CS major or anyone interested in the core of algorithms. ",
            "\u00a0Only if you need it for the CS major. I don't think someone who is not a CS major would bother taking it anyways. I learned a lot about various algorithms, theorems, and invariants, but I'm not sure how useful this information will be in the future / if I will apply this information to future CS studies. I personally don't plan on pursuing theoretical CS. ",
            "\u00a0Yes, this is the core algorithm class. ",
            "\u00a0obviously most people are taking this if they have to, but if you're not a CS major it's still pretty important to know this stuff if you want to go into SWE. fair warning that the lectures are super boring and unfocused; this course does not move fast. psets are most of your grade and are about every 2 weeks, so this is a low workload class. NOT a gut in terms of grading though, the psets are graded really harshly and feedback comes late, which sucks when you only have 6 psets and they are worth 75% of your grade so each one is 12% of your grade. basically this class just comes down to going to office hours and getting the answers from the TAs, which is a real bummer if you take this class wanting to learn a lot. ",
            "\u00a0Only if it counts toward your major. This class is more theoretical than practical because there is no coding, so I'm not sure it would be that beneficial outside of Math/CS. It's an okay class, and it's nice because most of your grade is homework, but it's quite difficult conceptually. The ULAs and Marko are amazing, though, and will help you as much as you need. ",
            "\u00a0Yes! A lot of people complained about this course and said that they didn't learn anything but those people didn't show up for lecture so of course they didn't learn anything... Professor Glenn is absolutely wonderful. ",
            "\u00a0It's a good introduction to algorithmic thinking. ",
            "\u00a0Yeah, it was interesting and not crazy difficult. Algorithms are super useful. ",
            "\u00a0Algorithms does cover some interesting and important topics, so I do think it's an important course to take if you're interested in computer science (I took it as an S&DS major, so you don't have to be a CPSC major), but I think there's a lot of room for improvement. A lot of the lectures are dead boring, even when the material itself is interesting. The problem sets, due every week and a half or two weeks, are often pretty long, and they're difficult to solve on your own. My recommendation is to work with classmates to come up with an initial answer, then go to office hours EARLY (before they get too busy) to fine-tune your ideas or get hints on stuff you couldn't solve. Sometimes the ULAs do give a lot of the answer away rather than hinting, which is helpful but not as conducive to actually teaching you to solve the problems on your own. The two in-class exams are long and difficult, with an expected average of 68% or so, but the curve is usually generous. The exams do follow directly from the homeworks, but there may be one or two unexpected questions, which are very hard to prepare for. The grading is frustrating because it's very slow-- you will not get feedback on problem sets for weeks or months, and when you do, it is often harsh without an adequate explanation. Overall a frustrating course, but kind of worth it just because I understand dynamic programming now and it's SO COOL. ",
            "\u00a0Definitely take this course if you want to learn about algorithms and try not to be too hard on yourself when going over your pset grades. ",
            "\u00a0Only if you need it to complete the CS major. In and of itself this is not a great class. If you have the time and passion about CS, you should take CPSC 366 instead because youd actually learn the material more thoroughly and get your problem sets back before the term is over ",
            "\u00a0Yes because it is necessary for the major and algorithms are an interesting topic. ",
            "\u00a0Yeah, it's a good basis for algorithms. I don't think you'll get much out of it if you're not a computer science major though, because it's very theoretical. ",
            "\u00a0Do not take unless you are a CS major. This class was very stressful and it takes a lot of self study to benefit from. ",
            "\u00a0Definitely take this class, its one of the most intellectually invigorating classes Ive taken and I loved it. Professor Glenn is great and I like his style of teaching a lot, and he knows his stuff well. He made problem sets fair and exams fair (though hard) as well. The only problem with the class is that you need to go to office hours due to the grading rubric being about small details you miss on problem sets, which discourages students from solving problem sets on their own. Other than that, the class was great. ",
            "\u00a0I think this course is helpful to learn the basic algorithm strategies to use for solving CS and math problems, and thus I would recommend it to anyone interested in those fields. ",
            "\u00a0Only if it's needed for their major. ",
            "\u00a0I'd recommend the course to students with adequate preparation and who are willing to do a lot of work, because the amount you learn is worth it. If you take the course, GO TO TA/ULA OFFICE HOURS. Preferably, try out a few different office hours, see which TA/ULA has your preferred teaching style, and stick with it. The homeworks are long, difficult, and worth 75% of your grade. It can sometimes be unclear what they are asking/whether you need to explain something or not, and occasionally there's extra information there to deceive or fool you. Office hours, especially walkthroughs, are crucial for unpacking all this. There are only six homeworks, so you only really need to go six times, and you will net save time going to office hours vs. trying to figure things out yourself. Also, make sure to do the practice exams before the real exams, as they are very good indicators of the difficulty and material on the exams. The exams were extremely time-crunched, and the grading was tough, but the questions were reasonable. (Median was 67 on both exams as a result of all this, but the course is curved to roughly 50% A/A-.) CS 202 and 223 are prerequisites for 365. I think 202 -- or MATH 244, or prior knowledge of discrete math -- is very important for success in Algorithms, but 223 probably isn't. I haven't taken 223, and that wasn't a huge problem for me. If you haven't taken 223, spend a day familiarizing yourself with the basics (really just the basics) of arrays, linked lists, queues, stacks, and heaps, including the big-O runtimes of operations on those data structures, and you should be totally fine. Understanding how to implement data structures in code, or the intricate details of those data structures, is NOT at all important for 365. You should also have a passing understanding of common sorting algorithms like mergesort, but again, nothing in-depth is needed. ",
            "\u00a0If you are going to be a computer science major, you need to take it for the core, so you don't really have a decision there. If you believe you have a strong background in math, then I would recommend this class, but if you need clear lectures to understand the course content, do not take this course. ",
            "\u00a0If you're a CS major it's essential to take this course before trying to find internships. Algorithms is a huge part of interviews and you will be doing yourself a disservice if you don't learn it in class. That being said, I would advise you read the textbook very attentively before every lecture, as you won't be able to understand what Glenn is trying to say without having learned the material first. ",
            "\u00a0Its required unfortunately so I have to give my endorsement. Really needs some sort of overhaul or energy added to it. ",
            "\u00a0If you are a CS Major, then you don't have a choice. If you're not one, I would definitely still recommend it if you're interested in harnessing computers to solve problems in a wide variety of domains (including economics, biology, scheduling,networks, etc.), though I would strongly encourage taking a data structures course beforehand though. \r\n\r\nTo those deciding between 365 and 366, this class isn't a breeze either, and is pretty much equivalent to standard algorithms classes in other universities, so you won't be shortchanged. However, take 366 if you really enjoy solving problems, want a better experience with a smaller class size, and can make the significant time commitment. ",
            "\u00a0Only take this if you have to. There isn't much reason to do so otherwise, as you won't learn all that much. ",
            "\u00a0I would only take this course if you're a CS major and it's required - pretty difficult and intensive course for a non-CS student ",
            "\u00a0Yes, algorithms are extremely important to learn and be comfortable with. ",
            "\u00a0It's required for the CS major, and it covers interesting material, but the course could be much better taught. The problem sets required a kind of problem solving that wasnt really covered in class, leading many students to go to the ULAs for walk-throughs rather than trying to solve the problems on their own first. In addition, problem set answers were sometimes expected to be very similar to the official solutions even in cases with multiple possible approaches. Lectures were clear, but often spent too long walking through basic examples to explain a problem, or duplicated the textbook content in a longer-winded way. Exams seemed structured to focus much more on performance under time pressure than understanding of the material, and fixing this would seem to be an easy way to significantly improve this course. ",
            "\u00a0Yes a crucial class for cs ",
            "\u00a0If you're a CS major, you have to take this. If you aren't, there are better CS classes to take for fun. ",
            "\u00a0I would, but with the disclaimer that feedback takes a while to come back, and lectures take a lot of will power to stay engaged. ",
            "\u00a0worth learning, wish I could haven taken it earlier ",
            "\u00a0Good ",
            "\u00a0I would not recommend this unless you are a CS major and have to take it. I don't think a non-CS major would gain anything worthwhile. ",
            "\u00a0Yes, but it was boring with James Glenn. ",
            "\u00a0You have to take it for CS, otherwise, nah ",
            "\u00a0Why would you take this course unless you had to? If you're looking at this course and you aren't required to take it, go take an Art History class or something. Do something worthwhile with your time. If you're the kind of person who would take this class voluntarily, you should take Intensive Algorithms instead. Seriously. ",
            "\u00a0I would only recommend if the class is needed for a major or if you are a very self-motivated student who will want to spend many additional hours learning the material. "
        ]
    ]
}