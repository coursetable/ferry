{
    "crn_code": "20616",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            6,
            14,
            23,
            14
        ],
        [
            2,
            12,
            18,
            18,
            9
        ],
        [
            1,
            9,
            13,
            24,
            12
        ],
        [
            5,
            8,
            18,
            19,
            9
        ],
        [
            0,
            4,
            14,
            30,
            11
        ],
        [
            0,
            0,
            11,
            33,
            15
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0I really feel like I have a much deeper understanding of how a computer actually works. Additionally, I am now very well practiced in recursion. ",
            "\u00a0Learned a lot about the foundations of computing and computer science. This course definitely made me a better computer scientist and problem solver. I can do recursion reaaaally well now. ",
            "\u00a0This was an awesome class.\r\nI came into the class already knowing how to code.\r\nBut this isn't a programming class-- it's a computer science class.\r\nI learned how programs and computers work under the hood. It was really fascinating to learn all that. ",
            "\u00a0Almost nothing ",
            "\u00a0Through this course, I have acquired a healthy knowledge of Dr. Racket, a programming language derived from the archaic Scheme, as well as a better understanding of recursion, computer science theory, and UNIX. ",
            "\u00a0Racket ",
            "\u00a0To sum up, all of the skills and knowledge this class intended to give me. I feel like a better programmer from the courses emphasis on a logical thought process. I also have a better understanding of the back-end of computer systems and why some of the common issues in CS exist in the first place. ",
            "\u00a0I learned the basics of computer science ",
            "\u00a0I learned a lot about computers and the fundamentals of computing. ",
            "\u00a0I learned recursion, Racket, circuits, Turing Machines, and a whole lot of other content that forms the basis of computer science. ",
            "\u00a0Racket, logical thinking ",
            "\u00a0Recursion, recursion, recursion.  Also, some machine architecture. ",
            "\u00a0I learned about computer architecture, boolean expressions, racket, gates and circuits, regular expressions, and computational complexity. ",
            "\u00a0You really develop a deep understanding of recursion. ",
            "\u00a0I learned about the foundational topics of computer science in addition to learning how to code in Racket. ",
            "\u00a0I learned how to look at problems logically and to understand computer science in a more theoretical way. ",
            "\u00a0Racket coding, computer language, some information about computer structure ",
            "\u00a0How to think abstractly about computation, question and become aware of the assumptions that I make while writing code. How to think like a machine and the history of many abstract models of computation. ",
            "\u00a0I became more fluent in the programming language Racket and learned about recursion, Turing machines, Boolean expressions, logic gates/circuits, strings and languages, running time of programs, mutators, computer architecture (ex: RAM, CPU - we built our own TC (tiny/toy computer) in one of our psets) ",
            "\u00a0I developed my understanding of computer logic. ",
            "\u00a0I learned a lot about recursion, making it second nature, about Turing machines and other types of computer machines, UNIX commands, gates and circuits, boolean expressions, and of course, Racket. Mastering recursion was the best take-away of this course. ",
            "\u00a0Racket ",
            "\u00a0Fundamentals of computer science ",
            "\u00a0I learned about recursion, turing machines, boolean expressions, DFAs, and TC-201 programs. I also learned how to think critically and how to use Dr. Racket. ",
            "\u00a0Recursion ",
            "\u00a0I learned about the language Racket and how to implement recursion. I also learned some fundamentals of programming and languages. ",
            "\u00a0Learned a lot of computer science! Was fun! Like solving long puzzles every week. ",
            "\u00a0I learned the basics of the Racket programming language and functional programming, as well exploring a bunch of cool CS related topics like boolean expressions, circuits, machine architecture, strings and languages, and computational complexity. ",
            "\u00a0This was a good introduction to racket course that taught principles and theory of computer science. ",
            "\u00a0I learned recursion, deeply, backwards and forwards*, Turing machines and computability theory, how computers actually work (at a 10,000, maybe 20,000 ft level of abstraction), and lots about Unix. \r\n\r\n\r\n*take cpsc201 and you'll get the puns! ",
            "\u00a0Learned recursion, coding in Racket, and other lower-level computer mechanics ",
            "\u00a0Developed basic programming knowledge and understanding of how computers work. ",
            "\u00a0In this course, we covered general Racket code, especially with regards to its characteristics related to functional programming and recursion, Turing machines, Boolean functions and expressions, gates and circuits, machine architecture with a toy computer TC-201, strings and languages with regular expressions, DFAs, CFGs, and BNFs, the process of compiling, computational complexity, and mutators with object-oriented programming. ",
            "\u00a0Functional programming, how to get more confortable with recursion "
        ],
        [
            "\u00a0I really enjoyed the psets and found grading to be fair. We all love Slade but he just really is not a good lecturer. He is funny but goes on long tangents that are irrelevant to the class. ",
            "\u00a0The HWs are actually fun and interesting if you get into them. Class... not so much. To be fair, it's extremely difficult to teach a CS class in an interesting way. I think it was taught about as well as is possible for the material. ",
            "\u00a0A huge strength of this course is its accessibility.\r\nDetailed lecture notes and scripts were posted online that were there for easy reference when I had a question.\r\nI also loved that Professor Slade begins every lecture with a topical XKCD comic :)\r\n\r\nThe course could be improved if, after homeworks were graded, solutions were posted so students could see what they did wrong and how to change it in the future. This could also have been accomplished by Prof Slade or the TA going over solutions to the homework. ",
            "\u00a0This course teaches skills that are useless. Even slade says that racket is useless, and there is no application for making a computer simulate the running of a circuit. ",
            "\u00a0This course's strong point was the professor's lectures and the availability of lecture notes. The professor's explanations of concepts were relatively intuitive and effective, and the homework did a phenomenal job of complementing what students learn in class with the new concepts the homework introduces outside of lecture. ",
            "\u00a0Lecture a little boring, but Slade is a super interesting person ",
            "\u00a0Strengths:  Class is well organized and easy to find resources. Excellent exploration of the various topics in CS\r\nWeaknesses: Not too many. Lectures were not very useful all the time.\r\nImprovements: Some of the submission scripts were hard to find. ULAs/Slade should put those in a more accessible spot. ",
            "\u00a0The lectures were very interesting and the Problem Sets truly challenged you and made it very easy to learn while you did not even realize it. ",
            "\u00a0I would have preferred if the lectures were twice a week and slightly longer rather than three times each week ",
            "\u00a0Strengths- reasonable but challenging problem sets that are pretty fun most of the time. Lots of office hours with helpful ULA's\r\n\r\nWeaknesses- I was often lost during class because the lectures were a week or so ahead of the problem sets. The lectures are also pretty boring but Stephen Slade made them more fun through his logic puzzles and CS slang. ",
            "\u00a0Lectures are boring, workload is high but the office hours are plentiful and at nice hours ",
            "\u00a0The strength of the course was that the notes were always online, so it was easy to review for the exams.  Also, the use of Piazza helped to answer any questions about the material at all times. ",
            "\u00a0Felt very little engagement with the professor and the professors lectures were pretty boring ",
            "\u00a0Class time felt wasted ",
            "\u00a0The office hours were the best part of this course. I wish the lecture was more engaging. ",
            "\u00a0Fantastic office hours and very helpful & accessible TF BUT lectures were very slow-moving ",
            "\u00a0I think that this course is run very well. The use of a totally new programming language is good to highlight recursion, and the way we looked at computer science from a theoretical standpoint helped me to really understand computability and other things like that. ",
            "\u00a0It was badly taught, and psets were always released (sometimes due!) before the relevant material was taught. The only good thing about the class was the predictability and ease of studying for tests (although the UNIX portion was generally ridiculous) ",
            "\u00a0Coolest part of 201 is getting to build a Turing Machine and your own computer. The problem sets ask you to build these machines, as well as simulators to run them--all from scratch--and so you learn every step of the process which helps you understand the entire machine.\r\n\r\nThe lectures can be a bit more theoretical than practical, but Slade's knowledge is invaluable and unique. ",
            "\u00a0For me personally, there was a huge learning curve at the beginning of the course. I had some coding experience before taking this class, but Racket is such an old/different language that it was difficult getting used to the limitations/capabilities of Racket. However, there were office hours almost every night, and the ULAs were super helpful, which is a strength of this course. The lectures were not very exciting, but I actually ended up really enjoying the psets by the end of the class. Originally, I really disliked them because I disliked Racket. However, Racket grows on you over time. Additionally, I thought the psets were really interesting. For example, in one pset, we built our own Turing machine from scratch. In another pset, we built a logic circuit from scratch and wrote a function called simulate that could simulate feeding inputs into the circuit, returning the output after each gate delay, and then returning the final output of the circuit. In another pset, we actually built a TC (a mini computer) within the pset, which was super cool. The TC had a CPU and a RAM, and once we built the TC, we wrote programs that allowed the user to input some numbers, and the TC in our psets would return some output. For example, one program might return the remainder of one number divided by another number, and one program might return the inputs as outputs but in reverse order. For that pset, we had to build each part of the TC as well as write functions for each of the 16 TC instructions that might be used/needed for our programs (ex: load, halt, store, add, subtract, jump, etc). I liked that we actually built things in our psets, instead of just answering problems. ",
            "\u00a0The lectures are really boring and aren't really engaging. It would be nice if we could learn things in context of how they're actually used so that they feel more important. ",
            "\u00a0The strengths of this course include the Office Hours for assistance on the homework with the ULA's. ",
            "\u00a0The lectures were often boring and I found myself working on the problem sets or other work while there, so I ended up not going a lot because I'd just be more productive elsewhere. This was particularly manageable because the lecture notes are always posted online which is very helpful, and because I found there was rarely anything said in lecture that wasn't on the lecture notes. The problem sets were very interesting and fun and made me learn the material much better by applying it. I went to office hours/help hours once and didn't even get seen by a TA, and never felt the need to go again (not because of that -- I just didn't need help again). ",
            "\u00a0Good theory ",
            "\u00a0Examinations ",
            "\u00a0The course was extremely interesting and the homework definitely clarified the lectures. ",
            "\u00a0I like the psets each week. They're challenging but very do-able as long as you commit time and energy to working on the psets on your own time or at office hours. They really help us to understand the course material covered during lecture. The weaknesses of this course are introducing difficult concepts to us during lecture. If you pay attention well, you can normally understand all of the concepts. But near the end of the semester and the content became more difficult, reviewing lecture notes didn't feel sufficient to helping us understand what we were learning. Perhaps if this could be better taught or more information was presented to us, then that would help answer any lingering questions that we may have. ",
            "\u00a0I thought lecture was pretty boring. The lecture notes sufficed though. ",
            "\u00a0The psets challeneging and time consuming, but they are defininitely very rewarding and teach you more than you learn in lecture. My only problem is that it often seems that in the psets, we spend too much time writing tedious functions to build the simulation rather than using the simulation. ",
            "\u00a0Office hours were very helpful for the problem sets, lectures not so much. ",
            "\u00a0I loved this course--the only weakness is the students who take it might not be as engaged as they could, but I think that's a function of it being a required class and has nothing to do with the quality of instruction. ",
            "\u00a0Strengths, does a decent job of teaching recursion and its usefulness in Computer Science. Additionally, it was useful being able to implement into code the things we were discussing in class.\r\n\r\nWeaknesses, lecture is extremely dry. Notes are presented in a bland format, and it is difficult to know what is expected at times. ",
            "\u00a0Strengths: office hours were incredibly helpful\r\nWeaknesses: sometimes the psets were so difficult that I felt I had to go to office hours to complete them. ",
            "\u00a0I really enjoyed this course. I think the biggest strength of this course was just the amount of help you could get. I think this just goes for the CS department as a whole, but I absolutely LOVE how the department organizes office hours and ways to get help. I was able to learn so, so much by attending office hours and talking with the ULAs.\r\n\r\nWith improvement, I think the only thing was just the pacing of the material near the end of the lecture. I thought it was really hard to keep up with the last concepts we covered with compiling, computational complexity, and mutators/object-oriented programming because we went through them so quickly. It would also be great if we could get solutions to the homework and the exams after taking them instead of just being told what we got wrong. Right now, it's just really easy to just ignore the mistakes you made instead of actually try to fix them since you don't easily know how to fix them. ",
            "\u00a0The ULA hours were helpful - the lectures seemed boring at times, but in retrospect it was very interesting when Slade told us more of the history behind what we were doing and tied it to the projects we were assigned. Gradescope was very helpful for exam and midterm feedback. "
        ],
        [
            "\u00a0If you are a cs major I wouldn't skip this course. If you aren't a cs major... there are probably better options for you. Unless you really really like computers. ",
            "\u00a0It's the introductory class for the major, so if you're taking the major you have to take this. Alternatively, I also think this is just a really interesting class. Turing machines, TC201s, etc... really give you an idea of how computers function in an interesting, hands-on way. I would recommend you take this class if you have any interest in computer science. ",
            "\u00a0Intro to CS is literally an intro to CS. Great first Yale CS class to take if you have some programming experience (excluding CS50). ",
            "\u00a0Yes!!\r\nEven for non-programmers, this course is a fantastic way to learn how computers work under the hood.\r\nIt's a fantastic class. ",
            "\u00a0no ",
            "\u00a0Maybe take 200 instead? Same prof, better language ",
            "\u00a0If you are a CS student/ want to learn CS/ want to learn programming deeper than what was offered in 112, take the class. Otherwise, don't; the time consumption may not be worth it to use it as a QR. Although if you fall into the third category, CS 200 may be a great option. ",
            "\u00a0Yes I would ",
            "\u00a0Yes. It is a good computer science course that teaches you a lot. ",
            "\u00a0Yes! Provides a solid basis in computer science, especially for CS majors. I took this after CS50 and it felt like a good continuation of the content I learned in that class. It is not too difficult for non-majors but non-majors might want to look into taking CS200 instead since it teaches Python. ",
            "\u00a0Yes only for cs majors ",
            "\u00a0I would recommend this course to anyone who is interested in computer science that already has some background in programming. ",
            "\u00a0Good and broad introduction into computer science; much more than a programming class ",
            "\u00a0Yes, if they are interested in becoming a computer science major and learning the theory behind computation. ",
            "\u00a0I am a non-CS major and I took the class to gain a deeper understanding of the principles behind computer science. For me, the class was exactly what I was looking for. However, if you're interested only in learning a programming language like Java or Python, this class might be more of a commitment than you're looking for. ",
            "\u00a0I would recommend this course to anyone who is considering CS or something similar as a major. Otherwise, I would say no, because it really is geared toward those who already have some sort of foundation off of which to build more knowledge. ",
            "\u00a0No, I wouldn't recommend this course. While topics are theoretically organized, their presentation is haphazard, and TA office hours are both (re)scheduled last minute and too overcrowded to be of much help ",
            "\u00a0Do not skip 201. It's a great introduction to UNIX, to machine architecture, and to recursion. Recursive programming is an invaluable skill which translates into every modern computer language, and it's a challenging new way to think about programming. The historical content helps you understand contemporary machines and it's simply so fascinating. ",
            "\u00a0I would recommend this course to another student. Yes, Racket is a very old language, and at the start of the course, I was so annoyed that we were not using a more practical/relevant programming language like Java or C. The lectures were not super exciting either. However, I think the topics we covered in the class are very useful for any programmer. For example, recursion is a big computer science principle, and since most of our pset questions needed to be solved with recursion, I feel like I have a good understanding of the topic. Additionally, I thought it was really cool to learn about Boolean expressions and logic gates. If you were to combine hardware and software in your future career and use both Electrical Engineering and Computer Science, it is really important to understand logic circuits because they are used in a lot of electronics. Additionally, I really enjoyed learning about computer architecture. Coding is important, but it is also interesting to learn how a computer can use 0s and 1s to perform a function and return an output. I never knew the purpose of a RAM or CPU until I took this class. It's really cool to learn how the inside of a computer works. In addition to just learning about computer architecture, we also built our own mini computer in our pset as well, which was an engaging hands-on approach. ",
            "\u00a0If you're looking to get a basic understanding of CS, more in-depth than CS50/CS100 then yes. But, I would consider taking a more specific course instead, one that is still intro-level but if more focus on a specific topic rather than theory so that you can walk away with useful skills. Racket, which is the language that CS201 uses, is utterly useless. If you're doing a CS major, consider skipping this class and going straight to CS223. ",
            "\u00a0I would not recommend this course to another student since the material learned in this course will almost never be used outside of this course. The insight and cognitive thinking that was developed by this course could have been developed in any other computer science course. In this way, there is nothing unique to gain from this course. ",
            "\u00a0I would take this course for what it teaches you about recursion and about various types of computer machines. Though the lectures are boring and you can easily manage by just reading the online lecture notes, the problem sets really drive home the material and are challenging and intriguing. ",
            "\u00a0Yes!! ",
            "\u00a0Yes good course ",
            "\u00a0Yes ",
            "\u00a0I would recommend this course to another student if they want to learn about how computers and codes work. ",
            "\u00a0Yes, this class is critical for thorough understanding of recursion. ",
            "\u00a0If you're considering majoring in computer science, then this would be a good introduction to the major. Although the primary language that we work with is outdated, you will learn the language quickly and allow you to create several functions and programs. Over the first few weeks, you will ease into the course with your fellow students as you continue tackling the psets each week. This course will prepare you for the style and environment of other computer science courses at Yale. ",
            "\u00a0Good to take. Was pretty entertaining and relaxing to work through the problem sets at the beginning of each week. They take a while though so make sure you space them out over 3-4 days. ",
            "\u00a0I would definitely recommend this course to anyone who is interested in CS, but has also had a little CS experience before. I think it would be a little difficult to come into this course with no prior experience, but it is defininitely doable. ",
            "\u00a0I would recommend only for the computer science or cognitive science major. ",
            "\u00a0I 100% recommend this class to anyone who uses computers, likes logic games, and will attend class. You may see this course get middling reviews (I did), but these are unfairly weighted down by people who skipped an absurd number of lectures and put off the problem sets. \r\n\r\nOne of the struggles with classes that involve coding is that it's basically impossible to learn a programming language during a lecture. Prof. Slade knew this, and rather than try to (thus wasting everyone's time), he introduced us to ways of thinking about how programs worked. Also he's hilarious. Seriously, anyone who didn't think Slade was a good professor probably didn't pay attention. It's *very* clear that he cares about teaching--every time a student had a question that he couldn't answer, it was answered in the next class without fail. He also has lots of office hours and lunches with students, and he's an amazing resource--he's worked in every sector under the sun. ",
            "\u00a0If you want to major in CS this class is necessary. Otherwise I do not particularly recommend it. ",
            "\u00a0Yes- good for developing basic programming knowledge. ",
            "\u00a0I would definitely recommend this course to another student. This course is extremely approachable and has a really great support system. I also think that it really helps you develop a better understanding of the context of computer science. I feel like I finally am starting to understand computer science and the concepts besides just the programming. I think 201 is an incredible first class in computer science. I wish I would have taken it sooner. ",
            "\u00a0Yes it's a good introduction to CS - It not only provides you with a good foundation for CS at Yale but it also gives you a good conceptions and historical background to CS "
        ]
    ]
}