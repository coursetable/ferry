{
    "crn_code": "21889",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            4,
            7,
            13,
            27,
            11
        ],
        [
            6,
            11,
            24,
            17,
            6
        ],
        [
            2,
            9,
            14,
            28,
            10
        ],
        [
            6,
            11,
            18,
            24,
            4
        ],
        [
            0,
            3,
            21,
            30,
            8
        ],
        [
            0,
            0,
            16,
            34,
            12
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Learned a lot about the fundamentals of computer science. ",
            "\u00a0The basics of computer science like Turing machines, assembly language programs, strings and regular expressions, circuits, Boolean functions, and runtime analysis for programs. ",
            "\u00a0I learned about the fundamentals of CS theory and implementation. I learned to think recursively when writing code and how to apply knowledge of CS fundamentals to other subjects. ",
            "\u00a0The theoretical aspects of computer science (computer architecture, boolean logic, turing machines, etc.) ",
            "\u00a0recursion recursion recursion. Very useful Unix lectures/notes. Interesting stuff about how computers actually work/what computer architecture is ",
            "\u00a0This is truly a computer science course (as opposed to a course on programming). We learned a lot about recursion and how computers work, from strings and languages, to assembly code, to machine code. Learned some functional programming with Racket, which is actually quite fun. Really interesting material. ",
            "\u00a0Great introduction to Racket and computer architecture. ",
            "\u00a0I learned about recursion and note taking. I learned a lot about what a single program does and how to think in code. ",
            "\u00a0This course taught me a lot about recursion, the ability to keep on refining your 'solutions' until they are indeed solutions and gave me and introduction into a few diverse areas of computer science. ",
            "\u00a0Learned Racket. Probably not a practically useful language.\r\nOn the other hand learned tons about recursion and how to implement it, which is cool.\r\nLearned about Turing machines which is awesome.\r\nLearned about computer architecture which is awesome.\r\nAnd learned about other stuff which was pretty cool too.\r\n\r\nWe implemented all that stuff through Racket, and honestly, going back to python now seems like a breeze, so I'm happy I was able to learn more programming through Racket. ",
            "\u00a0Thinking recursively, and better understanding the physical process behind computer function. ",
            "\u00a0How to think differently. ",
            "\u00a0Taking CS201 has provided me with the necessary skills that I will need moving forward as a (prospective) computer science and mathematics major. Not only did I learn a new programming language and paradigm (functional programming using Racket), I also learned about a variety of computer science topics in computer science, such as Turing machines, boolean functions, circuits, and basic computer architecture. All of these topics we learned more about and applied by writing Racket code in our problem sets ",
            "\u00a0I've learned about recursion, computer architecture, and how compilation of programs works. I have also learned how to use Unix and. apparently, racket. ",
            "\u00a0A good introduction to a different kind of programming that I didn't know before. ",
            "\u00a0I now understand how assembly code is translated into machine code. ",
            "\u00a0Greatly helped with recursion. ",
            "\u00a0I was able to learn about fundamental concepts in computer science, namely, recursion, pointers, and computer architecture. ",
            "\u00a0Learned the basics of Racket, computer architecture, boolean expressions, recursion, etc. ",
            "\u00a0Use of racket, understanding of how computers are organized. ",
            "\u00a0Racket fundamentals, computer architecture ",
            "\u00a0I learned about functional programming and how to program in Racket. ",
            "\u00a0Recursion, Racket ",
            "\u00a0Very strong understanding of recursion ",
            "\u00a0I learned a lot about computers structures and general programming skills. ",
            "\u00a0Great foundation of theoretical computer science and solid introduction to functional programming. ",
            "\u00a0Racket skills\r\nAnalytical skills\r\nProgramming skills ",
            "\u00a0The main thing I gained from this course was proficiency in Racket (programming language). The course is mostly about learning to manipulate Racket; there are problem sets due every week. The concepts we studied with Racket were recursion, boolean values/expressions, compiling/assembly languages, circuits and gates, list making/sorting, trees, regular expressions, context free grammars, and Turing machines. We also learned a lot about UNIX commands. In addition, we learned about concepts like program running time, computer architecture, Boolean bases, sequential circuits, memory, and the negation of binary numbers. The highlight of the course for me was building a mini computer in Racket called the TC201. ",
            "\u00a0Racket, Recursion in coding, How to take a computer science class ",
            "\u00a0Learning how to think  it's a very self-discovery-based course, and we learned about how computers work by simulating those things ourselves through guided psets ",
            "\u00a0Recursion. Ability to create efficient code.\r\nDposer understanding of computer science as an academic discipline. ",
            "\u00a0Developed a solid understanding of Racket (not super duper applicable directly) but also more broadly how to solve problems recursively. I also learned the basic circuits that form computer memory and other basic operations which then lead to simulating a computer in racket and writing on machine language. Learned about some basic regular expression and other string class operations. Also Ive definitely gotten better at UNIX through the class! ",
            "\u00a0I learned about recursion as well as some problem solving skills. ",
            "\u00a0Learned the fundamentals of Computer Science. Learned about circuits, logical expressions, grammars, recursion, computer architecture, etc. I can now program in Racket (which I actually really enjoyed). ",
            "\u00a0This class is a decent introduction to programming. You learn Racket, which is not the most practical language but a valuable one nonetheless. You also learn other concepts like computer architecture and more of the fundamentals behind complex computer programming. ",
            "\u00a0I learned racket! ",
            "\u00a0I gained a basic understanding of computer science ",
            "\u00a0Racket, recursion, assembly-level coding ",
            "\u00a0I learned Racket. ",
            "\u00a0I gained a strong understanding of recursion, specifically using Racket. "
        ],
        [
            "\u00a0Strengths - ULAs were incredible, Professor Slade taught many different topics and is also very kind\r\nWeaknesses - Problem sets could sometimes have a very steep learning curve ",
            "\u00a0The material is interesting, and the notes that the teaching staff put on the website are very clear and helpful for self-studying. The lectures aren't very useful, and I found that I can learn the material on my own better by just looking at the notes online. Problem sets are very engaging, and although the coding language Racket is not widely used at all, in each homework you build something from scratch using Racket and at the end you can simulate it or run it to model a major topic that's covered in lecture (we wrote our own Turing machines, own assembly language programs, and own grammars in Racket!!!). ",
            "\u00a0Sometimes the lectures can be not useful. We might spend too much time going over the problem set and I think it would be better spent actually learning instead the problem sets are pretty self explanatory. ",
            "\u00a0strengths - well-rounded cirriculum - thought I learned a lot of computer and want to learn more\r\nweaknesses - lecturers could be more engaging, online notes are aesthetically hard to read (though well-organized), website could be updated ",
            "\u00a0Strengths: concepts used in the homework are actually really interesting, especially computer architecture. The homework can be really fun too because Professor Slade breaks the assignments up into small pieces/puzzles that build on each other until you have a really cool final product\r\nWeaknesses: Lecture is not engaging at all ",
            "\u00a0Fun psets. Lots of help from ULA's. Lectures are amusing but a bit dry. Material is super fascinating. ",
            "\u00a0Strength: Great overview of computer architecture \r\nWeakness: While Racket is a great way to teach us how to think. the underlying message that I'll never use it again damper by motivation. ",
            "\u00a0I didn't have much coding experience and this was a really good introduction. The course has a good progression and was easy to follow along with some help from office hours. ",
            "\u00a0Quite pleased with the course overall. ",
            "\u00a0The material covered is VERY COOL. I think I may be in the minority (I really don't know), but I found the material to be incredibly interesting. It has led me to reevaluate my major decision from MATH to something closer to CS or EENG; it was that cool.\r\nAnother strength is the accessibility of resources for the class: the notes are totally comprehensive, and everything is posted online.\r\n\r\nWeaknesses:\r\nRacket isn't useful, but I don't really care, I'm glad I learned it.\r\nLectures can be dry, the real fun is in implementing the stuff in the PSETS. ",
            "\u00a0Strengths: levels the playing field by making everyone program with Racket, an otherwise unused language. Great faculty and staff engagement with the students through Piazza and office hours.\r\n\r\nWeaknesses: Disconnect between lecture material and homework problems. I also feel like this semesters exams have been reduced in difficulty, judging by past exams. As such, I find it difficult to gauge my understanding of the material. ",
            "\u00a0Lecture style was hard to follow. The course doesn't teach much that is useful or interesting. ",
            "\u00a0This course teaches a lot of different material, most of which was not really related to each other. I found this to be a weakness of the course because it didn't seem like there was any continuity between any of the topics, besides our study of boolean functions and circuits. And towards the end of the term, we weren't really taught the final topics that were going to be on the exam; we basically had to teach the remaining material to ourselves. ",
            "\u00a0It's interesting and enjoyable but the lectures are incredibly dull and useless. ",
            "\u00a0It was a very good course; I loved it. ",
            "\u00a0Overall I feel like I have a much better understanding of how programming languages work; I do think that this class could benefit from a flipped learning structure, where students first do the reading for the day and ask Professor Slade to clarify the parts that are unclear. The homework walkthroughs should stay as they are extremely helpful. ",
            "\u00a0The course reinforced my understanding of computer algorithms and methods through rigorous problem sets. Although they took some time to complete, in the end, they helped me better digest the contents of the lecture. One potential area of improvement is the class structure. Because the class is a large-scale lecture format, it is easy for students to lose concentration or interest in the lecture. I would have liked to have more group projects that provide opportunities for students to apply what they have learned to cultivate problem-solving skills. ",
            "\u00a0Strengths: learned some of the \"under the hood\" stuff dealing with computers (e.g., RAM, assembly language, etc.). Good if you want a deeper understanding of computer science (as well as a clear grasp on what recursion is and how to implement it).  \r\n\r\nWeaknesses: the language you learn (Racket) isn't very applicable, which is something to be aware of when taking the course. ",
            "\u00a0Slade is a generous grader, but I think that's because people tend to struggle in the class because he doesn't actually teach. He uses notes from a past professor and doesn't even go into any real depth. He expects his students to basically teach themselves. As someone with no prior coding experience, and weak math background, I found it extremely difficult at times to keep up with the pace. Its made even worse by how apathetic Slade is, and how much class time he wastes with useless \"comics\" and \"polls\". Most people stopped showing up to class. If it weren't for the ULA's explaining class concepts, and my tutor, I would have definitely failed the class. That being said, office hours was a highlight of the course, because the ULA's were so passionate and good at explaining the homework. That being said, Slade failed to live up to his promise of making racket interesting, because of his lack of involvement. All in all, I think Slade is a lazy instructor. But I appreciate that he doesn't make his students suffer from harsh grading. ",
            "\u00a0ridiculously unengaging lecture (tho nice guy) ",
            "\u00a0Professor Slade was a clear lecturer and I appreciated that all of his notes were on the website. The psets helped me to understand the concepts, and the exams were fair.\r\nHowever, the class was slow at times and I don't see myself using the knowledge I learned in this class ever again. ",
            "\u00a0This course should have more resources for students to be able to understand the concepts in class. Most concepts, in both lectures and lecture notes are only explained verbally. I think it would be very helpful to many students to diversify the way course material is taught (ie diagrams, ",
            "\u00a0The TAs were really helpful during office hours. ",
            "\u00a0I think that office hours and pset walkthroughs were very helpful. But I think that lectures could be more engaging. ",
            "\u00a0Taught very well by professor. Problem sets help you understand material and are well organized and structured. Problem sets were fun and office hours were extremely helpful. ",
            "\u00a0It is a great course, you learn a lot, notes are great. ",
            "\u00a0I liked that it was set up so that as long as you passed all of the public tests for the problem sets, you would get a lot of credit. The private test cases weren't too bad. The problem sets were definitely the highlight of the course. They were really fun, and just challenging enough so that I never had to go to office hours but had to spend a lot of time thinking things through and debugging. The online lecture notes were pretty good, but sometimes just too dense and wordy. They seemed a bit dated. The exams were just challenging enough; I liked them. And the grading was fairly lenient. Mistakes were always explained on Gradescope. The main area for improvement is the lectures. I went for about half of the semester and noticed that everything we learned could maybe be reduced to about 10 minutes; the other 40 minutes were just fluff or tangents. I did enjoy lecture (it was funny sometimes), but I think they could be done more efficiently and maybe with better visuals. ",
            "\u00a0Strengths: I learned a lot from the problem sets, lots of support from ULAs\r\nWeaknesses: lectures were difficult to understand and were not particularly helpful for the problem sets and exams ",
            "\u00a0People hate on this class a lot, but I really liked it. The fact that lectures are quasi-optional doesn't quite sit right with me, but I think people like that (it's just because so many resources are available online through the course website) ",
            "\u00a0Strengths: office hours. Challenging psets.\r\nWeaknesses: contact time. ",
            "\u00a0Strengths: great survey of basic computer science, very detailed notes available online, homeworks were really well designed and fun to solve. Honestly, I also enjoyed the lectures.\r\nWeaknesses: that said, sometimes lectures seemed unnecessary. I didnt find the review of the homeworks in class (which would take the whole period) very helpful. ",
            "\u00a0The psets are great in my opinion, and that's coming from someone who took longer than most on the psets. They're puzzles that feel great to solve and leave you feeling accomplished. ULA support is great as well. Personally, I wish that lecture weren't as boring as they were. Honestly, I'm not sure what a good CS prof is yet because this was my first CS class, but I hope there are better ones out there than Slade. ",
            "\u00a0Incredible resources for review and study. Course notes posted online, review slides before each test, Professor Slade explains most of the homeworks, lots of office hours, etc. I liked Racket. Not a flashy class but a pleasant one. ",
            "\u00a0The course is a fine overview of basic computer programming. The general order of the material makes sense, but it is not the most engaging class. Maybe that has to do with the Professor that I had (Professor Slade), but generally, I dreaded going to lecture. Mainly because I felt like I was wasting my time. I went to every class and paid attention. Leaving class, I felt like I had a good understanding of the material, but when I opened the homework, I have never felt like such a complete idiot. That is because what we learn in class has little to do with what we are asked to do in the homework assignments. Instead, I would have to spend hours and hours every week in office hours, learning the material from the ULAs. This is not what I signed up for. I also could not attend most of the office hours due to prior commitments, making this class incredibly stressful for me, as I definitely would have failed if I did not make it to office hours. In the future, it would be very helpful if students were made aware of the office hours schedule before the start of the semester so that they can plan accordingly. Also, the professor should be more upfront about the time commitment outside of class time and allow students to decide if they indeed would like to spend a significant amount of time in office hours for this one class. Lastly, much stress can easily be avoided by taking 5 minutes out of class to go over some tips covered in the walkthroughs. I know Professor Slade did \"go through\" the homework, but his approach was not exactly helpful. Instead of just reading the assignment, which Yale students are very capable of doing on their own, some warnings, tips, or general strategies would be greatly appreciated. ",
            "\u00a0Lectures were pretty boring and didn't seem that helpful for actually learning the material. ",
            "\u00a0It was just a lot of Racket - still wished it was in a different language ",
            "\u00a0Strengths: psets were engaging. Weakness: lectures were unengaging and redundant ",
            "\u00a0The problem sets were actually cool. The lectures aren't great and are a pretty big waste of time. ",
            "\u00a0Lectures are less application and more of a regurgitation of the notes already posted online. It would be more engaging if in-class lectures augmented the notes in an interesting and helpful way. "
        ],
        [
            "\u00a0NO!!!! ",
            "\u00a0Yes! ",
            "\u00a0Yes, definitely if you are a newcomer to computer science major or if you just want to explore computer science. Don't listen to other people who say that Racket is not a useful coding language to learn. Yes, it is not that useful, but the purpose of the course isn't to teach you how to code in Racket--it is to teach you some amazing concepts in CS. I would say that using Racket forces you to think recursively because this language doesn't have for/while loops, so almost every function you write in the homework is recursive. This will prove extremely useful when you get to 223 or later courses. ",
            "\u00a0Yes though it might seem that racket is a waste of time it has helped me so much with my knowledge of how computers fundamentally work. I also now have a breadth of knowledge on recursion. ",
            "\u00a0even you like solving puzzles/math problems and aren't a cs major, take this class and it might change your mind\r\ncs majors have to take this class so if you are one take it\r\nif you just took cs50 and are deciding between 201/223 you can't go wrong with this class - there is a tad of overlap but this course definitely goes into more depth ",
            "\u00a0I would definitely recommend this course to another student. Although Racket isn't a useful language for everyday programming, the concepts learned in this class are really interesting. The workload isn't too overwhelming either. ",
            "\u00a0If you want to learn about how computers work and are willing to put in some work, yes!!! The class is fun, Slade is great. It's not really an intro course in that it assumes that you already kind of know what coding is and have some background, but it is certainly doable for all levels, and the material is super interesting. ",
            "\u00a0Yes, it's a very challenging programming language that involves a lot of recursion. But, overall, you learn to think a little better. ",
            "\u00a0I recommend if you have little coding experience and would like to learn multiple languages.\"Coding is like learning how to drive, the car doesn't matter\" I really thought my understanding of computer science increased. ",
            "\u00a0Yes, before diving into very intense courses like 223, this gave me a flavour of what CS at Yale or college in general is like. ",
            "\u00a0Yes. It gives you an awesome new appreciation of how computation works, and though S.S. might not be some people's favorite, I'm a huge fan. He clearly knows his stuff, and in OH, where no one ever goes, he is super friendly.\r\n\r\nIt is possible to just never go to lecture and still complete the course, but that is how you end up having a mediocre experience. Going to lecture is how you feel engaged, and you also can learn the material better, even if at times it feels like you could have gone through the notes in 20 minutes instead of spending an hour in the room. ",
            "\u00a0Yes, its a fun course to get your hands dirty in CS programming and theory. The course holds your hand if you want it to, so its good for beginners and intermediated alike ",
            "\u00a0Only if you're a CS major ",
            "\u00a0I would probably only recommend this course to someone who has to take it for their major requirement in CS or some other major. Otherwise, I'd say most people remotely interested in CS should probably take one of the other intro courses offered. ",
            "\u00a0Yes. The course teaches you a lot about how programming and computers in general work. ",
            "\u00a0Yes, especially for S&DS or CS majors ",
            "\u00a0Yes if they are interested in pursuing computer science as a major. ",
            "\u00a0I would. It helps with recursion ",
            "\u00a0I would recommend this course to another student who is seriously considering the computer science major. Although this class alone should not be a ",
            "\u00a0You probably have to for the major, so in that case I would recommend it. If you're thinking about skipping this class, I would still be careful because some of the stuff (mainly recursion) is useful to know moving forward if you want to take 223. Not a bad class--you definitely learn what you put into it. ",
            "\u00a0If you are studying cogsci, cs, computing and the arts, or neuro, you really have no choice but to take this class. If you are someone not majoring in any of these, don't take it. It will be agonizing for no reason. Take 122 and learn java instead. Unfortunately, racket isn't a very marketable skill... ",
            "\u00a0just because it is required and you learn how to learn on your own ",
            "\u00a0I thought the class was interesting. I took it as the breadth requirement for the Cognitive Science major. I did well in CS50 before this, so the 8-12 hour psets didn't phase me. They were even fun at times. I approached them like logic puzzles. Be warned though, the class is slow at times, and I don't think I'll ever use what I learned in this class later in life (at least not explicitly) ",
            "\u00a0If they are a CS major, it's a requirement. ",
            "\u00a0Yes. ",
            "\u00a0Yes I think it has a good introduction to computer science. ",
            "\u00a0Absolutely. Required for CS majors. ",
            "\u00a0For sure, I learned so much. The flexibility of the course allowed me to push myself harder by focusing on the material instead of deadlines. ",
            "\u00a0Yes, it's a great introduction to the basic concepts of computer science. Honestly, the problem sets were really fun; they were like logic puzzles. A lot of people hate on the course for using Racket, but I loved Racket. It's an extremely high-level language (meaning it's simple and easy to use, unlike C), and you never have to worry about memory. Although you'll probably never again use Racket in your life, learning Racket will help you easily understand how computers think and how programming languages work in general. I loved this course. It's made me want to major in computer science. One thing you should know about this course is that you'll mostly be teaching yourself everything. The lectures are pretty useless. But as long as you can think like a computer, this course will be easy. Be prepared to put in 8-12 hours per week on the problem sets. ",
            "\u00a0Yes, I learned a lot and I generally enjoyed working on the problem sets. ",
            "\u00a0yes! take it! it's so fun ",
            "\u00a0Yes. Anyone that wants to develop fundamental understanding of the subject. ",
            "\u00a0I would strongly recommend this course to any student interested in computer science with some previous experience. Its really cool to get to learn the basis (through circuits and assembly language and then compilers) of modern computers and programming. I also thought the problem solving element of computer science was well emphasized in this class which was fun. Also Racket has definitely grown on me! It provides some real insight into how other languages actually work. ",
            "\u00a0Honestly, I took this class for fun, and if you have the time and energy, then this class can be worth it. ",
            "\u00a0If you want to learn to program / some casual CS, no. If you want to learn more of the theory / what's \"under the hood\" in Computer Science then yes. ",
            "\u00a0Maybe. If you have to take it, like I did, you just have to take it. Otherwise, if you can avoid it, definitely pass. It's a fine class if you really like CS and are SO passionate about it, but if you don't want to spend hours in office hours every week, I do not recommend taking it. ",
            "\u00a0Racket is kind of a fun language and you will learn it. The lectures aren't great. Take this course if you have to. ",
            "\u00a0Yes because it is necessary. Other than that, no ",
            "\u00a0I wish it wasn't a required course in the curriculum for CS major. It would be a cool class but just shouldn't be necessayr. I just didn't learn that much that is relevant. ",
            "\u00a0Yes, you gain the skills you need as a beginner CS student such as UNIX, recursion, and other 'under the hood' knowledge about computers. "
        ]
    ]
}