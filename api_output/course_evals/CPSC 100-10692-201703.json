{
    "crn_code": "10692",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            1,
            26,
            37,
            51
        ],
        [
            11,
            17,
            24,
            33,
            32
        ],
        [
            8,
            17,
            15,
            37,
            40
        ],
        [
            2,
            19,
            23,
            43,
            29
        ],
        [
            0,
            1,
            18,
            49,
            49
        ],
        [
            0,
            1,
            4,
            37,
            76
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Lots of coding and languages learned. Basic CS concepts covered. ",
            "\u00a0Computer programming, including C, Javascript, Python, HTML, SQL. ",
            "\u00a080/20 Understanding of computer science. ",
            "\u00a0I learned C, Python, SQL, JS, HTML--but I also learned how to continue learning these languages on my own. I learned how to read documentation, implement functions that I discover or write on my own, and I learned how to problem solve when my code doesn't work. I learned how to work out my bugs, and how to spend a long time designing and implementing an idea. ",
            "\u00a0I learned a ton. Before I did not know any c, python, JavaScript or HTML. I learned enough to make a fully functioning website even though I had never done any website creation before. I also learned better methods for debugging. ",
            "\u00a0Broad understanding of how coding works: how the images and fonts, and websites, and everything on our computer screen comes together - and how it can be created through the power of coding and its various languages! ",
            "\u00a0Programming thinking, various CS languages, algorithmic  thinking ",
            "\u00a0Learned basic coding and programming in several different coding languages. ",
            "\u00a0strong knowledge in C, Python, Javascript, how to build a web app ",
            "\u00a0I can (sort of) code in C, Python, Javascript and SQL ",
            "\u00a0This class was a great introduction to computer science and programming. In terms of programming languages, we spent most time on C, then Python, then SQL, then JavaScript. ",
            "\u00a0CS50 teaches what they say they do in the syllabus. ",
            "\u00a0I learned an incredible amount about coding. The focus is on C, which isn't really used a lot in application nowadays, but it helps to understand the basics of coding if you've never coded before. You also learn python, JavaScript, HTML, and a little bit of stuff with CSS. I had never coded or had any experience at all with computer science prior to this course, but was able to put together quite a few cool projects by the time the course was over. It was a LOT of work though. It's incredibly challenging and you should prepare to set aside at least 4-6 hours per week for visiting office hours alone. ",
            "\u00a0thinking process of programming, various computer languages including C, Python, HTML..., how to make use of online resources and collaborate with peers to solve problems ",
            "\u00a0This crash-course in the basics of coding definitely taught me a lot about logical problem solving. I do feel proficient in C and Python after taking the course (not yet Javascript), and I recognize that I should be impressed by the speed at which I got to this point. But, that being said, CS50 took a huge toll on my time management and, honestly, mental health. The beginning of the semester was very tough for someone with no coding experience, and I had serious trouble keeping up with my other classes while I was trying to hash through those first psets. ",
            "\u00a0I learned how to program a website with flask, html, and sort of javascript? ",
            "\u00a0I was able to practice with a variety of coding languages such as C, Python, HTML, and Javascript. I learned general syntax while programming as well. I also gained problem solving skills from completing the problem sets each week. ",
            "\u00a0I gained a ton in terms of knowledge and skills in this class - I learned to understand larger concepts in computer science as well as how to code in C and Python especially, as well as Java and a little bit of HTML. ",
            "\u00a0I learned the basics of a variety of different computer languages, and defiantly became more than an amateur coder.  I really valued how this course taught me how to teach myself a new language or a new skill using online resources and trial and error.  In the real world of coding, I would be required to do this often, so this gave me a more valuable / relevant background in computer science than a comprobable java or C only CS class. ",
            "\u00a0Valuable coding skills and an algorithmic approach to solving problems ",
            "\u00a0Intro to various languages and aspects of computer programming ",
            "\u00a0I learned so much in CS50, definitely more than I could have ever imagined. I learned C, Python, HTML and Javascript pretty thoroughly and have built so many cool programs from scratch or with minimal assistance. ",
            "\u00a0Interesting, exciting survey of computer science skills and application ",
            "\u00a0I learned how to code in C and Python, and gained a little bit of experience in HTML, CSS, JavaScript, and SQLite.  Furthermore, during my final project, I learned how to code in Swift, and developed a app for the iPhone. ",
            "\u00a0I learned the basics of coding. ",
            "\u00a0A better understanding of the field of computer science and what it means to be a computer scientist ",
            "\u00a0Learnt the basic practice of computer science in a range of languages! ",
            "\u00a0I received an introduction to computer sciences and learned the foundations upon which to code and think more critically. Throughout the course I learned to code in C, Python, HTML, CSS, SQL, and Javascript. ",
            "\u00a0I learned a ton about the fundamentals of programming in C and several other languages! I was a complete beginner in computer science but managed to get a ton out of this course. My favorite part was creating my website for my final project, using SQL, Python, and HTML. ",
            "\u00a0I learned several new coding languages. ",
            "\u00a0A very strong understanding in basic com-sci. ",
            "\u00a0I learned a lot about how computer science can be applied to lots of different fields in the real world. I also became familiar with languages including C, Python, SQL, Javascript, and HTML. ",
            "\u00a0Went from 0 programming experience to basic proficiency in C and Python in 3 months. Amazing. ",
            "\u00a0Basic programming skills in C, Python, SQL, and even a little JavaScript. Problem solving via programming ",
            "\u00a0I left this class with a better understanding of computer science, especially considering I had never even attempted to code before this class. I learned how to code in C, Javascript, Python, and HTML. I also learned how to create a Google Chrome extension and an interactive website from scratch. While I can't say I'm proficient in any of these languages, I feel comfortable enough that I could start and finish a small-scale project on my own. ",
            "\u00a0I learned a lot about the real life applications of CS and really enjoyed the class. ",
            "\u00a0I gained a grasp of basic practical coding skills and memory storage. ",
            "\u00a0A broad introduction to various CS languages and CS logic. ",
            "\u00a0I learned a bunch of different languages. ",
            "\u00a0This course was a great overview of scratch, C, python, and javascript. It doesn't go into extreme depth into any one language, but I still learned the fundamentals of programming. ",
            "\u00a0You learn a lot of C, which is good as a foundation for Computer Science. On top of this, you learn Python, JavaScript, SQL, HTML, and Jinja. ",
            "\u00a0Taking about gains, I learned 3 programming languages and 2 extra useful languages from this class. ",
            "\u00a0I learned the coding languages c, python, java script, and markup language HTML. I also learned a bit about how computers and the internet function in terms of hardware, memory storage, etc. ",
            "\u00a0I learned a ton about computer science and different programming languages. ",
            "\u00a0General basic programming in C, Javascript, and Python. Web-based programming in Javascript and Python. ",
            "\u00a0Introductory programming skills and basic computer science concepts. Covered the following: C, Python, HTML, Javascript, and SQL. ",
            "\u00a0Rigorous programming skills in various languages, algorithmic thought process, basics of computer logical thinking. ",
            "\u00a0Learned many different languages and worked closely with tutors for the first time. ",
            "\u00a0I learned how to code/program in the programming languages C, Python, JavaScript, SQL, and others, and developed proficiency using HTML and CSS as well as APIs and other web development tools. ",
            "\u00a0I developed a good working knowledge of how to solve problems in coding using loops and logic, plus some understanding of C, Javascript, SQL, Python, HTML, CSS, and PHP. ",
            "\u00a0I developed many logical thinking skills. I was able to think about problems in a different way, and developed a way to view one problem from several different perspectives. ",
            "\u00a0I learned the basics of computer science and how to apply what I learned in this class in other settings. ",
            "\u00a0Basic coding skills in language C, Python, SQL, html, Java Script. ",
            "\u00a0Python, html, C languages. Working with quick due dates ",
            "\u00a0I learned fundamentals about computer programming, syntax in various languages including C, Python, and SQL, and how to think logically like a computer scientist. Through studying the language C, I learned fundamental basics of coding, such as pointers, that are often abstracted away when using more improved languages, deepening my understanding of what's happening under the hood of a program. I learned the syntax of how to utilize the languages we covered, and the computer scientist mindset to google what I don't know to learn it, and to think in a measured fashion to solve problems. ",
            "\u00a0Basics in a variety of different computer science languages (Python, SQL, C, HTML) and broad problem solving skills ",
            "\u00a0You learn the basics of C, Python, JavaScript, HTML, and SQL -- probably not quite as much as the course aims to convey but still a lot of information. ",
            "\u00a0I went from knowing pretty much nothing about computer science to being quite familiar with both practical programming concepts as well as computer science theory. Overall, I'd say I learned a LOT in this course. ",
            "\u00a0I learned computational skills as well as programming techniques. ",
            "\u00a0I developed understanding in many languages of CS ",
            "\u00a0I learned about several programming languages, including C, Python, JavaScript, and HTML. ",
            "\u00a0I learned the basics of computer programming and it's application. Moreover, I learned programming languages such as C, Python, and Java. ",
            "\u00a0I gained a solid foundation in the use of C, Python, and HTML. While I gained experience in some other languages, I think these are the most developed. Plus, I learned how to approach pseudo-coding to solve problems and learned to comb through resources on the internet. ",
            "\u00a0I gained skills concerning basic coding languages such as Python and C, as well as became more adept at problem solving and thinking in alogirthms. ",
            "\u00a0CS50 taught me a lot of basics of programming. It also gave me a strong understanding of each step, from binary to more complex languages. Also design tools through html and css. ",
            "\u00a0I learned about many different computer science topics, including python, C, hashtables, and many others listed in the course syllabus. ",
            "\u00a0I learned how to think about coding and basic coding skills ",
            "\u00a0A brief introduction to a lot (really a lot) of computer ideas and programming languages. ",
            "\u00a0I learned how to code in C, Java, Python, and HTML, and I learned the fundamentals of computing and designing programs. I also learned that CS requires a lot of patience and attention to detail, and it's hard to write code without understanding what you're doing and how the overall system is working. ",
            "\u00a0Computer science, basic programming, how to think algorithmically ",
            "\u00a0Basic programming and computing skills, both practical and theoretical. ",
            "\u00a0I learned competency in several coding languages. ",
            "\u00a0Computer programming, web application design, and a new appreciation for how software works. ",
            "\u00a0As the course name suggests, it provided me with an introductory understanding of computer science and programming. The takeaways from the course are mostly conceptual, as the details of actual coding language will most likely be fleeting without continued practice. "
        ],
        [
            "\u00a0This course is so fast paced you aren't able to engage in any of the languages. All the lectures are online so at times you may feel like you have no professor. ",
            "\u00a0Strengths: having the lectures online, having lots of office hours ",
            "\u00a0Strengths: Very very very important and informative. \r\n\r\nWeaknesses: Difficult to get 1 on 1 help. ",
            "\u00a0David Malan is probably the most engaging lecturer I have ever seen, and he is so well prepared for lecture that he is almost performing his presentation. He explains computer science with unbelievable concision and detail, his examples are well-planned and rehearsed, and he is so fluent and knowledgeable in his topic. The lecture schedule is a bit awkward but it's easy to pick up a routine for watching lectures and beginning p-sets. The lectures are also very long, but the notes and example code are very helpful in understanding the implementation of different techniques and methods of programming. The p-sets are gamified and outright fun if you enjoy puzzles, syntax, and learning languages. ",
            "\u00a0We received a ton of help on our psets. There were many great resources. I also really liked the video taped lectures. I think the quiz and test was a little harshly graded and very different from the psets. ",
            "\u00a0more instruction on the problem sets would be appreciated. I personally think i would benefit more from a bit more concrete written instructions on writing the problem sets, rather than having to go to office hours every week. I don't know if anyone else feels the same, but i'd prefer only getting help when I'm very stuck and cannot figure out things myself, rather than having to go to office hours even before i start. For some problem sets, it's easy to feel overwhelmed due to lack of concrete instruction. For instance, I found one problem set much more manageable after our TA gave us a just bit more hints. ",
            "\u00a0Overall a great learning experience, I would say that it would have been more helpful if there was more personalized teaching, the section alone was not enough to really develop the coding skills I would have liked to. ",
            "\u00a0Way too many hours spent a week for psets and learning the basics ",
            "\u00a0Strength: engaging office hours, well-organized Hackathon & CS50 Fair, enjoyed working on the final project a lot with other people\r\nWeakness: lecture online, very long, intense Psets that were way harder than lecture material, puts those in \"Less Comfortable\" section at disadvantage since they are expected to do same work as those in \"More Comfortable\" section ",
            "\u00a0I think the course focuses more on the media and publicity rather than student learning. Office hours are also always a zoo so it's incredibly difficult to get help since TAs have too many students to help. I often found myself just struggling on my own for hours to avoid having to deal with office hours. On the occasion that I did go, I felt like I wasn't adequately helped because there were so many people the TAs couldn't really spend the time to figure out my bugs.\r\n\r\nExams also seemed a bit out of left-field, since there wasn't much focus on broader concepts until we had to take these exams.\r\n\r\nI will say, though, that section was exceptionally well run. I always understood the concepts much better afterwards. ",
            "\u00a0This course has a ton of online resources. If you enjoy learning online and can stay focused, then you'll like that. It also does a good job of directing you to documentation online so you can learn more on your own about topics covered in course lectures and problem sets.\r\nOne weakness is that it seemed like the course directors at Harvard would sometimes change problem sets from last year with little notice to the Yale instructors and TAs. It seemed like sometimes, they had to familiarize themselves with the content of the problem sets at the same time we were doing them. ",
            "\u00a0The strengths are the shorts and walkthroughs which are uber helpful during late night psets.\r\nThe sections definitely should be improved because the TA's aren't teachers or often very far along in their own CS coursework which can sometimes be frustrating. ",
            "\u00a0This course teaches you a lot, but you do a lot of the learning on your own. Because it's an online class (you watch lectures online) it's hard to be engaged. Also, it feels as though the homework doesn't always stem from the content in the lectures, so you have to go to office hours to get anything done. If you've never coded before, it's a great place to start, but it's really hard. The workload is intense and you will be very challenged, but you will learn. ",
            "\u00a0Strength: high availability of office hours, well-organized course material, course doesn't have an exam but rather a final project through which I learned a lot. I love the CS 50 fair which gives students an opportunity to showcase their project.\r\n\r\nWeakness: some TAs just sit around during office hours, feedback on tests/quizzes unclear ",
            "\u00a0It teaches you a lot in a very short time, but I don't know if I wrapped my head around all the concepts in the way I feel like I should have. We touched on important things too briefly, and skipped over the concepts that would have helped us to more easily understand psets (I don't think most CS theory really has a place in this course; sorting algorithms and rod cutting never really seemed relevant to what we were doing in section). It's also a pretty badly organized course, and the Harvard infrastructure always seemed vastly superior to Yale's. I was lucky in that I had a super helpful and passionate TA, but lots of friends had bad experiences with theirs, and I question the course's choice to have a Yale College sophomore lead section. ",
            "\u00a0Strengths: It is rigorous. It does expose you to many applications of CS.\r\n\r\nWeaknesses: In Fall 2017, this course was so severely understaffed that it truly was an overall negative experience. I realize that TA's in the CS department are often undergraduates, but to have a sophomore as a TA was absolutely shocking when I came to first section (AFTER reading period had ended, for the record). In this case, the TA performed as you would expect an inexperienced sophomore.\r\n\r\nHere's the problem with this course -- they expect a lot from you, and they expect you to teach a lot of it to yourself. And to be fair, that is genuinely how Computer Science is in some ways. But for an application-focused class (the amount theory taught is abysmally low, and if it is taught, it's very shallow), that can make the course near impossible for some people unfamiliar to CS. Office hours were a lifeline to 90% of the other students I knew taking the course.\r\n\r\nThe TA's seemed to be trained to not really try and genuinely help you, but to \"think\" that they helped you so they can move on to another person. This is truly unfortunate, given how crowded office hours tend to be. I've heard of many students who know what area of the pset they're struggling with, but when they show the TA, the TA will point to another section and tell them to fix that, and then rush away to try and help someone else in the long line of students. When this happened to me specifically, I later returned to the same TA and reiterated my earlier problem (an hour later, bc that's how long it took to get back to me), and only then did they actually take the time to listen to my issue. \r\n\r\nI criticize in general that the CS50 structure is so accepted in its flaws that they just generally tell people to Cr/D/F the course. In my opinion, this is because they know they will not be teaching the material, and they know they will be offering little help. ",
            "\u00a0The strengths of this class are that it covers a nice variety of topics and coding languages and attempts to make the class and office hours exciting. Unfortunately, it is difficult to complete the  problem sets with the information provided in the lectures so students depend on going to office hours. This could be improved my making sure all the tools we need each week are presented to us in the lectures each week and by making our sections more helpful. ",
            "\u00a0Strengths: If you put in the work in this course, you will learn a ton and gain a lot in terms of computer science knowledge, more than you would from another introduction to computer science course, significant and meaningful conceptual teaching\r\n\r\nWeaknesses: Time required for the course does not equal the output (spend way more time than necessary because of the way the course is taught - not actually AT Yale and without specific instruction for code), does not work well for beginning coders because it lacks teaching for the actual code and instead focuses on concepts, not taught at Yale ",
            "\u00a0This course was so unique since I learned such a range of skills and languages in such a short time. However, one way it could be improved would be to narrow the spectrum just a bit and cover fewer languages (since I felt like at the end a lot of the web based languages for backend and front end got convoluted and jumbled together). ",
            "\u00a0This class is weird. The material is pretty well explained and the PSETs do a decent job of giving you practice with a large amount of material without being overwhelming. In terms of learning the stuff, it's pretty good. It also comes with photo shoot-office hours, themed Spotify playlists, and a cs50-specific hackathon. I never felt comfortable going into office hours because a. chances are there were going to be a million people there and b. I have no interest in having my picture taken when I just need help with an assignment. The glitz gets in the way of actually teaching the material, and ends up making the class feel super cult-y, where they constantly try to make you feel like you're in some great community instead of just learning. You also get extremely minimal feedback on your assignments if you don't go to office hours to ask specific questions. ",
            "\u00a0CS50 is very social. Office hours in CTL feel like festivals! ",
            "\u00a0The strengths of this course are the overall organization of the course and the entertaining, well-done lectures by David Malan.  It really helps you learn how to code, as well as learn how to learn how to code in different languages.  I started with no knowledge of computer science and coding, and now feel very confident in the subject and excited to learn more.  I also really enjoyed how the final month of class was focused on creating a final project.\r\n\r\nI think some problem sets could be improved for CS50, especially the ones that made you read a lot of code and then eventually write very little.  I learn better by actually writing the code, so sometimes it felt like a waste of time to be reading a bunch of stuff and then implementing something that I don't totally understand.  Furthermore, I think the grading could be improved.  While they do allow students to petition for regrades, it is a little disheartening when a grader marks your answer completely wrong because they don't understand how recursion works... ",
            "\u00a0This course is overly ambitious and does not leave the people that take it with a useful skill set. I think we should have focused more on python. I also think that there should have been more support for learning languages. As someone coding for the first time I found the syntax was one of the largest obstacles that was not addressed enough. ",
            "\u00a0If CS50 spent less money on giant rubber ducks and more on more TAs who were better prepared to answer questions, I think everybody would be better off. ",
            "\u00a0Fun social dynamic - and huge support network of TFs for help with psets, but otherwise the pset material should be more specific to what was taught in the lecture and require lses googling. ",
            "\u00a0Strengths - curriculum in my opinion provides a great introduction to computer science and the different languages. I feel as though throughout the semester I learned a great deal and truly feel as though I grasp what is going on behind code now. \r\n\r\nWeaknesses - At times there is quite a bit of disorganization in the coordination between Harvard and Yale. For Harvards parents weekend we had potentially the easiest problem set of the entire semester, whereas for Yale's parents weekend we had hands down the hardest pset of the year. I do not believe that is fair, and it a clear example. Furthermore, there were wide ranges in ability and knowledge of the materials between TAs.\r\n\r\nWhile I am being a little critical on these weaknesses I will say overall I really enjoyed this class and am glad that I took it. ",
            "\u00a0Strengths- Amazing support from TA's in section and at office hours. Lots of fun aspects to the class such as cake at the first and last lecture, free t-shirts, and the CS50 fair where we get to present our final projects. They manage to teach you a lot about computer science while trying their absolute best to be accommodating to those who have never coded before. David Malan is a great lecturer and getting to watch his videos online and never having to actually attend lecture is very convenient. The fact that the 2 tests are take-home also makes this class a lot less stressful.\r\n\r\nWeaknesses- Some of the psets are just absurdly difficult, and you simply won't be able to do them without going to office hours. Certain psets can also be incredibly time consuming. I know some people don't like the fact that we watch the lectures streamed from Harvard, but this doesn't bother me. ",
            "\u00a0This class was poorly organized. While it is nice that the class attempts to introduce near-peer instructors, the relative inexperience of the course instructors shines through when I tried to contact tutors/instructors. For the final project, I was not put in contact with a project advisor until a week before the due date. ",
            "\u00a0Strength: Curriculum.\r\nWeakness: Lack of community. ",
            "\u00a0This class had a really strong support system with weekly office hours and sections. It also includes a lot of CS50-exclusive perks like Friday lunches with representatives from tech companies, the hackathon, and the final project fair. Just keep in mind that office hours get really crowded the day before the pset is due, but for the rest of the office hours during the week it's pretty easy to get help. ",
            "\u00a0I actually have no weaknesses to report, which is remarkable for an intro class. CS50 is, simply put, exactly what an intro class should be. It exposed me to a field I had no prior experience or background in through engaging lectures and challenging but interesting problem sets. CS50 was more about teaching yourself by working through the material than being talked at by a professor, which I really enjoyed. ",
            "\u00a0You could take it completely at your own speed and learn in the way that fit you best. Super adaptive course to all learning styles. ",
            "\u00a0The TAs need to be better trained to answer student's specific questions about the problem sets in office hours. Often times the TAs just told me to Google certain questions because they didn't know the answer, which became frustrating as someone who had never coded before this class. This lack of help resulted in quite a few unfinished problem sets which negatively impacted my grade. I also think that the staff could be more accommodating when it comes to providing tutors to struggling students. I had a projected D in the course, and I still couldn't get a tutor.\r\n\r\nThis being said, the class had a significant amount of resources, such as office hours and online resources like the lectures and CS50 Discourse. Use as many of these as possible as they are very informative, but overall, you need to be prepared to help yourself in this class. ",
            "\u00a0Sometimes, there were too many topics being covered in one lecture that we ended up learning nothing at all. It would be much better to go more in depth into some of the topics towards the end and leave out somethings as a tradeoff. ",
            "\u00a0This class is very well run. Office hours were the most helpful aspect of the course. Sometimes, the number of students at office hours largely outweighed the assisting capacity of the TA's and CA's and students spent a lot of time waiting for help. Maybe more office hours could be offered with more TA's and CA's available to help. ",
            "\u00a0Strengths: Lots of help available, interesting psets, fun.\r\nWeaknesses: Lectures and sections often felt redundant, there seems to be more of a focus on marketing and being flashy than on students' learning. ",
            "\u00a0It was not good because it was very difficult and the material was not relevant to the psets. ",
            "\u00a0Strengths: a intro into many different programming languages and computer science. The CS50 community is unparalleled and the course TA's are extremely helpful and invested in your learning. \r\nWeaknesses: you are left to do a lot of googling to figure things out for the pset that the lectures didn't cover. Also lectures covered some material not on the psets, test, or quiz. ",
            "\u00a0The course is very difficult. But it really pushes you to be proactive in going to office hours. Its also meant to simulate what coding in the real world is like (a lot of going on Stack Overflow and debugging). Although I wanted to pull my hair out more times than once, I learned a hell of a lot. ",
            "\u00a0This class has MANY weaknesses. I believe it was understaffed and I did not get to talk to TAs or Heads much at all. I did not think that I was properly prepared for any of the psets or tests, and I often found that I was teaching myself all the concepts and that lectures and sections did not really help. This class was too stressful and too much work for an \"intro course.\" I came in not knowing any computer science, and yes now I do know more, but it was not made very accessible to me and this class has turned me away from comp sci as a major. ",
            "\u00a0There is way more information than needed. ",
            "\u00a0I think the strengths of this course are the strong support network available for students struggling and the wide range of material taught. The weakness of this course is the differing length of problem sets, which makes it difficult to plan how long things will take. ",
            "\u00a0I love the online lectures. They are very well edited (saves a lot of time) and Dr. Malan gives a very thorough explanation of everything. Perhaps a weakness is that the things we learn is too general, but I suppose this is at the cost of doing more interesting things like web-based programming and learning more languages. Sections were fairly useless for me. I didn't really learn anything that I wouldn't be able to figure out myself in less time. ",
            "\u00a0Strengths: Covers a lot of content. Problems sets are engaging and really help you understand the content.\r\nWeaknesses: The class goes over many concepts superficially due to the ambitious syllabus. ",
            "\u00a0Spend too much time on simple ideas early on and not nearly enough time on extremely complicated concepts. The course is very cult-like and very exaggerated when it comes to the fair, lectures, hackathon, recruitment, etc. (Could be good or bad depending on what you are looking for). ",
            "\u00a0This class is extremely engaging, the problem sets are enjoyable and, while a lot of work, not excessively difficult, and there is a good support structure through office hours and section. The online lecture format was not a problem for me and I enjoyed the flexibility of watching the lecture whenever I had the time. One thing about the course which I found challenging is that because grades are standardized across levels of difficulty and TAs, I had really no idea of what my grade in the course was actually going to be-- the mid-semester estimation provided was helpful, but grades could change significantly since then and it was not estimated to a specific letter grade. ",
            "\u00a0Strengths: many office hours, extremely well resourced, engaging. Psets are sort of addictive to solve & applicable to the real world. \r\nWeaknesses: Have to put in an incredible amount of effort to get anything out of it, but that's an inherent problem w CS. TFs seemed overworked :( (See question 13). I felt kind of physically miserable from all the junk food, but the intense problem-solving environment made munching kind of compulsive. This problem would be solved by the presence of some carrots :) ",
            "\u00a0Strengths: the amount of support given by faculty members, the amount of free things that you get from the course, and the discussion sections\r\n\r\nWeaknesses: the pace at which the course moves during the first few weeks. It moves too quickly for many people, which is why half of the students drop the course. ",
            "\u00a0I personally find it easier to pay attention and engage with live lectures, so I would have liked if David's lectures could have been at Yale half the time and at Harvard half the time so students from both schools had the opportunity to attend his lectures in person. Other than that, I think it is a great course. ",
            "\u00a0Very heavy workload. Plenty of assistance with office hours and TAs ",
            "\u00a0This class had great instructors but horrible curriculum.  Benedict and Natalie, and all the undergrad teaching staff, were very helpful and encouraging, but their mentorship could not fix the disastrous CS50 curriculum.\r\n\r\nFor the psets, instead of learning to code by actually coding, I spent the majority of the time trying to understand what the pset was actually asking, and watching Zamyla's walkthroughs on repeat.  When I have Alzheimer's, I will remember Zamyla, and perhaps not my own children.  The actual coding portion of the psets was minimal.  Sometimes the code, which was very difficult for beginners to understand, would be 90% written on the psets, and we would need write about 15 lines of code (as in Speller).  15 HOURS FOR 15 LINES?!\r\n\r\nAnyways, I would prefer an intro CS class with more straightforward psets.  The lectures and section didn't really prepare us for the psets. ",
            "\u00a0This course was perfect - I don't have any weaknesses to mention. Strengths include the very intriguing lectures (and I liked how they were online so it flexibly fit my schedule), the project-based problem sets that were always challenging, interesting and gratifying, and the wide availability of resources available to give help, particularly office hours. ",
            "\u00a0The class does an amazing job providing a background in computer science and problem solving skills. I learned more in one semester than I could have every though possible. This class, however, is also extremely time consuming and often seems unnecessarily hard. I huge emphasis is placed on teaching one's self, rather than learning through lectures / books. ",
            "\u00a0It could be improved if the lectures pertained more to the psets, and if reading and fully understanding the specs for the psets in order to start them wasn't the equivalent amount of work of another 2-hour lecture (or more). That was really the killer for me personally. The grading of the quiz / test also seemed arbitrary and was kind of sketchy. ",
            "\u00a0It's very self-directed, which can be a double-edged sword. There's a very steep learning curve, which can be hard on you especially if you struggle in the first few weeks. However, I've heard office hours are very helpful. ",
            "\u00a0It is a good course to learn problem solving, and the online courses allowed me to adapt to my schedule. ",
            "\u00a0The course was very stressful and very demanding. ",
            "\u00a0I really liked the problem sets of the course, although it was sometimes a bit difficult to get help. Rather than just teaching concepts, the course taught you how to apply the material. ",
            "\u00a0Strengths: organization and structure; clear instructions and turn in procedures. The lectures are entertaining. Office hours incredibly helpful if you know what's wrong in your program or thinking.\r\nWeaknesses: much of the material is simply not in the lectures, which isn't necessarily bad, but it should be made more clear to students entering the course. After problem set 4, the jump in time and difficulty made this the least enjoyable class I took this semester because I felt lost and did not even know how to name what I should be researching to get through the problem sets. Office hours simply do not have enough staff to remedy this issue of unawareness. ",
            "\u00a0I feel like the course did a poor job of introducing material and connecting that to its real-world application - it was difficult to follow the lectures and apply what was learned to the actual course work/p-sets.  I found myself constantly consulting google, stack exchange, etc for help understanding.  Though I expected this to such an extent as to reinforce understanding, I did not expect to spend so much time researching myself to understand independently.  Perhaps this is solely a problem for people like me with zero prior experience with coding. ",
            "\u00a0Lots of TAs and Office Hours, as well as helpful walkthroughs. However, the workload picked up extremely quickly and I was not prepared for such a high comittment. ",
            "\u00a0The course is fantastic in the teaching style, with lectures, lecture notes, and especially the office hours. The OH were so helpful. The progression of the course through languages was also good, however a week or two less on C for one more week on some of the later things like Javascript would have been helpful because it felt like it sped up a lot towards the end.\r\n\r\nThe Yale lectures should be more directly related to the course material. Also, the timing of David Malan's Yale lectures was terrible, e.g. putting one right at the start of thanksgiving break after the quiz had just been submitted. No surprise attendance was low to that! ",
            "\u00a0This course gave a very good introduction to many different topics. However, I wish we had more time to go in depth. ",
            "\u00a0The course was an extremely high workload and definitely dominated my overall workload but that was also one of its strengths as I learned very quickly. The biggest strength for me was the office hours. ",
            "\u00a0A strength of the class is the office hours. The TAs are so smart and willing to help. However, a weakness is that the pests seem sometimes unrelated to the lectures and are incredibly hard. They can only be completed if you go to office hours. ",
            "\u00a0The social element definitely make this course very fun and interactive. Lectures are online which kind of make the course more flexible. However, the heavy workload is a big drawback. During office hours of hard psets, tutor-student ratio is an issue as everyone is stuck on some bugs. ",
            "\u00a0The course was very thorough and creative in its assignments and questions. However I feel like sometimes even with the lectures, office hours and resources it was hard to get significant help with the psets unless you went very early in the week and they were very time-consuming. I wish maybe the pace had been a bit easier for beginning CS students. ",
            "\u00a0Flexible, can be done remotely ",
            "\u00a0Office hours were extremely helpful.  I felt lab sections frequently tried to cover too much. ",
            "\u00a0The course is incredibly poorly designed, understaffed, and does not work to support its students.  The skills required to complete problem sets were rarely covered in lecture, and few could be completed without extensive office hours assistance.  Office hours, however, drew in far more students than could be reasonably handled by the staff, who often also did not know how to solve problems students were encountering.  Hours at office hours usually equated to 5-10 minutes of actual interaction with a TA.  Some TAs were very competent and helpful, others had no ability to helpfully explain concepts and did not seem particularly well suited to the position.  The test and quiz were ultimately an examination of students' ability to google questions effectively, as they had minimal relation to the content covered in lecture or section.  The two-school system ultimately just made the class unapproachable and if the course continues office hours need serious restructuring in order to actually provide an effective service to students seeking help. ",
            "\u00a0Strengths: course format; instructors; content; problem sets\r\nWeaknesses: too intense at times; and just a little too deep on C before getting into other languages. A little too dependent on office hours, which became a little inefficient because so many people needed *so much* help (myself especially!) during the middle of the course (ie. tail end of C) ",
            "\u00a0David Malan was an effective lecturer, but unfortunately his lectures were not always sufficient to complete the actual coursework. The local professors and TAs are there to support students on coursework, but it was extremely difficult to get meaningful assistance at most of the office hours due to crowdedness. The fact that we get comments on our homework from the TAs is great but they were often too cryptic and not helpful in understanding what the actual right answer was. It would have been more helpful if the homework could have been marked directly for correctness (like red pen markings when marking a paper for grammar mistakes) to see what exactly was wrong and an example of how it could have been done instead. "
        ],
        [
            "\u00a0I would not recommend this course unless you already have experience in coding. For beginners, the workload can be overwhelming and because languages are taught so fast, you don't learn much. ",
            "\u00a0Yes, because it was an excellent intro to computer science. ",
            "\u00a0Yes if you want a challenge that will make you better. ",
            "\u00a0YES. The skills that are learned from computer science are indispensable and this is the preeminent course for non-majors and majors. The topics and applications of the material are so far-reaching that everyone can be engaged. This is a challenging but doable course if you can focus your energy and attend office hours weekly. ",
            "\u00a0Definitely. I would recommend that they start early and use all the available resources because it is a heavy courseload but overall I learned so much and had a lot of fun in the class. ",
            "\u00a0Definitely recommend! Regardless of whether or not you're a CS student, CS50 opens your eyes to the world of CS and technology. Peeps, this is the future, and even having an introductory, holistic understanding is extremely important in today's day and age. ",
            "\u00a0Yes but students should be warned about the course load beforehand ",
            "\u00a0Yes, I would, overall this course was one that I enjoyed and I feel like I am leaving the class with a real-world skill that I can apply to many aspects of my life. ",
            "\u00a0I would not. It requires too many hours a week just to understand and get by in the class. Unless you know computer science will be your major and you have previous knowledge and practice you should not take it. ",
            "\u00a0I would recommend this course to a student who has previous knowledge of CS and is willing to spend many, many hours on this class, since I don't think this should really count as an Intro-level class for those who have no previous experience with CS. ",
            "\u00a0No. If you want an intro to computer science take CPSC 112. This class was SO much work and I took it Credit/D. Overall it was so frustrating and I felt that the whole class focused more on the production (ie advertising) rather than student learning. For your sanity please don't take this class. ",
            "\u00a0Yes, if you are seriously interested in learning about computer science and programming! I had to spend at least 20 hours per week on this class, and it was worth it because I learned a lot. If you're not interested in that level of time commitment, this might not be the course for you. ",
            "\u00a0YES! definitely take it whether a first year or senior or anywhere in between. Just make sure you allocate enough time so that you can actually learn it. ",
            "\u00a0I would recommend it to another student in that it's a great way to learn code, but you have to know what you're signing up for. This class is challenging and you will probably struggle with it. ",
            "\u00a0Yes, well-organized course that keeps students engaged and got me passionate about computer science, a lot of opportunities for student/TA interactions ",
            "\u00a0It'd be hard for me to recommend it to other students without prior coding experience. But, even so, a Yale graduate with a CS degree had trouble answering some of the CS50 questions a friend of mine had. I'll leave it at that. ",
            "\u00a0Short answer: no. \r\n\r\nMany students join CS50 thinking that it will be flexible to their schedules because it's mostly online with weekly section. Understand that it in fact has incredibly lengthy psets that you will not receive much instruction or help on. I would only recommend this course if you are prepared to treat it as one of your heaviest priorities. ",
            "\u00a0I would recommend this course only to a student who was considering majoring I computer science. Otherwise, it is a lot of work for no relevant reason. I think this course was highly challenging and stressful as problem set deadlines approached. You will have to be prepared to commit several hours each week to complete the problem sets. This class will expose you to several coding languages and assign you to random problem sets each week. ",
            "\u00a0I think it depends on previous programming experiences and your goals in learning computer science. I would not recommend this course as an introduction to computer science for students hoping to take further classes or for those without previous experience. Although the course is marketed very well and is exciting, fun, and rewarding at times, it does not facilitate student learning well especially for those who have never coded before. CPSC 112 is much better for this. I would recommend this class as a standalone computer science education to understand the overall concept and gain solid abilities in useful programs (and across multiple programs). ",
            "\u00a0I would definitely recommend this course to a student interested in CS - but I would caution them of the workload and suggest that they have just a bit of programming background (although not necessary, you would fair better since it is quite fast-paced). ",
            "\u00a0Yes, but beware of the workload. ",
            "\u00a0This class is weird. The material is pretty well explained and the PSETs do a decent job of giving you practice with a large amount of material without being overwhelming. In terms of learning the stuff, it's pretty good. It also comes with photo shoot-office hours, themed Spotify playlists, and a cs50-specific hackathon. I never felt comfortable going into office hours because a. chances are there were going to be a million people there and b. I have no interest in having my picture taken when I just need help with an assignment. The glitz gets in the way of actually teaching the material, and ends up making the class feel super cult-y, where they constantly try to make you feel like you're in some great community instead of just learning. You also get extremely minimal feedback on your assignments if you don't go to office hours to ask specific questions. ",
            "\u00a0Do it, do it, do it! CS50 is a steep learning curve every week but it's enjoyable at every moment and looking back at the end of semester you will be amazed at how far you've come. ",
            "\u00a0YES ",
            "\u00a0I would definitely recommend this course to another student, especially if you are a sophomore (it's not too late!). I really enjoyed my time in the course, and I feel like I've learned a lot.  As long as you understand that you need to spend time with the problem sets, then it really won't be TOO bad. ",
            "\u00a0I would not recommend this class unless you know you are very interested in computer programming. The class is scattered and they try to address too many topics and levels of experience. I think that they need to focus on fewer things. It is way too much work for what you gain. ",
            "\u00a0I would, but only if they knew fully what they were getting themselves in for. Personally, I feel like I should have taken 112 because I wasn't aware. ",
            "\u00a0I would recommend this course to someone who thinks they want to major in computer science but isn't quite sure - it realistically conveys the time-consuming tedium of coding but also you get to implement some cool stuff that is quite rewarding when you get it to work. ",
            "\u00a0I absolutely would reccomend this course to any other student interested in gaining an introduction into computer science. Overall, I feel as though I learned alot and am glad I took the course and will be considering CS as a major now. ",
            "\u00a0Absolutely! If you have the time for this course, which can easily take up 15+ hours some weeks, you will have a great time and learn a lot. Taking it with friends is especially fun because you can bond over the struggles and work on a final project together if you want. (I chose to do mine alone, and that was fun too!). If you're worried, start off taking it Credit/D/Fail. I did that but ended up switching it to a letter grade because it wasn't nearly as awful as I feared. ",
            "\u00a0If you are truly interested in com-sci as a legit possible major, yes. ",
            "\u00a0I would recommend this course to students who have some programming experience and who want to learn more about the different ways that CS can be used to solve problems. The course is advertised as very beginner-friendly, but if you have no programming experience I would recommend CS 112 in the spring instead, unless you're willing to put *a lot* of time into CS50. The psets take a while (10-15 hours for some) but they're definitely very rewarding and a great learning experience. ",
            "\u00a0Would absolutely recommend -- CS50 should honestly be a required class at Yale given the importance of programming to more and more diverse fields. Well-taught and fun, honestly a great experience. ",
            "\u00a0Yes. It teaches important problem solving strategies that will be important in any field. ",
            "\u00a0Take this class if you want to gain a basic understanding of computer science in an applicable, hands on way. I'd suggest taking it Credit D if you're worried about the grade, or don't take it when you're also taking a lot of other hard classesI learned this the hard way. After this class, you'll come out a better self-learner, and from what I hear from friends majoring in computer science, the problem sets we do are way more relevant and creative. For instance, we programmed a spell-checking dictionary, made a stock-trading website, etc. ",
            "\u00a0This course is a great intro course for anyone looking to understand programming and doesn't care for theory that much. Although rewarding, it is a huge workload and should not be taken as a fifth class. ",
            "\u00a0I would absolutely recommend this course. I loved it and it gives a great basic overview of coding and basic computing knowledge. ",
            "\u00a0Yes, if you're looking for a broad overview of CS and free tech stuff without too much effort. It ends up being less work than other classes because you don't have to attend lectures (skim the lecture notes!) and nearly all the psets can be completed by going to office hours once or twice. You can also meet a lot of people at office hours, which is fun.\r\n\r\nBut if actually interested in CS and serious about it, take 201 or skip straight to 223 or something. ",
            "\u00a0If they had prior CS Knowledge maybe, but probably not. ",
            "\u00a0I would 100% recommend this course to majors and nonmajors. It is a fantastic introduction into computer science and the class itself is fun and engaging with many activities including recruiter lunches, hackathon (at harvard), puzzle day, etc set up throughout the semester. ",
            "\u00a0Yes. An essential course for Computer Science. ",
            "\u00a0I would only recommend this class if the student is capable of figuring stuff out for themselves since the staff is really hands off. ",
            "\u00a0Yes, it was a class I think students who have the *slightest* interest in coding should take. ",
            "\u00a0I would not recommend this course to students at all. It was incredibly disorganized and caused so much stress. I did not find any of the teachings to be accessible, and I had to teach myself most of the material. I did end up learning about computer science, but I did not enjoy my experience with it at all. ",
            "\u00a0Yes if you have much time. ",
            "\u00a0I would recommend this course to students who want a deep understanding of computer science and are willing to commit a lot of time to learning. ",
            "\u00a0Definitely yes. However, don't take other really time-consuming classes with this one. Psets range from 2 to 15 hours, but generally they take around 6. The online lectures are really nice. I had a Harvard friend brag about how the classes are at Harvard, but I thought Yale has it better off because we take much less time watching the videos than Harvard students going to lecture for the same learning experience. ",
            "\u00a0Yes, CS50 definitely taught me everything that the syllabus claimed it did. Completely brought me up to speed on the most important topics in computer science. The problem sets are quite long but doable. The \"Test\" and \"Quiz\" are pretty arbitrary and have nothing to do with the problem set though, so they can be frustrating to take. Otherwise, very good class to take if you want to really learn some CS. ",
            "\u00a0Yes ",
            "\u00a0I would definitely recommend this course to another student. You learn valuable skills that I think everyone-- not just computer science majors-- should know, like how to design a website and work with data. The course is very accessible to students with no prior coding experience, and though it's a lot of work, I personally found the problem sets fun so it didn't feel tedious spending 10-12 hours a week on a problem set. There are so many opportunities to meet with people in the industry, experience a hackathon, etc., too. Overall my favorite course of this semester! ",
            "\u00a0Take it if you have time, really have to, or know you're going to be engaged by the material (you can test if you will like the material by searching for the course on the open courseware site edx.org and doing the first PSets, which don't change too much from year to year :) ). It does take up a lot of time, as others have said, and is a \"you get out of it what you put into it\" situation. How it works is that problem sets are released on like Friday or so, and due the Monday 10 days later. In between, there are office hours on Wednesday evening, Thursday evening, and Sunday afternoon. My method was to complete a buggy \"rough draft\" of the problem set over the first weekend so that I could come to Wednesday office hours with questions. This method allowed me to finish the problem set on Wednesday or Thursday, rather than working over the last-minute weekend. This method was definitely helpful in making sure I completed all the problem sets well ahead of time and got good grades, although it was time- and labor-intensive. ",
            "\u00a0I would recommend this course to another student because it helps you to think logically about problems. Additionally, it gives you a solid foundation in computer science, which is necessary in a world that is as technologically reliant as ours. ",
            "\u00a0This is a great course for anyone interested in computer science who has no prior experience. I feel like I learned a lot and that I can apply what I learned in other classes/areas. ",
            "\u00a0Only if you have enough time to allocate to each pset every week. Not recommended for athletes (speaking from personal experience) ",
            "\u00a0Completely - this is the best class I have ever taken. From this class you'll learn fundamentals about computer science and programming as well as the syntax, tools, and approach to solve challenging problems and to further your learning by yourself beyond CS50. I can't imagine a better intro CS course. ",
            "\u00a0Yes I would recommend this class to another student, but I would caution them to take into account the amount of time / commitment necessary to do well. ",
            "\u00a0You need to know if youre considering taking CS50 that it will occupy such an unbelievably large amount of your time. And a lot of that time wont feel like youre grinding through and slowly making progress, it will feel like youre staring at a computer screen for hours on end with absolutely no idea what to do. Lectures are ~2 hours a week, but every now and then theyll randomly throw in an extra one that youre expected to somehow know about and watch, and section is supposedly 2 hours but always goes longer. Dont think that by signing up for a less comfortable section or telling them that you dont have previous experience youll actually get the beginner experience, because this is Yale so obviously there are going to be people lying that they have no experience when they really have much more experience than you. And problem sets are just so awful. For some of them, just reading the specifications for what youre expected to do will take several hours to read and understand before you can even start (they essentially try to pack another lecture into that page). During office hours, sometimes the TAs will save you and everything will become clear but other times youll just be sitting there in a crowded and stressful room for hours waiting for help and then when you ask them youre question theyll just tell you to Google it. The heads of CS50 give you so many resources that you can use to help but none of them are individually very helpful. Ironically, there are bugs all the time in the distribution code and various forms they send out. If you want to learn how to code, youll definitely learn at least the fundamentals about writing code in C, Python, HTML, and JavaScript, but not nearly as much as the course theoretically aims to teach you because they hurl so many hours worth of information at you every week that youre never going to retain. \r\n\r\nSomething I would tell a friend to consider if they were considering taking this class is that it will start to dictate their whole schedule as theyre trying to make it to office hours early on in the week that wont be helpful unless theyve already read and understood the entire specifications for the pset, which can take hours. I would also remind them that the reviews on Coursetable (if this even makes it up to course table) are written by those who have successfully passed CS50, not those who dropped mid-semester  history is written by the winners! ",
            "\u00a0A great introductory course. If you're not sure about how you'll do, I suggest that you take this course Credit/D/Fail at least at first. There are a lot of supplemental activities that are fun and useful (Friday lunches!). ",
            "\u00a0Yes. Everyone should have some background in computer science, and this course provides a solid one. ",
            "\u00a0I would recommend this course ONLY if you plan to major in CS. ",
            "\u00a0Yes, I would recommend this course to another student because it is a good introduction to computer science and its applications. ",
            "\u00a0I would recommend this course to a student who wants to get a feel for coding and how a computer works. There is not a great amount of technical detail but the problem sets are challenging nonetheless. Be prepared to spend, at first, 1-3 hours on problem sets. But by the second half of the semester, you'll be spending 8-18 hours. I know, I didn't believe that when I signed up, but if you're a beginner with coding, that seems to be the reality, even with help from office hours. ",
            "\u00a0I would recommend introducing yourself to computer science in some other way prior to taking this course, whether that be via another intro course or independent study.  Otherwise keep it Credit/D and just do your best to learn what you can, though I do not think you will get as much out of it given that you may not truly understand what you are doing and why certain untaught steps are necessary. ",
            "\u00a0Although it is a decent workload, overall I believe this course is great to take and teaches many skills. ",
            "\u00a0Yes. A great introduction to the world of CS. I don't know what the other intro class is like, but cs50 is great, challenging, and a lot of fun. ",
            "\u00a0Yes! Everyone should learn some computer science because it is extremely relevant in today's society and is a useful tool. ",
            "\u00a0I would because I learned a lot by the end but was also very stressful ",
            "\u00a0I would only recommend the class to a student who really enjoys computer science and is extremely organized. Otherwise, a student may easily be left behind if he or she doesn't watch the lectures or go to office hours. Be warned that you will get very frustrated at certain points! ",
            "\u00a0Everyone will tell you how difficult this class is. You will not listen to them and take them anyways because it looks like a really cool class with the fair and the \"I took CS50\" tshirts and everything. If you're adamant about taking it, at least do yourself a favor and take it credit d fail. Office hours are helpful albeit really crowded. If you're really going to put a lot of time into it, it's not impossible to be successful. But it will end up taking too much time in comparison to your other classes. ",
            "\u00a0This is not a course for everyone. If you are taking 5/6 class, you might not want to take this class. But if you want to have a basic understanding of programming, this course is the gem. ",
            "\u00a0This a very difficult course. Only take if you're doing credit/d and really wanna challenge youself in CS starting out. Otherwise, I wouldn't recommend it to beginners if you're concerned about your GPA or wanna save a credit/d. ",
            "\u00a0Yes. Even though I audited, it's been fun to watch the lectures and play along when I can! ",
            "\u00a0Developed as many skills as possible within a single semester. ",
            "\u00a0Absolutely not. ",
            "\u00a0Absolutely!! ",
            "\u00a0This course is not for everyone. Only those with a genuine interest in Computer Science and are willing to dedicate a significant portion of their time to the course load will gain anything out of it. "
        ]
    ]
}