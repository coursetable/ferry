{
    "crn_code": "20620",
    "Evaluation_Questions": [
        "Your level of engagement with the course was:",
        "What is your overall assessment of this course?",
        "The course was well organized to facilitate student learning.",
        "I received clear feedback that improved my learning.",
        "Relative to other courses you have taken at Yale, the level of <u>intellectual challenge</u> of this course was:",
        "Relative to other courses you have taken at Yale, the <u>workload</u> of this course was:"
    ],
    "Evaluation_Data": [
        [
            1,
            13,
            17,
            34,
            22
        ],
        [
            6,
            12,
            31,
            29,
            9
        ],
        [
            9,
            13,
            23,
            29,
            13
        ],
        [
            30,
            23,
            15,
            16,
            4
        ],
        [
            0,
            3,
            17,
            47,
            21
        ],
        [
            0,
            3,
            37,
            38,
            9
        ]
    ],
    "Comments_Questions": [
        "What knowledge, skills, and insights did you develop by taking this course?",
        "What are the strengths and weaknesses of this course and how could it be improved?",
        "Would you recommend this course to another student? Please explain."
    ],
    "Comments_List": [
        [
            "\u00a0Developing problem solving skills in topics related to computer science field. ",
            "\u00a0I learned something about algorithms ",
            "\u00a0I learned nothing from taking this course. ",
            "\u00a0I learned more about designing algorithms including dynamic programming and divide and conquer techniques. ",
            "\u00a0Classes of problems in computer science, novel strategies for solving them, etc etc. ",
            "\u00a0Very interesting course, we learn about important algorithms and learn how to prove their correctness, etc. ",
            "\u00a0The ability to analyze and create algorithms for solving a myriad of situations. Rather than working on endless proofs and seemingly meaningless notation like in CPSC202, you are able to apply your knowledge on creating algorithms, models, and graphs that can effectively solve the problem presented to you. ",
            "\u00a0Class is largely (but not solely) proof based, we learn how to design algorithms, prove their correctness, and their runtime. ",
            "\u00a0Able to analyze algorithms, understand the basics of complexity theory. ",
            "\u00a0How to analyze and reason about algorithms; a better grasp of writing mathematical proofs; an overview of computational complexity and the known limits of computation; a knack for identifying real-world situations where efficient algorithms might make life easier; an understanding of some basic problems and how to apply standard algorithms to solve them. ",
            "\u00a0Various algorithms for a variety of problems. Computational complexity classes and their relationship to one another (P, NP, co-NP, PSPACE, etc.). ",
            "\u00a0None. ",
            "\u00a0Knowledge of CS Algorithms. ",
            "\u00a0A deeper knowledge of important algorithms for solving problems. Improved skills in evaluating runtimes and with modeling problems with graphs. ",
            "\u00a0I learned the basics of algorithms in theoretical computer science including: greedy algorithms, dynamic programming, divide and conquer, max flow/min cut, and P v. NP. Broadly increased my confidence in writing proofs and using Latex. ",
            "\u00a0I guess how to write an algoirthm ",
            "\u00a0I learned how to utilize several standard techniques for formulating and analyzing algorithms, as well as several standard algorithms, their implementations and their proofs, such as the Gayle-Shapley and Ford-Fulkerson algorithms. ",
            "\u00a0I did get a really good understanding of run-times for algorithms, and figuring out run-times for different algorithms. I also got a better idea of how to apply algorithms to different problems ",
            "\u00a0--insight into algorithms, writing formal proofs ",
            "\u00a0Learning to not care about assignment grades, because we never got them. James Glenn is the best CS lecturer, very approachable, will learn your name, sometimes his in class notes are hard to follow. Sometimes he teaches material not in the textbook, which is bad. ",
            "\u00a0I learned a lot about algorithms and analyzing running time of algorithms. Solid learning experience. ",
            "\u00a0This course has taught me many of the important algorithms known in computer science so far, how to compute time and space complexities and how to prove P/NP/NP-complete... etc. In short, it gave me an extensive overview of all the interesting algorithms and challenging concepts in Computer Science. Which I think will solidify my reasoning skills about what design/architecture/databases to use for my programs in the future. \r\nIn the more technical terms, I learned to write formal proofs and feel comfortable dealing with graphs, recursion, and recurring formulas. ",
            "\u00a0An understanding of a broad set of algorithms useful for many real world problems. ",
            "\u00a0This class was great at teaching you how to generally approach computer science problems in general. ",
            "\u00a0Learned how to think about algorithms without worrying about the language ",
            "\u00a0I learned how to formally think about and write algorithms to solve problems. ",
            "\u00a0Different ways of designing algorithms for problems in computer science and other fields. ",
            "\u00a0I learned algorithms used to attack common problems in computer science. I was also introduced to the concept of NP-complete problems and how solving one would solve all NP-complete problems. ",
            "\u00a0I learned about different kinds of algorithms and their applications, both how to write or come up with them and how to prove they are correct and run fast (or slow). ",
            "\u00a0I learned about different types of algorithms and how to write proofs for them. ",
            "\u00a0I learned about various algorithms as well as how to construct and write related proofs. ",
            "\u00a0I learned a variety of algorithms, including greedy algorithms, minimum spanning trees, divide-and-conquer, dynamic programming, and much more! ",
            "\u00a0Better understanding of problems and algorithms out there and how to approach problems in intelligent ways. Developed many tools to solve and analyze problems. ",
            "\u00a0Greedy algorithms, Divide and Conquer, Dynamic Programming... NP/P etc. Pretty standard algos stuff. ",
            "\u00a0Everything. Algorithms was great and improved critical thinking ",
            "\u00a0I learned a ton about lots of algorithms topics. I learned how to look for loopholes in writing proofs. ",
            "\u00a0How to think about solving more conceptual data problems in computer science and go about solving them in a way that is correct and efficient. ",
            "\u00a0I learned a lot of different algorithms, how to write proofs, runtimes, and interesting problems. ",
            "\u00a0Learned some main types of algorithms, how to think about and analyze them. "
        ],
        [
            "\u00a0Weaknesses: Professor Glenn takes forever to grade and evaluate problem sets, meaning students will often have to consider their own standing on at most one or two problem sets and a midterm grade. Although the classes themselves are relatively informative, it's difficult to see how much you understand the material since feedback is almost nonexistent. ",
            "\u00a0Strengths: good introduction to problem solving and algorithm-development\r\n\r\nWeaknesses: feedback for psets and exams was basically nonexistent ",
            "\u00a0He did not grade our assignments. ",
            "\u00a0This course, a requirement for CS majors, has no real-world applications. It will not aid students who want to go into this field beyond college, as it is too rooted in theory. The one component of this class that could be useful--runtime analysis of algorithms--is not handled in such a way that a software engineer could draw upon this class's teachings to better his/her programming abilities. ",
            "\u00a0The strengths were the teaching staff, especially Glenn and Marko Mitrovic. The weaknesses would be the scope of the class, I believe it may have been better if this was two classes. ",
            "\u00a0Strengths: completing a requirement for the CS major, high-level material explained in an accessible way\r\nWeaknesses: grading. We haven't gotten a pset back since mid-February (and I'm writing this in late April). ",
            "\u00a0I wish we spent more time on certain topics and did more practice problems in class. ",
            "\u00a0Grading is incredibly slow. It is completely unacceptable for a Yale course to not grade psets from February as of the last week of classes. \r\n\r\nClass material is pretty standard, lectures are fine, if a bit dry. ",
            "\u00a0Weakness: you will receive VERY little feedback on your homework. As in, it will probably not get graded until, like, 2 months after you turn it in. So you'll have no idea how you're doing in the course. ",
            "\u00a0Follows the book closely which greatly helps with understanding the material. ",
            "\u00a0The P-Sets were not returned in a timely manner at all. I still do not have any P-Sets except my first two. Otherwise, the class notes were quite helpful. ",
            "\u00a0Get feedback more regularly, faster grading. ",
            "\u00a0Strengths: covers a broad array of interesting problems and presents algorithms to solve them (which can be used in the real world!); emphasizes a true understanding of the concepts and mechanisms behind computational thinking rather than rote memorization of algorithmic \"scripts\"; approachable even for non CS majors curious about the field\r\n\r\nWeaknesses: poor delegation of administration personnel that led to next-to-no feedback for students on assignments (finals are nearly over and we haven't received a grade back in 2.5 months--most students have no idea how they're doing in the course); heavily theoretical and does not necessarily afford students the opportunity to actually implement the algorithms they learn in a programming language (this would be a fantastic addition to the course) ",
            "\u00a0Interesting material and clear lectures, but, as many people have complained about, grading is way too slow. It took 2 and a half months to get the most recently graded problem set graded, and we still only have half of the problem sets graded almost two weeks after the course has ended at the time I am writing this evaluation. ",
            "\u00a0We definitely need more TAs this year. There was not enough people to grade the assignments. By the end of the semester, we had only gotten 2 assignments back out of the 6. ",
            "\u00a0Grading response times for this course were, unfortunately, absolutely atrocious and likely not the fault of Professor Glenn. At this point in the semester (after finals period) we have still not received the grades for our 3 last problem sets. \r\nOffice hours were also poor. I know that many students received almost complete answers from the ULA/TA rendering personal effort put in redundant, especially since most of the course was problem set based. This seems grossly unfair and unhelpful for student learning. ",
            "\u00a0Strength: Content is interesting and challenging. The CS community is very collaborative.\r\n\r\nWeakness: Lectures moved fast and there seemed to be a divide between students who understood what was going on or were confused. ",
            "\u00a0Good amount of material covered and psets and tests were very fair in difficulty. ",
            "\u00a0Major weakness: no feedback! we had no access to grades for most of the semester thus no chance to see what we were doing wrong or right/ drop. Very big weakness... ",
            "\u00a0I'm extremely dissapointed that I didn't recieve feedback on over half of the problem sets. This is unprofessional and makes the computer science major seem like a joke. ",
            "\u00a0It took way too long to get grades back. By the time we took the second exam we still had not received ffedback from problem sets that were due 2 months prior. ",
            "\u00a0I definitely had no idea how I was doing in the class at all, there was a distinct lack of feedback throughout. Glenn was a great lecturer, but sometimes he went a bit too fast. ",
            "\u00a0strengths--great material covered, TAs were helpful \r\nweaknesses--only 2/6 problem sets were graded while classes were still in session so it was very difficult to get feedback on our learning ",
            "\u00a0The course was well taught and I don't think the material needs to be improved upon too much. There was definitely an issue this semester with not receiving grades in a timely manner. Maybe the course just needed more graders? ",
            "\u00a0never found out assignment grades until after final. ",
            "\u00a0Lectures were solid explanations, but the feedback was bad. In a course that is very dependent not just on understanding the material but also understanding how to prove an algorithm is correct, not getting any assignments back made it very frustrating. In many ways it was a detriment to learning as well as a source of stress for many in the class. ",
            "\u00a0Strengths: none\r\nWeaknesses: everything about it!\r\n\r\nIt took forever to get feedback on problem sets. The majority of them were graded after the end of classes. In other words, you had no opportunity to get feedback so you could avoid the same mistakes over and over again. ",
            "\u00a0I think the final material was a little overwhelming bearing in mind the homework for all the other classes during the last week of classes, I might have wanted the final to be during finals period instead to have more time to study, rather than during the last week of classes. I also think that the class tests were slightly longer than they should be given the limited amount of time that we had (more applicable to the first midterm). I do not think we can be expected to solve/prove the test questions in 15 minutes (on average) given that it takes so much more time to actually do it efficiently. One more thing was having to wait a lot (until the end of term almost) for the homework grades, I obviously would have loved to know how I'm doing in the class before I left school. Other than that, the lectures were incredibly interesting, I really enjoyed the material being taught; it was taught very clearly specially with the colorful and thoroughly-commented notes. The problem sets were at a reasonable level of difficulty for the most part and in general the course was very well structured and thought-through. ",
            "\u00a0Glenn is a very clear lecturer. Assignments/tests were very manageable and fair. Material is interesting. Things that could be improved include getting grades back faster for homework (I understand this was mostly a problem with ULAs) and clearer lecture notes (they often confused me more than they helped). ",
            "\u00a0Professor Glen goes into great detail for proofs of algorithms and he puts up his lecture notes which can be helpful. However, the proofs can sometimes be hard to follow when he keeps switching screens on his digital note taking app. \r\nAnd finally, we were not handed back half of our psets until after our final and so without any feedback, it was hard to figure out how to better improve our answers, especially for proofs. ",
            "\u00a0A lot of the grading was very slow, so it was hard to get feedback. ",
            "\u00a0Lecture was very very hard to pay attention to, but subject is very interesting ",
            "\u00a0Professor Glenn is a great professor, but in class, students often seem confused. I think this is because sometimes we cover so many algorithms in one class very quickly, and if we stay on one algorithm for the entire class, we dig very deep into it such that we might be taking in more information than we necessarily \"need\". Office hours were absolutely superb and Glenn also got better about making sure we understood things (and we spoke up more) towards the end of the semester, so this turned out well for all of us, actually. ",
            "\u00a0The problem sets need to be graded faster so that we can get feedback and improve during the semester. ",
            "\u00a0The strength of the course is that the textbook the course uses is pretty clear about the material that is taught in the class. One could catch up with what is going on in the class easily with the textbook. The weakness of the course might be Professor Glenn's teaching style (using a Microsoft Surface to write notes as he goes) and very little feedback on homework (we hardly got anything back until the course ended). ",
            "\u00a0I think the lectures and problem sets were strong. I do wish we had gotten grades/feedback more quickly. But the lectures were very engaging and not too fast, and the problem sets were appropriately challenging. ",
            "\u00a0It is a very dry course, which is to be expected, but it was sometimes overly dry and uninteresting.  Also most of the time Glenn went too slowly which made it not very helpful to attend class.\r\n\r\nThe main drawback of this course though, was that we were not given most of our grades until after the semester was completed.  This made it needlessly hard to figure out how we were doing in the class and what we needed to do differently in order to perform well. ",
            "\u00a0The strength of this course was that we were able to cover a bunch of different topics while still going in depth on each one. The TA/ULAs were also great; they were extremely helpful during office hours. The biggest weakness of the course was how long it took to get feedback on the problem sets; there were problem sets that were due in February that we didn't get back until after the final, which made it hard to get a sense of how you were doing / how you could improve. ",
            "\u00a0This is a wonderful course! A great and thorough overview of many different topics in algorithms. The problem sets and tests are fair. The professor and teaching assistants are great resources for help. The textbook assigned was also super comprehensive and quite easy to read to further understand the topics! ",
            "\u00a0Consistent, clear expectations. A bit disorganized, and poor communication/timeliness regarding some logistical matters. Fun lectures. ",
            "\u00a0I really liked the textbook for this course - I found it interesting and actually kind of fun to read (and I don't even like math that much). Because of this, I was motivated to learn the material in-depth outside of class. It was during this time that I think I learned the most from this class. The lectures were pretty fun and engaging, but I think that there could have been an introduction at the beginning of each class that gave a brief overview of what we're going to go over for the day and why. ",
            "\u00a0The amount of time to receive feedback in this class was unacceptable.  We did not receive a single homework grade between February and the final.  Consequently, it was impossible to know if one grasped the concepts.  I would strongly advise increased staffing in the course. ",
            "\u00a0Wish we could have done a couple of real programming assignments! The material is very interesting though. ",
            "\u00a0Good teacher needs better prep ",
            "\u00a0It would be nice to regularly receive feedback and grades throughout the course of the semester. Most grades and feedback were not received until the very end. ",
            "\u00a0I think the class was very hard. Psets were very carefully graded and the exams were not too long so you either knew it or didnt. I learned a ton though and think Glenn and the TAs were incredible. ",
            "\u00a0Prof. Glenn is a good lecturer and makes himself reasonably available. The course material by its nature has limited variety of problems so it is hard to practice the topics. We did not get feedback on work back at a reasonable pace (no problem set grades after February), which was confusing because it sounded like graders were being paid to do this but very important for a class where proofs can be correct to varying degrees and where it is possible to improve on the basis of feedback on work. I did not understand why this course is required for EECS and CS, particularly for those who do not enjoy proofs or CS research, or where I should expect to utilize the ideas covered in class  Prof. Glenn did give us some examples of use in practice, but the topics in class are not the sort that are easy to resolve without someone else having done it prior. (Of course that is also the nature of the material, and I don't think the curriculum should change for educational purposes, but this is one issue I had with having to taking the class.) The ability to collaborate is vital to learning in this class while being able to dedicate time to fulfilling responsibilities elsewhere, and banning collaboration should be left for those who want to challenge themselves as in 366. ",
            "\u00a0Strengths: Glenn is a great professor- really cares about his students, has organized plans for each lesson, and tries to make the material as engaging as possible. Also really appreciate him using machinist and welder to teach Gayle Shapely instead of man and woman. I feel like I learned a lot in this class and I was challenged, but could also see the progress I was making. Problem set questions were interesting and fun to solve. Tests were reasonable given the material covered on the problem sets. \r\n\r\nWeaknesses: Notes were really hard to follow- so if you missed class it was hard to understand the OneNote pdfs he posted online. Difficult to read the handwriting but also hard to understand what was covered. Sometimes the classes felt really long- 75 minutes is a long time. Spent a long time going through each step of invariants for algorithms that I felt wasn't that necessary. ",
            "\u00a0Weaknesses:\r\n1) Excruciatingly slow in returning problem sets (anything after problem set 2 we did NOT receive before the final), making it near impossible to get feedback on how to actually improve in writing proofs. Which totally defeats the point of a course like this!\r\n2) In contrast to the clarity of the TA Marko, Prof Glenn's proofs and explanations and lecture notes are very hand-wavy.\r\n3) Very patchy coverage of material in the lectures. P/NP reductions and the master theorem were not well explained. The control flow graph, which I understand is Prof Glenn's interests, wasn't very well explained at all and didn't really tie into the rest of the course. ",
            "\u00a0The grading for this class was beyond terrible. First of all, it was incredibly slow: There were six psets for the class; we got back grades and feedback on number 4 after we had taken the final exam. Second of all, the professor and the grading rubrics were extremely nitpicky. You could write a really long and detailed proof that clearly displayed full understanding of the concepts, but if it weren't written exactly the way the professor would explain it, you would get docked points. This was especially frustrating on exams, which could be very time-crunched and therefore weren't conducive to being able to guess how exactly the professor might want the answers worded. ",
            "\u00a0faster feedback cycle on homework assignments "
        ],
        [
            "\u00a0Only if you need to take this course. ",
            "\u00a0Only if you have to take algorithms. ",
            "\u00a0Don't take it unless you have to. ",
            "\u00a0No, unless this course is a requirement for the student's major, no student should take this class. If a student is interested in programming as a career, the student should self-teach himself/herself about the big-O runtimes of algorithms. ",
            "\u00a0I would recommend this course for anyone that wants to learn more about algorithms and the different techniques to solve them as well as the relationship between types of algorithms. Glenn was a great professor and I wouldn't recommend taking it with any other professor. He has a great sense of humor and explains clearly and with energy. Definitely one of the top professors at the CS department. ",
            "\u00a0You're probably looking at 365 because you need to take it for the CS major, and if that's you, take it (not that you have another option). If you don't have to take it, it could be interesting if you're interested in problem-solving strategies for many different problems -- psets for 365 often feel like collections of brainteasers, and that's pretty fun. ",
            "\u00a0This class helped me feel more comfortable examining and writing algorithms. ",
            "\u00a0Obviously a requirement for CS majors, probably not a good call to take it for non-STEM majors, but definitely might be appropriate for math/statistics/etc.. majors looking to learn about algorithms. ",
            "\u00a0It's part of the CS core so you probably have to take it. I thought the algorithms are interesting and Glenn makes class enjoyable. You also don't necessarily have to attend class since the notes are so comprehensive. ",
            "\u00a0This is a challenging course, even though Glenn is an excellent lecturer. The grading is fair 75% psets 25% exams which is fair. I think office hours are kind of necessary if youre not great at proofs/algorithms. If you werent comfortable with 202 then you should stick with algorithms instead of intensive algorithms. ",
            "\u00a0/ ",
            "\u00a0Yeah, Algorithms is a good course for anyone (CS or not) looking to get an introduction to algorithmic thinking. I'd definitely recommend a high level of comfort with proofs before enrolling, but other than that, this course is fairly approachable even to students in non-computing intensive majors. You'll gain an overview of wide classes of problems (some of which will apply to your life) and how to solve them using known algorithms. You'll develop a sense for why these \"recipes\" work the way they do, and hopefully develop an insight as to how one might go about creating an algorithm to solve a new problem. The workload is manageable, the tests are fair, and there is extensive student help available since 365 is a core requirement for CS majors. The concepts can be tricky to navigate at times, but I think Professor Glenn does a good job of breaking things down to their simplest components, which really facilitates understanding if you pay attention in class. Overall, while there were some admin gripes and conceptual difficulties this semester, I enjoyed 365 and am confident another student curious about problem solving would as well. ",
            "\u00a0I would recommend this course for a student who likes coming up with ways to solve real-world problems. The theory surrounding the million dollar question of P = NP is also very interesting and recommended. ",
            "\u00a0Are you not a CS major? Don't take it. ",
            "\u00a0Yes. If you are a CS major, you have to take it anyways. But if you are not comfortable with proofs, I would elect to take 365 over 366. ",
            "\u00a0Definitely take this course if you are interested in computer science. It lays the foundation for algorithmic theory in computer science - different types, constructions, proofs, and runtimes. Essential to go further into computer science. ",
            "\u00a0Only if they guarantee that the grades will be out in less than 2 weeks for each problem set ",
            "\u00a0Not unless they get assignments back in time. I only received feedback on three problem sets. ",
            "\u00a0This course is required for the CS major. I personally don't like theoretical computer science so I only took it because I had to, but it is useful to learn how to solve and apply algorithms to different problems. ",
            "\u00a0Not unless you need it for a major requirement. ",
            "\u00a0YES! If you're a cs major, you have to, but even if you're not the class if full of fun brain teasers. ",
            "\u00a0Well, if you're a CS student you have to take this course. From what I hear it has vastly improved from previous years, mostly because of the creation of a separate class for Intensive Algorithms. I didn't even consider taking the intensive course for a moment. My experience wasn't bad because I found Professor Glenn to be a thorough and clear lecturer, so going to class helped immensely with the problem sets, though I still sometimes had trouble applying the concepts to the homework. ",
            "\u00a0it's a requirement. ",
            "\u00a0It was a good lecture sequence, but Professor Glenn hates grading and refuses to ever do it in a timely manner. Makes the whole course frustrating since you have no idea how you're doing or whether what you're writing is correctly presented. ",
            "\u00a0No, I would not recommend this course. But if you're a CS major, you have to take it anyways. Sorry. ",
            "\u00a0Yes, I highly recommend taking this course. It is not heavily work-loaded, and is very rewarding to look back and see how much interesting and challenging algorithms and concepts you know by the end of the semester. And if you are a CS major you have to take this course anyway. ",
            "\u00a0Yes, even to people who are not only compsci majors. The course doesn't require you to worry too much about implementation. Glenn is a really helpful guy who puts a lot of effort into lectures. The PSETs aren't too difficult. ",
            "\u00a0This class is a must if you want to pursue the CS major. ",
            "\u00a0Yes, very important if you want to actually learn cs ",
            "\u00a0This is the only course where I had a once-a-week, guaranteed all-nighter busting out a problem set. That is, however, totally my fault. I only started going to office hours halfway through the semester, and boy did I never have an all-nighter again! As nice and funny as Professor Glenn is, the material is often hard to grasp from lecture. I found it best to take minimal notes in class, then review the notes that Professor Glenn posts online (as he posts everything), and also read the chapter in the textbook- which is quite accessible and just informal enough to be an enjoyable yet informative read. But please, for the love of everything PLEASE go to office hours and this course will be a lot of fun, as it becomes a bonding activity and the TAs are superb. ",
            "\u00a0If they are able to grade homework assignments faster than yes, otherwise, no. However, it is required for a Computer Science degree, so most will have to struggle with it unless the grading is more efficient. ",
            "\u00a0Not really - if you are interested in algorithms, I would just read the textbook instead. If you have to take the class for a major... well what can ya do ",
            "\u00a0I would absolutely recommend 365 with Glenn. He is an amazing lecturer who is great at engaging with the class. You will have to take your own notes because he doesn't do a traditional powerpoint thing that can be posted (but he will post some notes). The problem sets are an appropriate level of challenge compared to the material. The book is very useful! I should have used it more. The exams were hard but they aren't worth much, and I think the second was adjusted after the first was so hard. Overall, I learned a lot in this class and while the thinking is hard, it really just takes practice. Glenn is very kind and helpful. ",
            "\u00a0Nope, unless they had to take it and didn't want to deal with the workload of 366. ",
            "\u00a0I would recommend this course to another student; I learned a lot about algorithms and it deepened my understanding of computer science. ",
            "\u00a0Absolutely! It is required for the CS major, but I know some non-CS majors who took it because it teaches you to think critically and analytically, which are useful skills for any academic path at Yale! ",
            "\u00a0Need it for the major. If you're outside the major and just really interested in algorithms, it's probably worth it to challenge yourself with 366. ",
            "\u00a0I really enjoyed this class and think Glenn is an excellent professor. The class is challenging for someone who has never done proof based math before. For me, most of the challenge came from developing the proofs rather than solving the algorithms themselves. ",
            "\u00a0You know you have to take it if you're CS/EECS. You get out what you put in though, so work hard and you'll feel like you've learned a lot! ",
            "\u00a0Yes to a cs major ",
            "\u00a0I would but be warned it can be deceptively hard. ",
            "\u00a0Sure! Most people taking this class are doing it for the requirement, but it's still an interesting class that's a good balance of challenge and manageable. Glenn is a great professor! I feel lucky to have had two classes with him. ",
            "\u00a0If you are a CS major, then you have no choice but to take 365 or 366. If you're a mortal like me, 366 is probably too hard, despite the sheer thrill of watching Spielman lecture. You'll just accept your fate, fall into your lot, and take 365. If you're not a CS major, don't take this class! It's dry as sandpaper, and the course logistics is just terrible. Will you learn material about algorithms? Yes. The material is standard. But you will do so in a class where we never received anything after problem set 2 before the final, and it feels like the professor basically gave up teaching the course slightly before the halfway point. As such, you're entering a black box where you don't really know what grade you'll receive until it's too late. And you'll be wondering all the time what would have happened if you chose to take 366 instead. ",
            "\u00a0I would only recommend this class if you have to take it for your major and don't think you can handle intensive algorithms. Lecture is really boring and difficult to concentrate on, and the grading is very nitpicky. If you don't explain the proofs exactly the way the professor does and exactly use his personal preferred terminology, you lose points. "
        ]
    ]
}